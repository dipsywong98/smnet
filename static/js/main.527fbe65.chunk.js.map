{"version":3,"sources":["../../node_modules/peerjs/dist sync","../../src/types.ts","reportWebVitals.ts","../../src/Logger.ts","../../src/PeerFactory.ts","../../src/Errors.ts","../../src/Generic/GenericGameAction.ts","../../src/Generic/GenericGameState.ts","../../src/NetworkStrategies/AbstractNetworkStrategy.ts","../../src/pause.ts","../../src/NetworkStrategies/StarHostStrategy.ts","../../src/NetworkStrategies/StarMemberStrategy.ts","../../src/DataStream.ts","../../src/StateManager.ts","../../src/NetworkStrategies/NoConcurrentStagingDecorator.ts","../../src/NetworkStrategies/AbstractNetworkStrategyDecorator.ts","../../src/Network.ts","../../src/Generic/useGameNetwork.tsx","../../src/Generic/withGenericGameReducer.ts","demo-gamenet/poker99/Poker99Action.ts","demo-gamenet/poker99/types.ts","../../src/useNetwork.ts","demo-gamenet/poker99/Poker99State.ts","demo-gamenet/poker99/constants.ts","demo-gamenet/poker99/cards/bomb.ts","demo-gamenet/poker99/cards/normal.ts","demo-gamenet/poker99/cards/pm.ts","demo-gamenet/poker99/cards/reverse.ts","demo-gamenet/poker99/cards/skip.ts","demo-gamenet/poker99/cards/target.ts","demo-gamenet/poker99/cards/spade1.ts","demo-gamenet/poker99/Poker99Reducer.ts","demo-gamenet/poker99/utils.ts","demo-gamenet/poker99/aiAction.ts","demo-gamenet/withPoker99Network.tsx","demo-gamenet/getRandomName.ts","demo-gamenet/Home.tsx","demo-gamenet/RobotAdd.tsx","demo-gamenet/PersonAdd.tsx","demo-gamenet/Room.tsx","demo-gamenet/Game.tsx","demo-gamenet/GameApp.tsx","../../src/GenericBoardGame/useBoardGameNetwork.tsx","../../src/GenericBoardGame/withGenericBoardGameReducer.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","PkgType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PeerFactory","constructor","options","this","peerHostConfig","process","host","port","Number","path","secure","config","JSON","peer","make","Promise","reject","AlreadyJoinedNetworkError","message","name","NotConnectedToPeerError","NoStagingStateError","NetworkBusyError","LoggerLevel","historyLevel","verbose","keep","_logs","pushLog","level","date","Date","getLogFunction","console","window","withColor","logFunction","css","prefix","withHistoryButWrongLineNumber","Proxy","apply","target","withAllFeatures","clear","printLogs","getLogs","log","logger","GameActionTypes","AbstractNetworkStrategy","network","peerFactory","isAdmin","leaving","stagingState","stagingChecksum","checksum","pause","a","setTimeout","StarHostStrategy","applyReducer","cs","broadcast","responses","errors","forceUpdate","promote","error","conn","data","handlePromote","dispatch","type","payload","dispatchMemberLeft","StarMemberStrategy","prevState","oldId","initAsStarHost","dispatchHostLeft","reconnectToHost","DataStream","connections","sentPromises","rest","getConn","pid","v4","pkgType","promises","Object","StateManager","initialState","onChange","historyMax","history","cloneDeep","state","length","NoConcurrentStagingDecorator","wrappedStrategy","handleDispatch","networkStrategy","handleCancel","setUpConnection","noConcurrentStaging","Network","stateReducer","initialStateOrManager","dataStream","getHistory","kick","stateManager","promise","networkName","initAsStarMember","oldPeer","connect","err","send","action","undefined","myId","pkg","newState","PlayerType","GenericGameState","minPlayer","maxPlayer","members","spectators","localPlayers","aiPlayers","nameDict","players","ready","started","compose","t","funcs","func","shuffle","i","j","Math","withMemberJoin","peerId","withRename","newName","withUpdateLocalAndAi","oldMasterPeerId","newMasterId","masterId","withRemovePlayer","withGameStart","who","withShuffleId","generalGameReducer","masterPeerId","withToggleReady","withAddAiPlayer","fakePeerId","nextState","withAddLocalPlayer","GameAppState","Poker99ActionType","Suit","useGameNetwork","useState","reducer","useMemo","useEffect","join","leave","connected","useNetwork","withGenericGameReducer","myPlayerId","myLocals","myAis","getPeerId","playerId","dispatchAs","rename","READY","start","START","addLocal","addAi","setGameAppState","gameAppState","room","playerType","nameOrId","Poker99State","turn","direction","points","dead","drawDeck","trashDeck","playerDeck","winner","logs","cardPoints","1","2","3","4","5","6","7","8","9","10","11","12","13","bomb","card","number","isBombCard","withEndTurn","withIncrementTurn","isNormalCard","suit","SPADE","includes","normal","isPmCard","pm","increase","reverse","isReverseCard","skip","isSkipCard","isTargetCard","spade1","isSpade1Card","withDrawCard","shift","push","withDiscardCard","filter","nextPlayerId","current","cards","min","Infinity","index","forEach","k","next","minPossible","map","Poker99Reducer","deck","getFullDeck","withInitGame","PLAY_CARD","cardStr","find","playCard","withPlayCard","END","isSkippingCard","aiAction","normalCards","sort","b","card13","c","pmCards","Poker99Context","createContext","usePoker99","useContext","getRandomName","uniqueNamesGenerator","dictionaries","adjectives","colors","animals","style","separator","Home","setName","setRoom","setError","catch","Paper","elevation","padding","Grid","container","justify","spacing","item","Typography","variant","TextField","label","value","fullWidth","Button","color","disabled","onClick","RobotAdd","SvgIcon","width","height","viewBox","d","PersonAdd","Room","creatingLocal","setCreatingLocal","theme","useTheme","handleStartClick","handleReadyClick","handleAddAiClick","handleCloseClick","createLocalOrAI","renderHintText","minWidth","alignItems","IconButton","size","title","Divider","List","entries","LOCAL","AI","palette","primary","main","success","text","secondary","ListItem","key","ListItemIcon","Visibility","NORMAL","Person","PersonOutline","getIcon","ListItemText","ListItemSecondaryAction","edge","aria-label","CancelOutlined","Alert","severity","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","DialogActions","Game","hideDeck","setHideDeck","renderedDeckId","setTarget","increment","setIncrement","handleError","clickCard","renderDeck","again","pointerEvents","fontWeight","textDecorationLine","slice","s","transition","time","props","ease","p","GameApp","Component","WithGameNetwork","withGenericBoardGameReducer","prevTurn","useRef","setRenderedDeckId","n","useBoardGameNetwork","Provider","displayName","withPoker99Network","overflow","position","display","left","justifyContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.527fbe65.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 5960;","import { DataConnection } from 'peerjs'\r\n\r\nexport interface NetworkAction {\r\n  peerId?: string\r\n\r\n  [key: string]: unknown | undefined\r\n}\r\n\r\nexport interface NetworkState {\r\n  networkName?: string\r\n\r\n  [key: string]: unknown | undefined\r\n}\r\n\r\nexport interface PromiseHandler {\r\n  resolve: (data?: never) => void\r\n  reject: (error: string) => void\r\n}\r\n\r\nexport enum PkgType {\r\n  DISPATCH = 'DISPATCH',\r\n  ACK = 'ACK',\r\n  NACK = 'NACK',\r\n  PROMOTE = 'PROMOTE',\r\n  CANCEL = 'CANCEL',\r\n  SET_STATE = 'SET_STATE',\r\n  ASK_STATE = 'ASK_STATE',\r\n  KICK = 'KICK',\r\n}\r\n\r\nexport type Pkg<State extends NetworkState, Action extends NetworkAction> = (\r\n  { pkgType: PkgType.DISPATCH, data: Action }\r\n  | { pkgType: PkgType.ACK, data: string }\r\n  | { pkgType: PkgType.NACK, data: string }\r\n  | { pkgType: PkgType.CANCEL, data: string }\r\n  | { pkgType: PkgType.SET_STATE, data: NetworkState }\r\n  | { pkgType: PkgType.ASK_STATE }\r\n  | { pkgType: PkgType.KICK, data: string }\r\n  | { pkgType: PkgType }) & { pid?: string, data: never }\r\n\r\nexport type NetworkReducer<State extends NetworkState, Action extends NetworkAction> = (prevState: State, action: Action) => State\r\n\r\nexport interface SendResponse<T> {\r\n  conn: DataConnection\r\n  data?: T\r\n  error?: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","export enum LoggerLevel {\r\n  ALL,\r\n  TRACE,\r\n  LOG,\r\n  DEBUG,\r\n  INFO,\r\n  WARN,\r\n  ERROR,\r\n  OFF\r\n}\r\n\r\ninterface Log {\r\n  level: LoggerLevel\r\n  message: unknown[]\r\n  date: Date\r\n}\r\n\r\ntype LogFunction = (...message: unknown[]) => void\r\n\r\nclass Logger {\r\n  set historyLevel (value: LoggerLevel) {\r\n    this._historyLevel = value\r\n  }\r\n\r\n  set verboseLevel (value: LoggerLevel) {\r\n    this._verboseLevel = value\r\n  }\r\n\r\n  set keep (value: number) {\r\n    this._keep = value\r\n  }\r\n\r\n  private _historyLevel: LoggerLevel\r\n  private _verboseLevel: LoggerLevel\r\n  private _keep: number\r\n  private readonly _logs: Log[] = []\r\n\r\n  constructor (historyLevel: LoggerLevel, verbose: LoggerLevel, keep: number) {\r\n    this._historyLevel = historyLevel\r\n    this._verboseLevel = verbose\r\n    this._keep = keep\r\n  }\r\n\r\n  private readonly pushLog = (level: LoggerLevel, date: Date, ...message: unknown[]): void => {\r\n    if (this._logs.length >= this._keep) {\r\n      this._logs.shift()\r\n    }\r\n    this._logs.push({\r\n      level,\r\n      message,\r\n      date: new Date()\r\n    })\r\n  }\r\n\r\n  private readonly getLogFunction: (level: LoggerLevel) => LogFunction = level => {\r\n    if (level < this._verboseLevel) {\r\n      return () => {\r\n        //\r\n      }\r\n    }\r\n    switch (level) {\r\n      case LoggerLevel.INFO:\r\n        return console.info.bind(window.console)\r\n      case LoggerLevel.LOG:\r\n        return console.log.bind(window.console)\r\n      case LoggerLevel.DEBUG:\r\n        return console.log.bind(window.console)\r\n      case LoggerLevel.ERROR:\r\n        return console.error.bind(window.console)\r\n      case LoggerLevel.WARN:\r\n        return console.warn.bind(window.console)\r\n      case LoggerLevel.TRACE:\r\n        return console.trace.bind(window.console)\r\n      default:\r\n        return () => {\r\n          //\r\n        }\r\n    }\r\n  }\r\n\r\n  private readonly withColor: (level: LoggerLevel, date?: Date) => (logFunction: LogFunction) => LogFunction = (level, date) => logFunction => {\r\n    const css = {\r\n      [LoggerLevel.INFO]: 'color: DodgerBlue',\r\n      [LoggerLevel.LOG]: '',\r\n      [LoggerLevel.DEBUG]: 'color: Green',\r\n      [LoggerLevel.ERROR]: '',\r\n      [LoggerLevel.WARN]: '',\r\n      [LoggerLevel.TRACE]: 'color: Green',\r\n      [LoggerLevel.ALL]: '',\r\n      [LoggerLevel.OFF]: ''\r\n    }[level]\r\n    const prefix = date === undefined ? `%c[${LoggerLevel[level]}]` : `%c[${date.toISOString()} ${LoggerLevel[level]}]`\r\n    return Function.prototype.bind.call(logFunction, console, prefix, css) as LogFunction\r\n  }\r\n\r\n  private readonly withHistoryButWrongLineNumber: (level: LoggerLevel) => (logFunction: LogFunction) => LogFunction = level => logFunction => {\r\n    return new Proxy(logFunction, {\r\n      apply: (target: LogFunction, thisArg: unknown, argList: unknown[]) => {\r\n        const date = new Date()\r\n        this.pushLog(level, date, ...argList)\r\n        return target(...argList)\r\n      }\r\n    })\r\n  }\r\n\r\n  private readonly withAllFeatures: (level: LoggerLevel) => LogFunction = level => {\r\n    if (level >= this._historyLevel) {\r\n      return this.withHistoryButWrongLineNumber(level)(this.withColor(level)(this.getLogFunction(level)))\r\n    } else {\r\n      return this.withColor(level)(this.getLogFunction(level))\r\n    }\r\n  }\r\n\r\n  clear = (): void => {\r\n    this._logs.splice(0, this._logs.length)\r\n  }\r\n\r\n  public get info (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.INFO)\r\n  }\r\n\r\n  public get log (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.LOG)\r\n  }\r\n\r\n  public get debug (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.DEBUG)\r\n  }\r\n\r\n  public get error (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.ERROR)\r\n  }\r\n\r\n  public get warn (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.WARN)\r\n  }\r\n\r\n  public get trace (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.TRACE)\r\n  }\r\n\r\n  printLogs = (): void => {\r\n    this._logs.forEach(({ level, message, date }) => {\r\n      this.withColor(level, date)(this.getLogFunction(level))(...message)\r\n    })\r\n  }\r\n\r\n  getLogs = (level = LoggerLevel.ALL): Log[] => {\r\n    return this._logs.filter((log) => log.level >= level)\r\n  }\r\n}\r\n\r\nexport const createLogger = (): Logger => {\r\n  switch (process.env.NODE_ENV) {\r\n    case 'development':\r\n      return new Logger(LoggerLevel.ALL, LoggerLevel.WARN, 100)\r\n    case 'production':\r\n      return new Logger(LoggerLevel.ALL, LoggerLevel.WARN, 100)\r\n    default:\r\n      return new Logger(LoggerLevel.OFF, LoggerLevel.OFF, 0)\r\n  }\r\n}\r\n\r\nexport const logger = createLogger()\r\n\r\nif (process.env.REACT_APP_SMNET_VERBOSE_ALL_NO_HISTORY !== undefined) {\r\n  logger.historyLevel = LoggerLevel.OFF\r\n  logger.verboseLevel = LoggerLevel.ALL\r\n}\r\n","import Peer from 'peerjs'\n\nexport class PeerFactory {\n  private readonly _options?: Peer.PeerJSOption\n  constructor (options?: Peer.PeerJSOption) {\n    if (options !== undefined) {\n      this._options = options\n    } else {\n      const peerHostConfig = process.env.REACT_APP_PEER_CONFIG\n      if (peerHostConfig === undefined && process.env.REACT_APP_PEER_HOST === undefined) {\n        this._options = undefined\n      } else {\n        this._options = {\n          host: process.env.REACT_APP_PEER_HOST ?? 'localhost',\n          port: Number.parseInt(process.env.REACT_APP_PEER_PORT ?? '9000', 10),\n          path: process.env.REACT_APP_PEER_PATH ?? '/peer',\n          secure: process.env.REACT_APP_PEER_SECURE === 'true',\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          config: peerHostConfig !== undefined ? JSON.parse(peerHostConfig) : undefined\n        }\n      }\n    }\n  }\n\n  make (id?: string): Peer {\n    return new Peer(id, this._options)\n  }\n\n  async makeAndOpen (id?: string): Promise<Peer> {\n    const peer = this.make(id)\n    return await new Promise((resolve, reject) => {\n      peer.on('open', () => {\n        resolve(peer)\n      })\n      peer.on('error', () => {\n        reject(peer)\n      })\n    })\n  }\n}\n","export class AlreadyJoinedNetworkError extends Error {\r\n  message = 'already joined network'\r\n  name = 'AlreadyJoinedNetworkError'\r\n}\r\n\r\nexport class PlayerNameAlreadyExistError extends Error {\r\n  message = 'player name already exist'\r\n  name = 'PlayerNameAlreadyExistError'\r\n}\r\n\r\nexport class NotConnectedToPeerError extends Error {\r\n  name = 'PlayerNameAlreadyExistError'\r\n\r\n  constructor (id: string) {\r\n    super()\r\n    this.message = `not connected to ${id}`\r\n  }\r\n}\r\n\r\nconst NO_STAGING_STATE = 'No Staging State'\r\nexport class NoStagingStateError extends Error {\r\n  message = NO_STAGING_STATE\r\n  name = 'NoStagingStateError'\r\n}\r\n\r\nexport class NetworkBusyError extends Error {\r\n  message = 'Network is busy, please retry later'\r\n  name = 'NetworkBusyError'\r\n}\r\n","import { NetworkAction } from 'smnet'\r\n\r\nexport type GenericGameAction = ({\r\n  type: GameActionTypes.RENAME\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.MEMBER_LEFT\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.HOST_LEFT\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.READY\r\n} | {\r\n  type: GameActionTypes.START\r\n} | {\r\n  type: GameActionTypes.MEMBER_JOIN\r\n} | {\r\n  type: GameActionTypes.ADD_AI\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.ADD_LOCAL\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.REMOVE_LOCAL_AI\r\n  payload: string\r\n} | {\r\n  type: string\r\n} | {\r\n  type: number\r\n}) & NetworkAction\r\n\r\nexport enum GameActionTypes {\r\n  MEMBER_JOIN = 'member-join',\r\n  MEMBER_LEFT = 'member-left',\r\n  HOST_LEFT = 'host-left',\r\n  RENAME = 'rename',\r\n  READY = 'ready',\r\n  START = 'start',\r\n  ADD_AI = 'add-ai',\r\n  ADD_LOCAL = 'add-local',\r\n  REMOVE_LOCAL_AI = 'remove-local-ai',\r\n}\r\n","import { NetworkState } from 'smnet'\r\n\r\nexport enum PlayerType {\r\n  NORMAL,\r\n  LOCAL,\r\n  AI\r\n}\r\n\r\nexport class GenericGameState implements NetworkState {\r\n  [key: string]: unknown | undefined\r\n\r\n  minPlayer = 1\r\n  maxPlayer = 4\r\n  networkName?: string\r\n  /**\r\n   * all connected members and their names\r\n   */\r\n  members: { [peerId: string]: string } = {}\r\n  /**\r\n   * peerId in this dict iff not playing\r\n   */\r\n  spectators: { [peerId: string]: true } = {}\r\n  /**\r\n   * local players, key: display name, value is the peerId that control this local player\r\n   */\r\n  localPlayers: { [name: string]: string } = {}\r\n  /**\r\n   * ai players, key: display name, value is the peerId that control this ai player\r\n   */\r\n  aiPlayers: { [name: string]: string } = {}\r\n  /**\r\n   * name to in game id map\r\n   */\r\n  nameDict: { [name: string]: number } = {}\r\n  /**\r\n   * in game id to name map\r\n   */\r\n  players: string[] = []\r\n  /**\r\n   * peerId in ready iff ready\r\n   */\r\n  ready: { [peerId: string]: true } = {}\r\n  started = false\r\n}\r\n","import { NetworkStrategy } from './NetworkStrategy'\r\nimport { Network } from '../Network'\r\nimport { NetworkAction, NetworkState } from '../types'\r\nimport Peer from 'peerjs'\r\nimport checksum from 'checksum'\r\nimport { NoStagingStateError } from '../Errors'\r\nimport { PeerFactory } from '../PeerFactory'\r\nimport { logger } from '../Logger'\r\n\r\n/**\r\n * AbstractNetworkStrategies is the base class of all other NetworkStrategies, it\r\n * hold the stagingState, which is an intermediate state computed when a point dispatch,\r\n *    but hasn't verified by other points,\r\n *    after getting verified we promote this stagingState to live state that is used by the application,\r\n *    NetworkStrategies can implement different logics to handle this\r\n * It always reject dispatch when there is statingState because even if we queue the dispatches in a buffer,\r\n *    the users may not be aware of what would be the new state before sending this request,\r\n *    the drawback is the user need to send their request manually later\r\n */\r\nexport abstract class AbstractNetworkStrategy<State extends NetworkState, Action extends NetworkAction> implements NetworkStrategy<State, Action> {\r\n  isAdmin = true\r\n  leaving = false\r\n  network: Network<State, Action>\r\n  stagingState?: State\r\n  protected peerFactory: PeerFactory\r\n\r\n  constructor (network: Network<State, Action>, peerFactory: PeerFactory) {\r\n    this.network = network\r\n    this.peerFactory = peerFactory\r\n  }\r\n\r\n  public abstract dispatch (action: Action): Promise<void>\r\n\r\n  public abstract handleDispatch (prevState: State, action: Action): Promise<State>\r\n\r\n  public async handlePromote (cs: string): Promise<void> {\r\n    if (this.stagingState !== undefined) {\r\n      const stagingChecksum = checksum(JSON.stringify(this.stagingState))\r\n      if (stagingChecksum === cs) {\r\n        this.network.setState(this.stagingState)\r\n        logger.info('promoted the stagingState', this.stagingState)\r\n        this.stagingState = undefined\r\n      } else {\r\n        logger.error(`Cannot promote, staging checksum is ${stagingChecksum} while requested to promote checksum of ${cs}`)\r\n        throw new Error('Cannot promote staging state with unmatched checksum')\r\n      }\r\n    } else {\r\n      logger.error('Cannot promote, there is no staging state')\r\n      throw new NoStagingStateError()\r\n    }\r\n    return await Promise.resolve()\r\n  }\r\n\r\n  public async handleCancel (cs: string): Promise<void> {\r\n    if (this.stagingState !== undefined) {\r\n      const stagingChecksum = checksum(JSON.stringify(this.stagingState))\r\n      if (stagingChecksum === cs) {\r\n        logger.info('canceled the stagingState', this.stagingState)\r\n        this.stagingState = undefined\r\n      } else {\r\n        logger.error(`Cannot cancel, staging checksum is ${stagingChecksum} while requested to cancel checksum of ${cs}`)\r\n        throw new Error('Cannot cancel staging state with unmatched checksum')\r\n      }\r\n    } else {\r\n      logger.error('Cannot cancel, there is no staging state')\r\n      throw new NoStagingStateError()\r\n    }\r\n    return await Promise.resolve()\r\n  }\r\n\r\n  public forceCancel (): void {\r\n    logger.info('force cancel the stagingState')\r\n    this.stagingState = undefined\r\n  }\r\n\r\n  public isBusy (): boolean {\r\n    return this.stagingState !== undefined\r\n  }\r\n\r\n  public abstract setUpConnection (conn: Peer.DataConnection): void\r\n}\r\n","export const pause = async (timeout: number): Promise<void> => await new Promise(resolve => {\r\n  setTimeout(() => {\r\n    resolve()\r\n  }, timeout)\r\n})\r\n","import { NetworkAction, NetworkState, PkgType } from '../types'\r\nimport Peer from 'peerjs'\r\nimport checksum from 'checksum'\r\nimport { AbstractNetworkStrategy } from './AbstractNetworkStrategy'\r\nimport { logger } from '../Logger'\r\nimport { pause } from '../pause'\r\n\r\n/**\r\n * Strategy of the center point of star network\r\n * star network host has the greatest power and force everyone to use his state\r\n */\r\nexport class StarHostStrategy<State extends NetworkState, Action extends NetworkAction> extends AbstractNetworkStrategy<State, Action> {\r\n  public async dispatch (action: Action): Promise<void> {\r\n    // run reducer locally, stage it and get checksum of new state\r\n    logger.debug('reduce locally', this.network.getState(), action)\r\n    this.stagingState = this.network.applyReducer(this.network.getState(), action)\r\n    const cs = checksum(JSON.stringify(this.stagingState))\r\n    logger.debug('stagingState', this.stagingState)\r\n\r\n    // tell other points to calculate\r\n    const responses = await this.network.broadcast(PkgType.DISPATCH, action)\r\n    logger.debug('obtained responses', responses)\r\n\r\n    // revert if anypoint threw any error\r\n    // force update if that point wont have same checksum\r\n    // promote if that point will have same checksum\r\n    const errors: Array<{ error: string, conn: Peer.DataConnection }> = []\r\n    const forceUpdate: Peer.DataConnection[] = []\r\n    const promote: Peer.DataConnection[] = []\r\n    responses.forEach(({ conn, data, error }) => {\r\n      if (error !== undefined) {\r\n        errors.push({ error, conn })\r\n      } else {\r\n        if (data !== cs) {\r\n          forceUpdate.push(conn)\r\n        } else {\r\n          promote.push(conn)\r\n        }\r\n      }\r\n    })\r\n    // logger.debug('different type of responses', { errors, forceUpdate, promote })\r\n    if (promote.length === responses.length) {\r\n      logger.debug('all can be promoted')\r\n    } else {\r\n      if (errors.length > 0) {\r\n        logger.error(`received ${errors.length} error from some peers`, errors)\r\n      }\r\n      if (forceUpdate.length > 0) {\r\n        logger.warn(`received ${forceUpdate.length} unmatched checksum from some peer, forceUpdating them`, forceUpdate)\r\n      }\r\n    }\r\n    if (errors.length > 0) {\r\n      await this.network.broadcast(PkgType.CANCEL, cs)\r\n      throw new Error(errors[0].error)\r\n    } else {\r\n      forceUpdate.map(async conn => {\r\n        await this.network.send(conn, PkgType.SET_STATE, this.stagingState)\r\n      })\r\n      promote.map(async conn => {\r\n        await this.network.send(conn, PkgType.PROMOTE, cs)\r\n      })\r\n    }\r\n\r\n    // promote owns' state after updating all others' state\r\n    await this.handlePromote(cs)\r\n  }\r\n\r\n  // other points' dispatch action will directly forward to host, and host broadcast the action\r\n  // if host cannot broadcast the action, it will feedback the source with error message\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    await this.dispatch(action)\r\n    return this.network.getState()\r\n  }\r\n\r\n  // no special handlers for star host\r\n  public setUpConnection (conn: Peer.DataConnection): void {\r\n    conn.on('close', () => {\r\n      this.dispatchMemberLeft(conn.peer).catch(logger.error)\r\n    })\r\n  }\r\n\r\n  private async dispatchMemberLeft (id: string): Promise<void> {\r\n    if (!this.leaving) {\r\n      try {\r\n        await this.network.dispatch({\r\n          type: 'member-left',\r\n          payload: id\r\n        } as unknown as Action)\r\n      } catch (e) {\r\n        await pause(1000)\r\n        await this.dispatchMemberLeft(id)\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NetworkAction, NetworkState, PkgType } from '../types'\r\nimport Peer from 'peerjs'\r\nimport { AbstractNetworkStrategy } from './AbstractNetworkStrategy'\r\nimport { pause } from '../pause'\r\nimport { logger } from '../Logger'\r\n\r\n/**\r\n * Strategy of the non-center point of star network\r\n * star network host has the greatest power and force everyone to use his state\r\n */\r\nexport class StarMemberStrategy<State extends NetworkState, Action extends NetworkAction> extends AbstractNetworkStrategy<State, Action> {\r\n  isAdmin = false\r\n\r\n  // just forward the dispatch to host\r\n  public async dispatch (action: Action): Promise<void> {\r\n    await this.network.broadcast(PkgType.DISPATCH, action)\r\n  }\r\n\r\n  // just do the reduce when receiving a dispatch\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    this.stagingState = this.network.applyReducer(prevState, action)\r\n    return await Promise.resolve(this.stagingState)\r\n  }\r\n\r\n  // when got disconnected from host, most probably due to host is down\r\n  // it will try to be the new host or reconnect to new host\r\n  public setUpConnection (conn: Peer.DataConnection): void {\r\n    conn.on('close', () => {\r\n      if (!this.leaving) {\r\n        this.recover().catch(logger.error)\r\n      }\r\n    })\r\n  }\r\n\r\n  private async recover (): Promise<void> {\r\n    const name = this.network.getNetworkName()\r\n    if (name !== undefined) {\r\n      try {\r\n        const oldId = this.network.myId\r\n        logger.debug('oldId', oldId)\r\n        await this.network.initAsStarHost(name, this.peerFactory)\r\n        logger.info('became the new host, changed peerId, notify others')\r\n        if (oldId !== undefined) {\r\n          await this.dispatchHostLeft(oldId)\r\n        }\r\n      } catch (e) {\r\n        await this.network.reconnectToHost(name)\r\n        // await this.network.connectToHost()\r\n      }\r\n    }\r\n  }\r\n\r\n  private async dispatchHostLeft (id: string): Promise<void> {\r\n    try {\r\n      await this.network.dispatch({\r\n        type: 'host-left',\r\n        payload: id\r\n      } as unknown as Action)\r\n    } catch (e) {\r\n      await pause(1000)\r\n      await this.dispatchHostLeft(id)\r\n    }\r\n  }\r\n}\r\n","import Peer, { DataConnection } from 'peerjs'\r\nimport { PkgType, PromiseHandler, SendResponse } from './types'\r\nimport { v4 } from 'uuid'\r\nimport { NotConnectedToPeerError } from './Errors'\r\n\r\nexport class DataStream {\r\n  private connections: { [id: string]: DataConnection } = {}\r\n  private sentPromises: { [id: string]: PromiseHandler } = {}\r\n\r\n  public reset (): void {\r\n    this.connections = {}\r\n  }\r\n\r\n  public registerConnection (conn: Peer.DataConnection): void {\r\n    this.connections[conn.peer] = conn\r\n  }\r\n\r\n  public unregisterConnection (conn: Peer.DataConnection): void {\r\n    const { [conn.peer]: a, ...rest } = this.connections\r\n    this.connections = rest\r\n  }\r\n\r\n  public getConnections (): { [id: string]: DataConnection } {\r\n    return this.connections\r\n  }\r\n\r\n  public async send<T, U = unknown> (id: string | DataConnection, pkgType: PkgType, data: T): Promise<SendResponse<U>> {\r\n    const conn = this.getConn(id)\r\n    return await new Promise((resolve, reject) => {\r\n      const pid = v4()\r\n      this.sentPromises[pid] = {\r\n        resolve: (data?: never) => resolve({ conn, data }),\r\n        reject: (error: string) => reject(new Error(error))\r\n      }\r\n      conn.send({ pkgType, data, pid })\r\n    })\r\n  }\r\n\r\n  public sendACK (connId: string | DataConnection, pid: string|undefined, data: unknown): void {\r\n    const conn = this.getConn(connId)\r\n    conn.send({ pkgType: PkgType.ACK, pid, data })\r\n  }\r\n\r\n  public sendNACK (connId: string | DataConnection, pid: string|undefined, data: unknown): void {\r\n    const conn = this.getConn(connId)\r\n    conn.send({ pkgType: PkgType.NACK, pid, data })\r\n  }\r\n\r\n  public async broadcast<T, U = unknown> (pkgType: PkgType, data: T): Promise<Array<SendResponse<U>>> {\r\n    const promises = Object.keys(this.connections).map(async id => await this.send<T, U>(id, pkgType, data))\r\n    return await Promise.all(promises)\r\n  }\r\n\r\n  public receiveACK (pid: string | undefined, response: never): void {\r\n    if (pid !== undefined && pid in this.sentPromises) {\r\n      const { resolve } = this.sentPromises[pid]\r\n      resolve(response)\r\n      this.removeSentPromise(pid)\r\n    }\r\n  }\r\n\r\n  public receiveNACK (pid: string | undefined, errorMessage: never): void {\r\n    if (pid !== undefined && pid in this.sentPromises) {\r\n      const { reject } = this.sentPromises[pid]\r\n      reject(errorMessage)\r\n      this.removeSentPromise(pid)\r\n    }\r\n  }\r\n\r\n  private removeSentPromise (pid: string): void {\r\n    const { [pid]: p, ...rest } = this.sentPromises\r\n    this.sentPromises = rest\r\n  }\r\n\r\n  private getConn (id: string | DataConnection): DataConnection {\r\n    if (typeof id === 'string') {\r\n      const conn = this.connections[id]\r\n      if (conn !== undefined) {\r\n        return conn\r\n      }\r\n      throw new NotConnectedToPeerError(id)\r\n    } else {\r\n      return id\r\n    }\r\n  }\r\n}\r\n","import { NetworkState } from './types'\r\nimport cloneDeep from 'clone-deep'\r\n\r\ntype Setter<State extends NetworkState> = (state: State) => void\r\n\r\ntype Resetter = () => void\r\n\r\n/**\r\n * Make State changes policy extensible\r\n * Only have get, set and reset\r\n */\r\nexport class StateManager<State extends NetworkState> {\r\n  private readonly _set: Setter<State>\r\n  private readonly _reset: Resetter\r\n  private readonly initialState!: State\r\n  private state!: State\r\n  private readonly history: State[] = []\r\n  private readonly historyMax: number\r\n\r\n  constructor (initialState: State, onChange?: Setter<State>, historyMax = 0) {\r\n    this.historyMax = historyMax\r\n    this.initialState = cloneDeep(initialState)\r\n    this._reset = () => this.set(cloneDeep(this.initialState))\r\n    this.state = initialState\r\n\r\n    this._set = onChange ?? ((state: State) => {\r\n      this.state = state\r\n    })\r\n  }\r\n\r\n  public get (): State {\r\n    return this.state\r\n  }\r\n\r\n  public set (state: State): void {\r\n    this.state = state\r\n    if (this.historyMax > 0) {\r\n      if (this.history.length >= this.historyMax) {\r\n        this.history.shift()\r\n      }\r\n      this.history.push(cloneDeep(state))\r\n    }\r\n    this._set({ ...state })\r\n  }\r\n\r\n  public reset (): void {\r\n    this._reset()\r\n  }\r\n\r\n  public getHistory (): State[] {\r\n    return this.history\r\n  }\r\n\r\n  static make<State extends NetworkState> (initialState: State, onChange?: Setter<State>, historyMax?: number): StateManager<State> {\r\n    return new StateManager<State>(initialState, onChange, historyMax)\r\n  }\r\n}\r\n","import { AbstractNetworkStrategyDecorator } from './AbstractNetworkStrategyDecorator'\r\nimport { NetworkAction, NetworkState } from '../types'\r\nimport { NetworkBusyError } from '../Errors'\r\nimport { NetworkStrategy } from './NetworkStrategy'\r\nimport { logger } from '../Logger'\r\n\r\nexport class NoConcurrentStagingDecorator<State extends NetworkState, Action extends NetworkAction> extends AbstractNetworkStrategyDecorator<State, Action> {\r\n  public async dispatch (action: Action): Promise<void> {\r\n    if (this.stagingState !== undefined) {\r\n      logger.error('cannot dispatch when there is staging state', this.stagingState)\r\n      throw new NetworkBusyError()\r\n    }\r\n    // next action\r\n    return await this.wrappedStrategy.dispatch(action)\r\n  }\r\n\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    if (this.stagingState !== undefined) {\r\n      logger.error('cannot handle dispatch request when there is staging state', this.stagingState)\r\n      throw new NetworkBusyError()\r\n    }\r\n    // next action\r\n    return await this.wrappedStrategy.handleDispatch(prevState, action)\r\n  }\r\n}\r\n\r\nexport const noConcurrentStaging = <State extends NetworkState, Action extends NetworkAction> (networkStrategy: NetworkStrategy<State, Action>): NetworkStrategy<State, Action> => {\r\n  return new NoConcurrentStagingDecorator(networkStrategy)\r\n}\r\n","import { NetworkStrategy } from './NetworkStrategy'\r\nimport { NetworkAction, NetworkState } from '../types'\r\nimport { Network } from '../Network'\r\nimport { DataConnection } from 'peerjs'\r\n\r\nexport abstract class AbstractNetworkStrategyDecorator<State extends NetworkState, Action extends NetworkAction> implements NetworkStrategy<State, Action> {\r\n  protected wrappedStrategy: NetworkStrategy<State, Action>\r\n\r\n  get stagingState (): State | undefined {\r\n    return this.wrappedStrategy.stagingState\r\n  }\r\n\r\n  set stagingState (value: State | undefined) {\r\n    this.wrappedStrategy.stagingState = value\r\n  }\r\n\r\n  get network (): Network<State, Action> {\r\n    return this.wrappedStrategy.network\r\n  }\r\n\r\n  get leaving (): boolean {\r\n    return this.wrappedStrategy.leaving\r\n  }\r\n\r\n  set leaving (flag: boolean) {\r\n    this.wrappedStrategy.leaving = flag\r\n  }\r\n\r\n  get isAdmin (): boolean {\r\n    return this.wrappedStrategy.isAdmin\r\n  }\r\n\r\n  set isAdmin (flag: boolean) {\r\n    this.wrappedStrategy.isAdmin = flag\r\n  }\r\n\r\n  constructor (networkStrategy: NetworkStrategy<State, Action>) {\r\n    this.wrappedStrategy = networkStrategy\r\n  }\r\n\r\n  public async dispatch (action: Action): Promise<void> {\r\n    return await this.wrappedStrategy.dispatch(action)\r\n  }\r\n\r\n  public forceCancel (): void {\r\n    return this.wrappedStrategy.forceCancel()\r\n  }\r\n\r\n  public async handleCancel (cs: string): Promise<void> {\r\n    return await this.wrappedStrategy.handleCancel(cs)\r\n  }\r\n\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    return await this.wrappedStrategy.handleDispatch(prevState, action)\r\n  }\r\n\r\n  public async handlePromote (cs: string): Promise<void> {\r\n    return await this.wrappedStrategy.handlePromote(cs)\r\n  }\r\n\r\n  public isBusy (): boolean {\r\n    return this.wrappedStrategy.isBusy()\r\n  }\r\n\r\n  public setUpConnection (conn: DataConnection): void {\r\n    return this.wrappedStrategy.setUpConnection(conn)\r\n  }\r\n}\r\n","import { NetworkAction, NetworkReducer, NetworkState, Pkg, PkgType, SendResponse } from './types'\r\nimport { PeerFactory } from './PeerFactory'\r\nimport Peer, { DataConnection } from 'peerjs'\r\nimport { NetworkStrategy } from './NetworkStrategies/NetworkStrategy'\r\nimport { StarHostStrategy } from './NetworkStrategies/StarHostStrategy'\r\nimport checksum from 'checksum'\r\nimport { AlreadyJoinedNetworkError } from './Errors'\r\nimport { StarMemberStrategy } from './NetworkStrategies/StarMemberStrategy'\r\nimport { DataStream } from './DataStream'\r\nimport { StateManager } from './StateManager'\r\nimport { noConcurrentStaging } from './NetworkStrategies/NoConcurrentStagingDecorator'\r\nimport { logger } from './Logger'\r\n\r\n/**\r\n * The main Network class, which holds\r\n * - a networkStrategy that handles behavior when in different kinds of network and position, e.g. the center point in StarNetwork vs other points in that\r\n * - a stateManager, which holds the data state of this network, you may supply you own version of stateManager such as observableStateManager\r\n * - a dataStream, which handle the data exchange between different points in the network\r\n * and it can\r\n * - join a network\r\n * - leave the joined network\r\n * - dispatch changes on the data state\r\n * - get the newest data state\r\n */\r\nexport class Network<State extends NetworkState, Action extends NetworkAction> {\r\n  private peer?: Peer\r\n  private readonly stateManager: StateManager<State>\r\n  private readonly stateReducer: NetworkReducer<State, Action>\r\n  private networkStrategy?: NetworkStrategy<State, Action>\r\n  private networkName?: string\r\n  private readonly dataStream = new DataStream()\r\n\r\n  constructor (stateReducer: NetworkReducer<State, Action>, initialStateOrManager: State | StateManager<State>) {\r\n    if (initialStateOrManager instanceof StateManager) {\r\n      this.stateManager = initialStateOrManager\r\n    } else {\r\n      this.stateManager = StateManager.make(initialStateOrManager)\r\n    }\r\n    this.stateReducer = stateReducer\r\n  }\r\n\r\n  public get myId (): string | undefined {\r\n    return this.peer?.id\r\n  }\r\n\r\n  public get connected (): boolean {\r\n    return this.networkName !== undefined\r\n  }\r\n\r\n  public getNetworkName (): string | undefined {\r\n    return this.networkName\r\n  }\r\n\r\n  public setState (state: State): void {\r\n    this.stateManager.set(state)\r\n  }\r\n\r\n  public getState (): State {\r\n    return this.stateManager.get()\r\n  }\r\n\r\n  public get state (): State {\r\n    return this.getState()\r\n  }\r\n\r\n  public getHistory = (): State[] => {\r\n    return this.stateManager.getHistory()\r\n  }\r\n\r\n  public get isAdmin (): boolean {\r\n    return this.networkStrategy?.isAdmin ?? false\r\n  }\r\n\r\n  /**\r\n   * reduce a given state which changing owns' state\r\n   * @param prevState\r\n   * @param action\r\n   */\r\n  public applyReducer (prevState: State, action: Action): State {\r\n    return this.stateReducer(prevState, action)\r\n  }\r\n\r\n  /**\r\n   * reduce owns' state\r\n   * @param action\r\n   */\r\n  public reduce (action: Action): void {\r\n    this.stateManager.set(this.stateReducer(this.stateManager.get(), action))\r\n  }\r\n\r\n  public kick = async (id: string): Promise<void> => {\r\n    if (this.getNeighbor()?.includes(id) ?? false) {\r\n      await this.send(id, PkgType.KICK, id)\r\n    } else {\r\n      await this.broadcast(PkgType.KICK, id)\r\n    }\r\n  }\r\n\r\n  public async leave (): Promise<void> {\r\n    if (this.peer !== undefined) {\r\n      if (this.networkStrategy !== undefined) {\r\n        this.networkStrategy.leaving = true\r\n      }\r\n      const promise = new Promise(resolve => this.peer?.on('close', resolve))\r\n      this.peer.destroy()\r\n      await promise\r\n      this.peer = undefined\r\n      this.networkName = undefined\r\n      this.dataStream.reset()\r\n      this.stateManager.reset()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Join a network, give a peerFactory if you have different PeerJS configuration\r\n   * @param networkName\r\n   * @param peerFactory\r\n   */\r\n  public async join (networkName: string, peerFactory?: PeerFactory): Promise<void> {\r\n    if (this.peer !== undefined) {\r\n      throw new AlreadyJoinedNetworkError()\r\n    }\r\n    peerFactory = peerFactory ?? new PeerFactory()\r\n    try {\r\n      await this.initAsStarHost(networkName, peerFactory)\r\n      this.stateManager.reset()\r\n      this.setState({ ...this.getState(), networkName })\r\n    } catch (e) {\r\n      logger.info('cannot init as host, try to init as member')\r\n      await this.initAsStarMember(networkName, peerFactory)\r\n    }\r\n    await this.dispatch({\r\n      type: 'member-join'\r\n    } as unknown as Action)\r\n  }\r\n\r\n  /**\r\n   * set up StarHostStrategy\r\n   * @param name\r\n   * @param peerFactory\r\n   */\r\n  public async initAsStarHost (name: string, peerFactory: PeerFactory): Promise<void> {\r\n    logger.info('initing as host')\r\n    const oldPeer = this.peer\r\n    this.peer = await peerFactory.makeAndOpen(name)\r\n    this.peer.on('connection', conn => {\r\n      logger.info('received connection with', conn.peer)\r\n      this.setUpConnection(conn)\r\n    })\r\n    this.networkName = name\r\n    this.networkStrategy = noConcurrentStaging(new StarHostStrategy(this, peerFactory))\r\n    oldPeer?.destroy()\r\n    logger.info('inited as host')\r\n  }\r\n\r\n  /**\r\n   * set up StarMemberStrategy\r\n   * @param name\r\n   * @param peerFactory\r\n   */\r\n  public async initAsStarMember (name: string, peerFactory: PeerFactory): Promise<void> {\r\n    logger.info('initing as member')\r\n    this.networkStrategy = noConcurrentStaging(new StarMemberStrategy(this, peerFactory))\r\n    this.peer = await peerFactory.makeAndOpen()\r\n    logger.info('opened peer')\r\n    await this.reconnectToHost(name)\r\n  }\r\n\r\n  public async reconnectToHost (name: string): Promise<void> {\r\n    if (this.peer === undefined) return\r\n    const conn = this.peer.connect(name)\r\n    this.setUpConnection(conn)\r\n    await new Promise((resolve, reject) => {\r\n      conn.on('open', () => {\r\n        resolve()\r\n      })\r\n      conn.on('error', err => {\r\n        reject(err)\r\n      })\r\n    })\r\n    logger.info('opened connection with host')\r\n    this.dataStream.registerConnection(conn)\r\n    this.networkName = name\r\n    logger.info('requesting state from host')\r\n    const { data } = await this.dataStream.send<undefined, State>(name, PkgType.ASK_STATE, undefined)\r\n    if (data !== undefined) {\r\n      logger.info('updating the state got from host', data)\r\n      this.setState(data)\r\n    }\r\n    logger.info('inited as member')\r\n  }\r\n\r\n  /**\r\n   * Get the neighboring connections of this point\r\n   */\r\n  public getNeighbor (): string[] | undefined {\r\n    if (this.peer === undefined) {\r\n      return undefined\r\n    }\r\n    return Object.keys(this.dataStream.getConnections())\r\n  }\r\n\r\n  public async send<T, U = unknown> (id: string | DataConnection, pkgType: PkgType, data: T): Promise<SendResponse<U>> {\r\n    return await this.dataStream.send(id, pkgType, data)\r\n  }\r\n\r\n  public async broadcast<T, U = unknown> (pkgType: PkgType, data: T): Promise<Array<SendResponse<U>>> {\r\n    return await this.dataStream.broadcast(pkgType, data)\r\n  }\r\n\r\n  public async dispatch (action: Action): Promise<void> {\r\n    action.peerId = action.peerId ?? this.myId\r\n    if (this.myId !== undefined && this.myId !== null) {\r\n      logger.info('dispatching action', action)\r\n      await this.networkStrategy?.dispatch(action)\r\n      logger.info('dispatched action', action)\r\n    } else {\r\n      logger.error('not connected')\r\n    }\r\n  }\r\n\r\n  private setUpConnection (conn: DataConnection): void {\r\n    conn.on('open', () => {\r\n      logger.info('opened connection with', conn.peer)\r\n      this.dataStream.registerConnection(conn)\r\n    })\r\n    conn.on('close', () => {\r\n      logger.info('closed connection with', conn.peer)\r\n      this.dataStream.unregisterConnection(conn)\r\n    })\r\n    conn.on('data', (pkg: Pkg<State, Action>) => this.dataHandler(pkg, conn))\r\n    this.networkStrategy?.setUpConnection(conn)\r\n  }\r\n\r\n  /**\r\n   * handling different kinds of package\r\n   *\r\n   * @param pkg\r\n   * @param conn\r\n   * @private\r\n   */\r\n  private dataHandler (pkg: Pkg<State, Action>, conn: Peer.DataConnection): void {\r\n    const { pid, pkgType, data } = pkg\r\n    logger.debug('received pkg from', conn.peer, pkg)\r\n    switch (pkgType) {\r\n      case PkgType.DISPATCH:\r\n        // ack with new state's checksum\r\n        // nack with error message\r\n        this.networkStrategy?.handleDispatch(this.getState(), data)\r\n          .then(newState => {\r\n            const cs: string = checksum(JSON.stringify(newState))\r\n            this.dataStream.sendACK(conn, pid, cs)\r\n          })\r\n          .catch((error: Error) => {\r\n            this.dataStream.sendNACK(conn, pid, error.message)\r\n          })\r\n        break\r\n      case PkgType.ACK:\r\n        this.dataStream.receiveACK(pid, data)\r\n        break\r\n      case PkgType.NACK:\r\n        this.dataStream.receiveNACK(pid, data)\r\n        break\r\n      case PkgType.PROMOTE:\r\n        // promote need to provide checksum, only promote when checksum same as that of staging state\r\n        this.networkStrategy?.handlePromote(data)\r\n          .then(() => this.dataStream.sendACK(conn, pid, data))\r\n          .catch((error: Error) => this.dataStream.sendNACK(conn, pid, error.message))\r\n        break\r\n      case PkgType.CANCEL:\r\n        // cancel need to provide checksum, only cancel when checksum same as that of staging state\r\n        this.networkStrategy?.handleCancel(data)\r\n          .then(() => this.dataStream.sendACK(conn, pid, data))\r\n          .catch((error: Error) => this.dataStream.sendNACK(conn, pid, error.message))\r\n        break\r\n      case PkgType.SET_STATE:\r\n        // ignore whatever staging state, just set state and cancel the staging state\r\n        this.setState(data)\r\n        this.networkStrategy?.forceCancel()\r\n        break\r\n      case PkgType.ASK_STATE:\r\n        this.dataStream.sendACK(conn, pid, this.state)\r\n        break\r\n      case PkgType.KICK:\r\n        if (data === this.myId) {\r\n          logger.info('you got kicked out of network')\r\n          this.leave().catch(logger.error)\r\n        } else {\r\n          this.send(data, pkgType, data).catch(logger.error)\r\n        }\r\n    }\r\n  }\r\n}\r\n","import { logger, NetworkReducer, useNetwork } from 'smnet'\r\nimport { withGenericGameReducer } from './withGenericGameReducer'\r\nimport { GenericGameState, PlayerType } from './GenericGameState'\r\nimport { GameActionTypes, GenericGameAction } from './GenericGameAction'\r\nimport { ReactNode, useEffect, useMemo, useState } from 'react'\r\n\r\nexport interface GameContextInterface<State, Action> {\r\n  connect: (name: string, room: string) => Promise<void>\r\n  leave: () => Promise<void>\r\n  gameAppState: GameAppState\r\n  state: State\r\n  room?: string\r\n  isAdmin: boolean\r\n  myId?: string\r\n  kick: (id: string) => Promise<void>\r\n  ready: () => Promise<void>\r\n  start: () => Promise<void>\r\n  addLocal: (name: string) => Promise<void>\r\n  addAi: (name: string) => Promise<void>\r\n  dispatch: (action: Action) => Promise<void>\r\n  playerType: (nameOrId: string | number) => PlayerType\r\n  myPlayerId: number\r\n  myLocals: string[] // array of names\r\n  myAis: string[] // array of names\r\n  getPeerId: (playerId: number) => string\r\n  dispatchAs: (playerId: number, action: Action) => Promise<void>\r\n}\r\n\r\nexport enum GameAppState {\r\n  HOME,\r\n  ROOM,\r\n  GAME\r\n}\r\n\r\nexport interface GameNetworkProps<State extends GenericGameState, Action extends GenericGameAction> {\r\n  children: ReactNode\r\n  reducer: NetworkReducer<State, Action>\r\n  initialState: State\r\n}\r\n\r\nexport const useGameNetwork = <State extends GenericGameState, Action extends GenericGameAction> (reducer: NetworkReducer<State, Action>, initialState: State): GameContextInterface<State, Action> => {\r\n  const [gameAppState, setGameAppState] = useState(GameAppState.HOME)\r\n  const network = useNetwork(withGenericGameReducer(reducer), initialState)\r\n  const state = network.state as State\r\n  const myId = network.myId\r\n  const myPlayerId = useMemo(() => {\r\n    try {\r\n      return state.nameDict[state.members[myId as string]]\r\n    } catch (e) {\r\n      return -1\r\n    }\r\n  }, [myId, state])\r\n  const myLocals = useMemo(() => {\r\n    try {\r\n      return Object.keys(state.localPlayers).filter(name => state.localPlayers[name] === myId).map(peerId => state.members[peerId])\r\n    } catch (e) {\r\n      return []\r\n    }\r\n  }, [myId, state])\r\n  const myAis = useMemo(() => {\r\n    try {\r\n      return Object.keys(state.aiPlayers).filter(name => state.aiPlayers[name] === myId).map(peerId => state.members[peerId])\r\n    } catch (e) {\r\n      return []\r\n    }\r\n  }, [myId, state])\r\n\r\n  const getPeerId = (playerId: number): string => {\r\n    return Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[playerId])[0]\r\n  }\r\n\r\n  const dispatchAs = async (playerId: number, action: Action): Promise<void> => {\r\n    await network.dispatch({ ...action, peerId: getPeerId(playerId) })\r\n  }\r\n\r\n  const playerType = (nameOrId: string | number): PlayerType => {\r\n    const name: string = typeof nameOrId === 'string' ? nameOrId : network.state.players[nameOrId]\r\n    const peerId: string | undefined = Object.entries(network.state.members).find(([_peerId, n]) => name === n)?.[0]\r\n    if (peerId === undefined) {\r\n      return PlayerType.NORMAL\r\n    }\r\n    if (peerId in network.state.aiPlayers) {\r\n      return PlayerType.AI\r\n    } else if (peerId in network.state.localPlayers) {\r\n      return PlayerType.LOCAL\r\n    } else {\r\n      return PlayerType.NORMAL\r\n    }\r\n  }\r\n  const rename = async (name: string): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.RENAME,\r\n      payload: name\r\n    })\r\n  }\r\n  const ready = async (): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.READY\r\n    })\r\n  }\r\n  const start = async (): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.START\r\n    })\r\n  }\r\n  const addLocal = async (name: string): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.ADD_LOCAL,\r\n      payload: name\r\n    })\r\n  }\r\n  const addAi = async (name: string): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.ADD_AI,\r\n      payload: name\r\n    })\r\n  }\r\n  const connect = async (name: string, room: string): Promise<void> => {\r\n    try {\r\n      logger.info('connecting', room)\r\n      await network.join(room)\r\n      logger.info('entering with name', name)\r\n      await rename(name)\r\n      logger.info('connected', room)\r\n    } catch (e) {\r\n      logger.error(e)\r\n      await leave()\r\n      throw e\r\n    }\r\n  }\r\n  const leave = async (): Promise<void> => {\r\n    logger.info('leaving')\r\n    await network.leave()\r\n  }\r\n  const kick = async (peerId: string): Promise<void> => {\r\n    logger.info('leaving')\r\n    if (peerId in network.state.aiPlayers || peerId in network.state.localPlayers) {\r\n      await network.dispatch({\r\n        type: GameActionTypes.REMOVE_LOCAL_AI,\r\n        payload: peerId\r\n      })\r\n    } else {\r\n      await network.kick(peerId)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (network.state.started && network.networkName !== undefined) {\r\n      setGameAppState(GameAppState.GAME)\r\n    } else if (network.networkName !== undefined) {\r\n      setGameAppState(GameAppState.ROOM)\r\n    } else {\r\n      setGameAppState(GameAppState.HOME)\r\n    }\r\n  }, [network.state, network.networkName])\r\n  return {\r\n    connect,\r\n    gameAppState,\r\n    state,\r\n    room: network.networkName,\r\n    leave,\r\n    isAdmin: network.isAdmin,\r\n    myId,\r\n    kick,\r\n    ready,\r\n    start,\r\n    dispatch: network.dispatch,\r\n    addLocal,\r\n    addAi,\r\n    playerType,\r\n    myPlayerId,\r\n    myLocals,\r\n    myAis,\r\n    getPeerId,\r\n    dispatchAs\r\n  }\r\n}\r\n","import { NetworkReducer } from 'smnet'\r\nimport { GenericGameState } from './GenericGameState'\r\nimport { GameActionTypes, GenericGameAction } from './GenericGameAction'\r\nimport { v4 } from 'uuid'\r\n\r\ntype StateMapper = (prevState: GenericGameState) => GenericGameState\r\n\r\nexport const compose: <T>(...func: Array<(t: T) => T>) => ((t: T) => T) = (...funcs) => t => {\r\n  return funcs.reverse().reduce((p, func) => func(p), t)\r\n}\r\n\r\nexport const shuffle = <T> (a: T[]): T[] => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]]\r\n  }\r\n  return a\r\n}\r\n\r\nconst withMemberJoin: (peerId: string) => StateMapper = peerId => (prevState) => {\r\n  if (peerId in prevState.members) {\r\n    throw new Error(`peerId ${peerId} already joined this room`)\r\n  }\r\n  if ((prevState.maxPlayer > 0 && Object.values(prevState.members).length >= prevState.maxPlayer) || prevState.started) {\r\n    prevState.spectators[peerId] = true\r\n  }\r\n  return { ...prevState, members: { ...prevState.members, [peerId]: '' } }\r\n}\r\n\r\nconst withRename: (peerId: string, newName: string) => StateMapper = (peerId, newName) => (prevState) => {\r\n  if (Object.values(prevState.members).includes(newName)) {\r\n    throw new Error(`there is already someone named ${newName}`)\r\n  }\r\n  if (prevState.started && Object.keys(prevState.nameDict).includes(newName)) {\r\n    const { [peerId]: _, ...spectators } = prevState.spectators\r\n    prevState.spectators = spectators\r\n  }\r\n  return { ...prevState, members: { ...prevState.members, [peerId]: newName } }\r\n}\r\n\r\nconst withUpdateLocalAndAi: (oldMasterId: string, newMasterId: string | undefined) => StateMapper = (oldMasterPeerId, newMasterId) => prevState => {\r\n  const localPlayers: Record<string, string> = {}\r\n  const aiPlayers: Record<string, string> = {}\r\n  Object.entries(prevState.localPlayers).forEach(([fakePeerId, masterId]) => {\r\n    if (masterId !== oldMasterPeerId) {\r\n      localPlayers[fakePeerId] = masterId\r\n    } else if (newMasterId !== undefined) {\r\n      localPlayers[fakePeerId] = newMasterId\r\n    }\r\n  })\r\n  Object.entries(prevState.aiPlayers).forEach(([fakePeerId, masterId]) => {\r\n    if (masterId !== oldMasterPeerId) {\r\n      aiPlayers[fakePeerId] = masterId\r\n    } else if (newMasterId !== undefined) {\r\n      aiPlayers[fakePeerId] = newMasterId\r\n    }\r\n  })\r\n  return { ...prevState, localPlayers, aiPlayers }\r\n}\r\n\r\nconst withRemovePlayer: (peerId: string) => StateMapper = (peerId) => prevState => {\r\n  const { [peerId]: _1, ...members } = prevState.members\r\n  const { [peerId]: _2, ...localPlayers } = prevState.localPlayers\r\n  const { [peerId]: _3, ...aiPlayers } = prevState.aiPlayers\r\n  return { ...prevState, members, localPlayers, aiPlayers }\r\n}\r\n\r\nconst withToggleReady: (peerId: string) => StateMapper = (peerId) => prevState => {\r\n  if (prevState.ready[peerId]) {\r\n    const { [peerId]: _, ...ready } = prevState.ready\r\n    return { ...prevState, ready }\r\n  } else {\r\n    return { ...prevState, ready: { ...prevState.ready, [peerId]: true } }\r\n  }\r\n}\r\n\r\nconst withShuffleId: StateMapper = (prevState) => {\r\n  const players = shuffle(Object.entries(prevState.members).filter(([peerId]) => !prevState.spectators[peerId]).map(a => a[1]))\r\n  if (players.length > prevState.maxPlayer) {\r\n    throw new Error(`Too much players, max: ${prevState.maxPlayer}, got: ${players.length}`)\r\n  }\r\n  if (players.length < prevState.minPlayer) {\r\n    throw new Error(`Not enough players, min: ${prevState.minPlayer}, got: ${players.length}`)\r\n  }\r\n  const nameDict: Record<string, number> = {}\r\n  players.forEach((name, id) => {\r\n    nameDict[name] = id\r\n  })\r\n  return { ...prevState, nameDict, players }\r\n}\r\n\r\nconst withGameStart: (networkName: string) => StateMapper = (networkName) => prevState => {\r\n  if (prevState.started) {\r\n    throw new Error('Started already')\r\n  }\r\n  const who = Object.keys(prevState.members)\r\n    .filter(id => id !== networkName)\r\n    .filter(id => !prevState.spectators[id])\r\n    .filter(id => prevState.localPlayers[id] === undefined)\r\n    .filter(id => prevState.aiPlayers[id] === undefined)\r\n    .filter((id) => id !== undefined && !(prevState.ready[id] ?? false))\r\n  if (who.length === 0) {\r\n    return withShuffleId({ ...prevState, started: true })\r\n  } else {\r\n    throw new Error(`${who.map(id => prevState.members[id]).join(',')} not ready yet`)\r\n  }\r\n}\r\n\r\nconst withAddAiPlayer: (name: string, masterPeerId: string) => StateMapper = (name, masterPeerId) => prevState => {\r\n  const fakePeerId = `ai-${name}-${v4()}`\r\n  const nextState = compose(\r\n    withRename(fakePeerId, name),\r\n    withMemberJoin(fakePeerId)\r\n  )(prevState)\r\n  return { ...nextState, aiPlayers: { ...nextState.aiPlayers, [fakePeerId]: masterPeerId } }\r\n}\r\n\r\nconst withAddLocalPlayer: (name: string, masterPeerId: string) => StateMapper = (name, masterPeerId) => prevState => {\r\n  const fakePeerId = `local-${name}-${v4()}`\r\n  const nextState = compose(\r\n    withRename(fakePeerId, name),\r\n    withMemberJoin(fakePeerId)\r\n  )(prevState)\r\n  return { ...nextState, localPlayers: { ...nextState.localPlayers, [fakePeerId]: masterPeerId } }\r\n}\r\n\r\nexport const generalGameReducer: NetworkReducer<GenericGameState, GenericGameAction> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('expect peerId in action')\r\n  }\r\n  const networkName = prevState.networkName\r\n  if (networkName === undefined) {\r\n    throw new Error('expect networkName in prevState')\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.MEMBER_JOIN:\r\n      return withMemberJoin(peerId)(prevState)\r\n    case GameActionTypes.RENAME:\r\n      return withRename(peerId, action.payload)(prevState)\r\n    case GameActionTypes.MEMBER_LEFT:\r\n      return compose(\r\n        withUpdateLocalAndAi(action.payload, networkName),\r\n        withRemovePlayer(action.payload)\r\n      )(prevState)\r\n    case GameActionTypes.HOST_LEFT:\r\n      return compose(\r\n        withUpdateLocalAndAi(action.payload, networkName),\r\n        withRename(networkName, prevState.members[action.payload]),\r\n        withRemovePlayer(action.payload)\r\n      )(prevState)\r\n    case GameActionTypes.READY:\r\n      return withToggleReady(peerId)(prevState)\r\n    case GameActionTypes.START:\r\n      return withGameStart(networkName)(prevState)\r\n    case GameActionTypes.ADD_AI:\r\n      return withAddAiPlayer(action.payload, peerId)(prevState)\r\n    case GameActionTypes.ADD_LOCAL:\r\n      return withAddLocalPlayer(action.payload, peerId)(prevState)\r\n    case GameActionTypes.REMOVE_LOCAL_AI:\r\n      return withRemovePlayer(action.payload)(prevState)\r\n    default:\r\n      return prevState\r\n  }\r\n}\r\n\r\nexport const withGenericGameReducer = <State extends GenericGameState, Action extends GenericGameAction> (reducer: NetworkReducer<State, Action>): NetworkReducer<GenericGameState, GenericGameAction> => {\r\n  return (prevState, action) => {\r\n    return reducer(generalGameReducer(prevState, action) as State, action as Action)\r\n  }\r\n}\r\n","import { GameActionTypes, GenericBoardGameAction } from 'gamenet'\r\nimport { Card } from './types'\r\n\r\nexport enum Poker99ActionType {\r\n  PLAY_CARD,\r\n  LOCAL_MOVE,\r\n  END,\r\n}\r\n\r\nexport interface PlayCardPayload {\r\n  card: Card\r\n  increase?: boolean\r\n  target?: number\r\n}\r\n\r\nexport type Poker99Action = ({\r\n  type: Poker99ActionType.PLAY_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: Poker99ActionType.END\r\n} | {\r\n  type: GameActionTypes\r\n  payload: never\r\n}) & GenericBoardGameAction\r\n","import { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload } from './Poker99Action'\r\n\r\nexport enum Suit {\r\n  SPADE,\r\n  HEART,\r\n  CLUB,\r\n  DIAMOND\r\n}\r\n\r\nexport interface Card {\r\n  suit: Suit\r\n  number: number\r\n}\r\n\r\nexport type Deck = Card[]\r\n\r\nexport type StateMapper = (prevState: Poker99State) => Poker99State\r\n\r\nexport type IsCard = (card: Card) => boolean\r\n\r\nexport type PlayCard = (payload: PlayCardPayload, playerId: number) => StateMapper\r\n","import { useEffect, useMemo, useState } from 'react'\r\nimport { NetworkAction, NetworkReducer, NetworkState } from './types'\r\nimport { Network } from './Network'\r\nimport { StateManager } from './StateManager'\r\nimport { PeerFactory } from './PeerFactory'\r\nimport { logger } from './Logger'\r\n\r\nexport interface UseNetworkReturn<State extends NetworkState, Action extends NetworkAction> {\r\n  state: State\r\n  connected: boolean\r\n  networkName: string | undefined\r\n  join: (networkName: string, peerFactory?: PeerFactory) => Promise<void>\r\n  leave: () => Promise<void>\r\n  dispatch: (action: Action) => Promise<void>\r\n  isAdmin: boolean\r\n  myId?: string\r\n  kick: (id: string) => Promise<void>\r\n}\r\n\r\nexport function useNetwork<State extends NetworkState = NetworkState, Action extends NetworkAction = NetworkAction> (reducer: NetworkReducer<State, Action>, initialState: State): UseNetworkReturn<State, Action> {\r\n  const [state, setState] = useState(initialState)\r\n  const network = useMemo(() => new Network(reducer, StateManager.make(initialState, setState, 10)), [])\r\n  useEffect(() => {\r\n    if (process.env.REACT_APP_DISABLE_SMNET_WINDOW_VAR === undefined) {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/ban-ts-comment\r\n      // @ts-expect-error\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      window.stateHistory = network.getHistory; window.smnetLog = logger; window.network = network\r\n    }\r\n    return () => {\r\n      network.leave()\r\n        .catch(logger.error)\r\n    }\r\n  }, [network])\r\n  return Object.freeze({\r\n    join: network.join.bind(network),\r\n    leave: network.leave.bind(network),\r\n    dispatch: network.dispatch.bind(network),\r\n    state,\r\n    connected: network.connected,\r\n    networkName: network.getNetworkName(),\r\n    isAdmin: network.isAdmin,\r\n    myId: network.myId,\r\n    kick: network.kick\r\n  })\r\n}\r\n","import { GenericGameState } from 'gamenet'\r\nimport { Deck } from './types'\r\n\r\nexport class Poker99State extends GenericGameState {\r\n  maxPlayer = 4\r\n  minPlayer = 4\r\n  turn = 0\r\n  direction = 1\r\n  points = 0\r\n  dead: Record<number, true> = {}\r\n  drawDeck: Deck = []\r\n  trashDeck: Deck = []\r\n  playerDeck: Deck[] = []\r\n  winner?: number\r\n  logs: string[] = []\r\n}\r\n","export const cardPoints: Record<number, number> = {\r\n  1: 1, // spade set 1\r\n  2: 2,\r\n  3: 3,\r\n  4: 0, // reverse\r\n  5: 0, // target\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10, // +- 10\r\n  11: 0, //  skip\r\n  12: 20, // +=20\r\n  13: 99 //   set to 99\r\n}\r\n\r\nexport const maxCard = 5\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isBombCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 13\r\n}\r\n\r\nexport const bomb: PlayCard = ({ card }) => state => {\r\n  if (isBombCard(card)) {\r\n    state.points = 99\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard, Suit } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isNormalCard: IsCard = (card: Card): boolean => {\r\n  if (card.suit === Suit.SPADE && card.number === 1) {\r\n    return false\r\n  } else {\r\n    return [1, 2, 3, 6, 7, 8, 9].includes(card.number)\r\n  }\r\n}\r\n\r\nexport const normal: PlayCard = ({ card }) => state => {\r\n  if (isNormalCard(card)) {\r\n    const points = state.points + cardPoints[card.number]\r\n    if (points > 99) {\r\n      throw new Error('playing this card will exceed 99')\r\n    }\r\n    return withEndTurn(withIncrementTurn({ ...state, points }))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isPmCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 10 || card.number === 12\r\n}\r\n\r\nexport const pm: PlayCard = ({ card, increase }) => state => {\r\n  if (isPmCard(card)) {\r\n    if (increase === undefined) {\r\n      throw new Error('increase is required in payload')\r\n    }\r\n    const points = state.points + (increase ? cardPoints[card.number] : -cardPoints[card.number])\r\n    if (points > 99) {\r\n      throw new Error('playing this card will exceed 99')\r\n    }\r\n    return withEndTurn(withIncrementTurn({ ...state, points }))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isReverseCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 4\r\n}\r\n\r\nexport const reverse: PlayCard = ({ card }) => state => {\r\n  if (isReverseCard(card)) {\r\n    state.direction *= -1\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isSkipCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 11\r\n}\r\n\r\nexport const skip: PlayCard = ({ card }) => state => {\r\n  if (isSkipCard(card)) {\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn } from '../Poker99Reducer'\r\n\r\nexport const isTargetCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 5\r\n}\r\n\r\nexport const target: PlayCard = ({ card, target }, playerId) => state => {\r\n  if (isTargetCard(card)) {\r\n    if (target === undefined) {\r\n      throw new Error('target is required in payload')\r\n    }\r\n    if (target === playerId) {\r\n      throw new Error('cannot target myself')\r\n    }\r\n    state.turn = target\r\n    return withEndTurn(state)\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard, Suit } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isSpade1Card: IsCard = (card: Card): boolean => {\r\n  return card.number === 1 && card.suit === Suit.SPADE\r\n}\r\n\r\nexport const spade1: PlayCard = ({ card }) => state => {\r\n  if (isSpade1Card(card)) {\r\n    state.points = 1\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { NetworkReducer } from 'smnet'\r\nimport { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload, Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { Deck, PlayCard, StateMapper, Suit } from './types'\r\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\r\nimport { maxCard } from './constants'\r\nimport { minPossible } from './utils'\r\nimport cloneDeep from 'clone-deep'\r\nimport { bomb } from './cards/bomb'\r\nimport { normal } from './cards/normal'\r\nimport { pm } from './cards/pm'\r\nimport { reverse } from './cards/reverse'\r\nimport { skip } from './cards/skip'\r\nimport { target } from './cards/target'\r\nimport { spade1 } from './cards/spade1'\r\n\r\nconst getFullDeck = (): Deck => {\r\n  const deck: Deck = []\r\n  for (let suit = 0; suit < 4; suit++) {\r\n    for (let number = 1; number <= 13; number++) {\r\n      deck.push({ suit, number })\r\n    }\r\n  }\r\n  return deck\r\n}\r\n\r\nconst withDrawCard: (playerId: number) => StateMapper = playerId => prevState => {\r\n  if (prevState.playerDeck[playerId].length >= maxCard) {\r\n    throw new Error(`cannot draw, ${prevState.players[playerId]} already has ${maxCard} cards`)\r\n  }\r\n  const card = prevState.drawDeck.shift()\r\n  if (card === undefined) {\r\n    return withDrawCard(playerId)({ ...prevState, drawDeck: shuffle(prevState.trashDeck), trashDeck: [] })\r\n  } else {\r\n    prevState.playerDeck[playerId].push(card)\r\n    return { ...prevState }\r\n  }\r\n}\r\n\r\nconst withInitGame: StateMapper = (prevState: Poker99State) => {\r\n  prevState = {\r\n    ...prevState,\r\n    drawDeck: [],\r\n    trashDeck: [],\r\n    playerDeck: [],\r\n    points: 0,\r\n    direction: 1,\r\n    turn: 0,\r\n    dead: {},\r\n    logs: ['game started'],\r\n    winner: undefined\r\n  }\r\n  prevState.drawDeck = shuffle(getFullDeck())\r\n  for (let id = 0; id < prevState.players.length; id++) {\r\n    prevState.playerDeck[id] = []\r\n    for (let k = 0; k < maxCard; k++) {\r\n      prevState = withDrawCard(id)(prevState)\r\n    }\r\n  }\r\n  return { ...prevState }\r\n}\r\n\r\nconst withDiscardCard: PlayCard = ({ card }, playerId) => state => {\r\n  state.trashDeck.push(card)\r\n  state.playerDeck[playerId] = state.playerDeck[playerId].filter(({ suit, number }) => !(suit === card.suit && number === card.number))\r\n  return state\r\n}\r\n\r\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => StateMapper = (playerId, payload) => prevState => {\r\n  const { card } = payload\r\n  const cardStr = `${Suit[card.suit]}${card.number}`\r\n  if (prevState.playerDeck[playerId].find(({ suit, number }) => suit === card.suit && number === card.number) === undefined) {\r\n    throw new Error(`${prevState.players[playerId]} doesnt own card ${cardStr}`)\r\n  }\r\n  if (prevState.turn !== playerId) {\r\n    throw new Error('not your turn')\r\n  }\r\n  return compose(\r\n    withDrawCard(playerId),\r\n    ...[withDiscardCard, bomb, normal, pm, reverse, skip, target, spade1].map(playCard => playCard(payload, playerId))\r\n  )(prevState)\r\n}\r\n\r\nexport const withIncrementTurn: StateMapper = prevState => {\r\n  const nextPlayerId = (prevState.turn + prevState.maxPlayer + prevState.direction) % prevState.maxPlayer\r\n  return { ...prevState, turn: nextPlayerId }\r\n}\r\n\r\nexport const withEndTurn: StateMapper = prevState => {\r\n  if (!prevState.dead[prevState.turn] && minPossible(prevState.points, prevState.playerDeck[prevState.turn])[0] > 99) {\r\n    prevState.logs.push(`${prevState.players[prevState.turn]} die, his card: ${prevState.playerDeck[prevState.turn].map(card => (\r\n      `${Suit[card.suit]}${card.number}`)\r\n    ).join(',')}`)\r\n    prevState.dead[prevState.turn] = true\r\n  }\r\n  if (Object.keys(prevState.dead).length === prevState.players.length - 1 && prevState.started) {\r\n    prevState.winner = [0, 1, 2, 3].filter(k => !prevState.dead[k])[0]\r\n  }\r\n  if (prevState.dead[prevState.turn]) {\r\n    return withEndTurn(withIncrementTurn({ ...prevState, turn: prevState.turn }))\r\n  } else {\r\n    return { ...prevState, turn: prevState.turn }\r\n  }\r\n}\r\n\r\nexport const Poker99Reducer: NetworkReducer<Poker99State, Poker99Action> = (prevState, action) => {\r\n  console.log('poker99 reducer')\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('Expect peerId in action')\r\n  }\r\n  const playerId = (): number => {\r\n    const id = prevState.nameDict[prevState.members[peerId]]\r\n    if (id === undefined) {\r\n      throw new Error('game not started')\r\n    }\r\n    return id\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.START:\r\n      return withInitGame(prevState)\r\n    case Poker99ActionType.PLAY_CARD:\r\n      return withPlayCard(playerId(), action.payload)(cloneDeep(prevState))\r\n    case Poker99ActionType.END:\r\n      return { ...prevState, started: false }\r\n  }\r\n  return prevState\r\n}\r\n","import { Card, Suit } from './types'\r\nimport { cardPoints } from './constants'\r\n\r\nexport const minPossible = (current: number, cards: Card[]): number[] => {\r\n  let min = Infinity\r\n  let index = 0\r\n  cards.forEach(({ suit, number }, k) => {\r\n    let next = 0\r\n    if (suit === Suit.SPADE && number === 1) {\r\n      return [0, k]\r\n    } else if (number === 10) {\r\n      next = current - 10\r\n    } else if (number === 12) {\r\n      next = current - 20\r\n    } else if (number === 13) {\r\n      next = 99\r\n    } else {\r\n      next = current + cardPoints[number]\r\n    }\r\n    if (next < min) {\r\n      min = next\r\n      index = k\r\n    }\r\n  })\r\n  return [min, index]\r\n}\r\n","import { Poker99State } from './Poker99State'\r\nimport { Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { Card } from './types'\r\nimport { cardPoints } from './constants'\r\nimport { shuffle } from 'gamenet'\r\nimport { isNormalCard } from './cards/normal'\r\nimport { isPmCard } from './cards/pm'\r\n\r\nconst isSkippingCard = (card: Card): boolean => {\r\n  return [4, 5, 11, 13].includes(card.number)\r\n}\r\n\r\nexport const aiAction = (state: Poker99State, turn: number): Poker99Action => {\r\n  const cards = state.playerDeck[turn]\r\n  const points = state.points\r\n  const normalCards = cards.filter(isNormalCard).sort((a, b) => cardPoints[b.number] - cardPoints[a.number])\r\n  console.log('normal cards', normalCards, 'points', points)\r\n  const card13 = cards.find(c => c.number === 13)\r\n  if (card13 !== undefined) {\r\n    if (points !== 99 && normalCards.length < 3) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card: card13\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const card of normalCards) {\r\n    console.log('should play normal?', card, points + cardPoints[card.number] <= 99)\r\n    if (points + cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card\r\n        }\r\n      })\r\n    }\r\n  }\r\n  const pmCards = cards.filter(isPmCard)\r\n  for (const card of pmCards.sort((a, b) => b.number - a.number)) {\r\n    if (points + cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: true\r\n        }\r\n      })\r\n    }\r\n  }\r\n  {\r\n    const card = cards.find(isSkippingCard)\r\n    if (card !== undefined) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          target: state.nameDict[shuffle(state.players.filter((name, id) => !state.dead[id] && id !== turn))[0]]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (const card of pmCards.sort((a, b) => a.number - b.number)) {\r\n    if (points - cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n  for (const card of cards) {\r\n    if (points - cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n  throw new Error('reached an edge case')\r\n}\r\n","import React, { createContext, FunctionComponent, useContext } from 'react'\r\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\r\nimport { Poker99State } from './poker99/Poker99State'\r\nimport { Poker99Reducer } from './poker99/Poker99Reducer'\r\nimport { Poker99Action } from './poker99/Poker99Action'\r\nimport { aiAction } from './poker99/aiAction'\r\n\r\nconst Poker99Context = createContext<BoardGameContextInterface<Poker99State, Poker99Action> | null>(null)\r\n\r\nexport const withPoker99Network = (Component: FunctionComponent): FunctionComponent => {\r\n  const WithGameNetwork: FunctionComponent = props => {\r\n    const network = useBoardGameNetwork(Poker99Reducer, new Poker99State(), aiAction)\r\n    return (\r\n      <Poker99Context.Provider value={network}>\r\n        <Component {...props} />\r\n      </Poker99Context.Provider>\r\n    )\r\n  }\r\n  WithGameNetwork.displayName = 'WithGameNetwork'\r\n  return WithGameNetwork\r\n}\r\n\r\nexport const usePoker99 = (): BoardGameContextInterface<Poker99State, Poker99Action> => {\r\n  const network: BoardGameContextInterface<Poker99State, Poker99Action> | null = useContext(Poker99Context)\r\n  if (network === null) {\r\n    throw new Error('please wrap it using withPoker99Network before calling this hook')\r\n  }\r\n  return network\r\n}\r\n","import { adjectives, animals, colors, uniqueNamesGenerator } from 'unique-names-generator'\r\n\r\nexport const getRandomName = (): string => {\r\n  return uniqueNamesGenerator({\r\n    dictionaries: [adjectives, colors, animals],\r\n    style: 'capital',\r\n    separator: ' '\r\n  })\r\n}\r\n","import React, { FunctionComponent, useState } from 'react'\r\nimport { usePoker99 } from './withPoker99Network'\r\nimport { Button, Grid, Paper, TextField, Typography } from '@material-ui/core'\r\nimport { getRandomName } from './getRandomName'\r\n\r\nexport const Home: FunctionComponent = () => {\r\n  const { connect } = usePoker99()\r\n  const [name, setName] = useState(getRandomName())\r\n  const [room, setRoom] = useState('')\r\n  const [error, setError] = useState('')\r\n  const join = async (): Promise<void> => await connect(name, room).catch((error: Error) => setError(error.message))\r\n  return (\r\n    <Paper elevation={3} style={{ padding: '32px 64px' }}>\r\n      <Grid container justify='flex-end' direction='column' spacing={3}>\r\n        <Grid item>\r\n          <Typography variant=\"h5\">Welcome to Poker 99</Typography>\r\n        </Grid>\r\n        {error !== '' && <Grid item>{error}</Grid>}\r\n        <Grid item>\r\n          <TextField label='Your Name' value={name} onChange={({ target: { value } }) => setName(value)} fullWidth/>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField label='Room Code' value={room} onChange={({ target: { value } }) => setRoom(value)} fullWidth/>\r\n        </Grid>\r\n        <Grid item container justify='flex-end'>\r\n          <Button\r\n            color='primary'\r\n            variant='contained'\r\n            disabled={name === '' || room === ''}\r\n            onClick={join}>\r\n            join\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { SvgIcon } from '@material-ui/core'\r\n\r\nexport const RobotAdd: FunctionComponent = () => (\r\n  <SvgIcon>\r\n    <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\r\n      <path\r\n        d=\"M11,4c1,0,1.7,0.8,1.7,1.7c0,0.6-0.3,1.2-0.9,1.5v1.1h0.9c3.3,0,6.1,2.7,6.1,6.1l0,0h0.9c0.5,0,0.9,0.4,0.9,0.9v2.6\r\n  c0,0.5-0.4,0.9-0.9,0.9H19v0.9c0,1-0.8,1.7-1.7,1.7H5.1c-1,0-1.7-0.8-1.7-1.7v-0.9H2.5c-0.5,0-0.9-0.4-0.9-0.9v-2.6\r\n  c0-0.5,0.4-0.9,0.9-0.9h0.9c0-3.3,2.7-6.1,6.1-6.1h0.9V7.2C9.8,7,9.5,6.4,9.5,5.8C9.5,4.8,10.2,4,11.2,4 M7.3,13.5\r\n  c-1.2,0-2.2,1-2.2,2.2c0,1.2,1,2.2,2.2,2.2s2.2-1,2.2-2.2C9.5,14.5,8.5,13.5,7.3,13.5 M15.1,13.5c-1.2,0-2.2,1-2.2,2.2\r\n  c0,1.2,1,2.2,2.2,2.2s2.2-1,2.2-2.2C17.2,14.5,16.3,13.5,15.1,13.5z\"\r\n      />\r\n      <path d=\"M17.9,1.8v3h-3v2h3v3h2v-3h3v-2h-3v-3H17.9z\"/>\r\n    </svg>\r\n  </SvgIcon>\r\n)\r\n","import React, { FunctionComponent } from 'react'\r\nimport { SvgIcon } from '@material-ui/core'\r\n\r\nexport const PersonAdd: FunctionComponent = () => (\r\n  <SvgIcon>\r\n    <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\r\n      <path\r\n        d=\"M12,5.5c2.2,0,4,1.8,4,4s-1.8,4-4,4s-4-1.8-4-4S9.8,5.5,12,5.5 M12,7.5c-1.1,0-2,0.9-2,2s0.9,2,2,2s2-0.9,2-2\r\n            S13.1,7.5,12,7.5 M12,14.5c2.7,0,8,1.3,8,4v3H4v-3C4,15.8,9.3,14.5,12,14.5 M12,16.4c-3,0-6.1,1.5-6.1,2.1v1.1h12.2v-1.1\r\n            C18.1,17.9,15,16.4,12,16.4z\"\r\n      />\r\n      <path d=\"M17.9,1.8v3h-3v2h3v3h2v-3h3v-2h-3v-3H17.9z\"/>\r\n    </svg>\r\n  </SvgIcon>\r\n)\r\n","import React, { FunctionComponent, useState } from 'react'\r\nimport { PlayerType } from 'gamenet'\r\nimport { usePoker99 } from './withPoker99Network'\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  useTheme\r\n} from '@material-ui/core'\r\nimport { CancelOutlined, Person, PersonOutline, Visibility } from '@material-ui/icons'\r\nimport { AccountCheck, Crown, Robot } from 'mdi-material-ui'\r\nimport { RobotAdd } from './RobotAdd'\r\nimport { PersonAdd } from './PersonAdd'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport { getRandomName } from './getRandomName'\r\n\r\nexport const Room: FunctionComponent = () => {\r\n  const { room, state, leave, isAdmin, myId, kick, ready, start, addAi, addLocal, playerType } = usePoker99()\r\n  const [error, setError] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [creatingLocal, setCreatingLocal] = useState<boolean | undefined>(undefined)\r\n  const theme = useTheme()\r\n  const handleStartClick = async (): Promise<void> => {\r\n    await start().catch((e: Error) => setError(e.message))\r\n  }\r\n  const handleReadyClick = async (): Promise<void> => {\r\n    await ready().catch((e: Error) => setError(e.message))\r\n  }\r\n  const handleAddAiClick = async (): Promise<void> => {\r\n    await addAi(getRandomName()).catch((e: Error) => setError(e.message))\r\n  }\r\n  const handleCloseClick = (): void => {\r\n    setName('')\r\n    setCreatingLocal(undefined)\r\n  }\r\n  const createLocalOrAI = async (): Promise<void> => {\r\n    if (name !== '') {\r\n      if (creatingLocal === true) {\r\n        await addLocal(name).catch((e: Error) => setError(e.message))\r\n      } else if (creatingLocal === false) {\r\n        await addAi(name).catch((e: Error) => setError(e.message))\r\n      }\r\n    }\r\n    handleCloseClick()\r\n  }\r\n  const getIcon = (peerId: string, name: string): React.ReactNode => {\r\n    if (peerId in state.spectators) {\r\n      return <Grid item title='spectator'>\r\n        <Visibility/>\r\n      </Grid>\r\n    } else if (state.networkName === peerId) {\r\n      return <Grid item title='host'>\r\n        <Crown/>\r\n      </Grid>\r\n    } else if (playerType(name) === PlayerType.NORMAL) {\r\n      if(state.ready[peerId]) {\r\n        return <Grid item title='player ready'>\r\n          <AccountCheck/>\r\n        </Grid>\r\n      }else{\r\n        return <Grid item title='player not ready'>\r\n          <Person/>\r\n        </Grid>\r\n      }\r\n    } else if (playerType(name) === PlayerType.LOCAL) {\r\n      return <Grid item title='hot seat player'>\r\n        <PersonOutline/>\r\n      </Grid>\r\n    } else if (playerType(name) === PlayerType.AI) {\r\n      return <Grid item title='AI player'>\r\n        <Robot/>\r\n      </Grid>\r\n    }\r\n  }\r\n\r\n  const renderHintText = (peerId: string, name: string) => {\r\n    if (peerId === state.networkName) {\r\n      return `${name} is the host`\r\n    }else if (peerId in state.spectators) {\r\n      return `${name} is a spectator`\r\n    } else if (peerId in state.localPlayers) {\r\n      return `${name} is a local player of ${state.members[state.localPlayers[peerId]]}`\r\n    } else if (peerId in state.aiPlayers) {\r\n      return `${name} is an ai player of ${state.members[state.aiPlayers[peerId]]}`\r\n    } else {\r\n      if (state.ready[peerId]) {\r\n        return `${name} is not ready yet`\r\n      } else {\r\n        return `${name} is ready`\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper elevation={3} style={{ padding: '32px 64px', minWidth: '400px' }}>\r\n      <Grid container justify='flex-end' direction='column' spacing={3}>\r\n        <Grid item>\r\n          <Typography variant=\"h5\">Room: {room}</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid container justify='space-between' alignItems='flex-end'>\r\n            <Grid item>\r\n              <Typography variant=\"h6\">Players</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton size='medium' title='Add Local Hot Seat player' onClick={() => setCreatingLocal(true)}>\r\n                <PersonAdd/>\r\n              </IconButton>\r\n              <IconButton size='medium' title='Add AI Player' onClick={handleAddAiClick}>\r\n                <RobotAdd/>\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider/>\r\n          <List>\r\n            {Object.entries(state.members).map(([id, name]) => {\r\n              const color = (id === state.networkName || [PlayerType.LOCAL, PlayerType.AI].includes(playerType(name)))\r\n                ? theme.palette.primary.main\r\n                : state.ready[id] ? theme.palette.success.main : theme.palette.text.secondary\r\n              return (\r\n                <ListItem\r\n                  key={id}\r\n                  title={renderHintText(id, name)}\r\n                  style={{ color }}>\r\n                  <ListItemIcon>\r\n                    <span style={{ color }}>\r\n                      {getIcon(id, name)}\r\n                    </span>\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    {name}\r\n                  </ListItemText>\r\n                  {((isAdmin || [PlayerType.LOCAL, PlayerType.AI].includes(playerType(name))) && id !== myId && id !== state.networkName) &&\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => kick(id)} title='Kick'>\r\n                      <CancelOutlined color='error'/>\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>}\r\n                </ListItem>\r\n              )\r\n            })}\r\n          </List>\r\n        </Grid>\r\n        {error !== '' && <Alert severity='error'>{error}</Alert>}\r\n        <Grid item container justify='flex-end' spacing={1}>\r\n          <Grid item>\r\n            <Button variant='contained' color='secondary' onClick={leave}>leave</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            {isAdmin\r\n              ? <Button variant='contained' color='primary' onClick={handleStartClick}>start</Button>\r\n              : <Button variant='contained' color='primary' onClick={handleReadyClick}>{state.ready[myId ?? ''] ? 'unready' : 'ready'}</Button>}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Dialog open={creatingLocal !== undefined} onClose={handleCloseClick} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Name for new {creatingLocal === true ? 'local' : 'AI'} player</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Name\"\r\n            fullWidth\r\n            value={name}\r\n            onChange={({ target }) => setName(target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseClick} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createLocalOrAI} color=\"primary\">\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent, ReactNode, useState } from 'react'\r\nimport { usePoker99 } from './withPoker99Network'\r\nimport { Card, Suit } from './poker99/types'\r\nimport { Poker99Action, Poker99ActionType } from './poker99/Poker99Action'\r\n\r\nexport const Game: FunctionComponent = () => {\r\n  const {\r\n    state,\r\n    dispatch,\r\n    dispatchAs,\r\n    myPlayerId,\r\n    myLocals,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  } = usePoker99()\r\n  const [target, setTarget] = useState(0)\r\n  const [increment, setIncrement] = useState(true)\r\n  const d = state.direction === 1 ? '>' : '<'\r\n  const handleError = (e: Error): void => {\r\n    setError(e.message)\r\n  }\r\n  const clickCard = (card: Card) => async () => {\r\n    const action: Poker99Action = {\r\n      type: Poker99ActionType.PLAY_CARD,\r\n      payload: {\r\n        card,\r\n        increase: increment,\r\n        target\r\n      }\r\n    }\r\n    if (state.turn === myPlayerId) {\r\n      await dispatch(action).then(() => setError('')).catch(handleError)\r\n    } else if (myLocals.includes(state.players[state.turn])) {\r\n      await dispatchAs(state.turn, action).then(() => setError('')).catch(handleError)\r\n    }\r\n  }\r\n  const renderDeck = (playerId: number): ReactNode => state.playerDeck[playerId]?.map(card => (\r\n    <button key={card.number * 10 + card.suit} onClick={clickCard(card)}>\r\n      {Suit[card.suit]} {card.number}\r\n    </button>\r\n  ))\r\n  const renderLocalDeck = (): ReactNode => {\r\n    return hideDeck ? <button onClick={() => setHideDeck(false)}>show {state.players[renderedDeckId]}</button>\r\n      : renderDeck(renderedDeckId)\r\n  }\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: Poker99ActionType.END\r\n    }).catch(handleError)\r\n  }\r\n  return (\r\n    <div style={{ pointerEvents: 'all' }}>\r\n      <div>\r\n        <h3>{state.points}</h3>\r\n        <h6>{state.players[state.turn]}{'\\''}s turn</h6>\r\n        {error !== '' && <div style={{ color: 'red' }}>{error}</div>}\r\n        {state.winner !== undefined && state.winner !== null && <div>winner is {state.players[state.winner]}\r\n          <button onClick={again}>again</button>\r\n        </div>}\r\n        {state.players.map((name, id) => (\r\n          <span\r\n            key={name}\r\n            onClick={() => setTarget(id)}\r\n            style={{\r\n              fontWeight: state.turn === id ? 'bold' : 'normal',\r\n              textDecorationLine: state.dead[id] ? 'line-through' : 'none'\r\n            }}>\r\n          {name} {d}\r\n        </span>\r\n        ))}\r\n        <div>\r\n          {\r\n            myLocals.length === 0\r\n              ? renderDeck(myPlayerId)\r\n              : renderLocalDeck()\r\n          }\r\n        </div>\r\n        <div>\r\n          target: {target}\r\n        </div>\r\n        <button onClick={() => setIncrement(!increment)}>\r\n          {increment ? '+' : '-'}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { Home } from './Home'\r\nimport { Room } from './Room'\r\nimport { Game } from './Game'\r\nimport { usePoker99, withPoker99Network } from './withPoker99Network'\r\n\r\nconst transition = (time: number, props: string[], ease = 'ease'): { transition: string } => ({\r\n  transition: props.map(p => `${time}s ${p} ${ease}`).join(',')\r\n})\r\n\r\nexport const GameApp: FunctionComponent = withPoker99Network(() => {\r\n  const { gameAppState } = usePoker99()\r\n  // switch (gameAppState) {\r\n  //   case GameAppState.HOME:\r\n  //     return <Home />\r\n  //   case GameAppState.ROOM:\r\n  //     return <Room />\r\n  //   case GameAppState.GAME:\r\n  //     return <Game />\r\n  //   default:\r\n  //     throw new Error('unknown state')\r\n  // }\r\n  return (\r\n    <div style={{ width: '100vw', height: '100vh', overflow: 'hidden', position: 'relative' }}>\r\n      {/*<GameRenderer />*/}\r\n      <div\r\n        style={{\r\n          pointerEvents: 'none',\r\n          display: 'flex',\r\n          height: '100vh',\r\n          width: '100vw',\r\n          left: `${-(gameAppState - 2) * 100}%`,\r\n          position: 'absolute',\r\n          ...transition(0.3, ['left'], 'linear')\r\n        }}>\r\n        <Game />\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          width: '100vw',\r\n          height: '100vh',\r\n          left: `${-(gameAppState - 1) * 100}%`,\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          position: 'absolute',\r\n          ...transition(0.3, ['left'], 'linear')\r\n        }}>\r\n        <Room />\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          width: '100vw',\r\n          height: '100vh',\r\n          left: `${-gameAppState * 100}%`,\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          position: 'absolute',\r\n          ...transition(0.3, ['left'], 'linear')\r\n        }}>\r\n        <Home />\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n","import { NetworkReducer } from 'smnet'\r\nimport { GenericBoardGameState } from './GenericBoardGameState'\r\nimport { GenericBoardGameAction } from './GenericBoardGameAction'\r\nimport { GameContextInterface, GameNetworkProps, useGameNetwork } from '../Generic/useGameNetwork'\r\nimport { withGenericBoardGameReducer } from './withGenericBoardGameReducer'\r\nimport { useEffect, useRef, useState } from 'react'\r\n\r\nexport interface BoardGameContextInterface<State extends GenericBoardGameState, Action extends GenericBoardGameAction> extends GameContextInterface<State, Action> {\r\n  hideDeck: boolean\r\n  setHideDeck: (flag: boolean) => void\r\n  renderedDeckId: number\r\n  error: string\r\n  setError: (message: string) => void\r\n}\r\n\r\ntype AiAction<State extends GenericBoardGameState, Action extends GenericBoardGameAction> = (state: State, turn: number) => Action\r\n\r\nexport interface BoardGameNetworkProps<State extends GenericBoardGameState, Action extends GenericBoardGameAction> extends GameNetworkProps<State, Action> {\r\n  aiAction: AiAction<State, Action>\r\n}\r\n\r\nexport const useBoardGameNetwork = <State extends GenericBoardGameState, Action extends GenericBoardGameAction> (reducer: NetworkReducer<State, Action>, initialState: State, aiAction: AiAction<State, Action>): BoardGameContextInterface<State, Action> => {\r\n  const network = useGameNetwork(withGenericBoardGameReducer(reducer), initialState)\r\n  const { myLocals, myPlayerId, myAis, dispatchAs } = network\r\n  const state = network.state as State\r\n  const [error, setError] = useState('')\r\n  let [hideDeck, setHideDeck] = useState(myLocals.length > 0)\r\n  const [renderedDeckId, setRenderedDeckId] = useState(myPlayerId)\r\n  const prevTurn = useRef(-1)\r\n  if (state.turn !== prevTurn.current) {\r\n    if (myLocals.length > 0) {\r\n      hideDeck = true\r\n      setHideDeck(true)\r\n      setRenderedDeckId(state.turn)\r\n    }\r\n    prevTurn.current = state.turn\r\n  }\r\n  const handleError = (e: Error): void => {\r\n    setError(e.message)\r\n  }\r\n  useEffect(() => {\r\n    if (myAis.includes(state.players[state.turn]) && state.started && state.winner === undefined) {\r\n      const cb = (): void => {\r\n        const action = aiAction(state, state.turn)\r\n        // action.peerId = Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[state.turn])[0]\r\n        dispatchAs(state.turn, action).catch(handleError)\r\n      }\r\n      const n = window.setTimeout(cb, 500)\r\n      return () => {\r\n        window.clearTimeout(n)\r\n      }\r\n    }\r\n  }, [state])\r\n  return {\r\n    ...network,\r\n    state,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  }\r\n}\r\n","import { NetworkReducer } from 'smnet'\nimport { GenericBoardGameState } from './GenericBoardGameState'\nimport { GenericBoardGameAction } from './GenericBoardGameAction'\n\nexport const generalBoardGameReducer: NetworkReducer<GenericBoardGameState, GenericBoardGameAction> = (prevState) => {\n  return prevState\n}\n\nexport const withGenericBoardGameReducer = <State extends GenericBoardGameState, Action extends GenericBoardGameAction> (reducer: NetworkReducer<State, Action>): NetworkReducer<GenericBoardGameState, GenericBoardGameAction> => {\n  return (prevState, action) => {\n    return reducer(generalBoardGameReducer(prevState, action) as State, action as Action)\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport { GameApp } from './demo-gamenet/GameApp'\n\nReactDOM.render(\n  <GameApp/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}