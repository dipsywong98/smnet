{"version":3,"sources":["../../node_modules/peerjs/dist sync","reportWebVitals.ts","../../src/types.ts","../../src/Logger.ts","../../src/PeerFactory.ts","../../src/Errors.ts","../../src/NetworkStrategies/AbstractNetworkStrategy.ts","../../src/pause.ts","../../src/NetworkStrategies/StarHostStrategy.ts","../../src/NetworkStrategies/StarMemberStrategy.ts","../../src/DataStream.ts","../../src/StateManager.ts","../../src/NetworkStrategies/NoConcurrentStagingDecorator.ts","../../src/NetworkStrategies/AbstractNetworkStrategyDecorator.ts","../../src/Network.ts","../../src/Generic/GenericGameAction.ts","../../src/Generic/GenericGameState.ts","../../src/Generic/useGameNetwork.tsx","../../src/Generic/withGenericGameReducer.ts","demo-gamenet/poker99/Poker99Action.ts","demo-gamenet/poker99/types.ts","../../src/useNetwork.ts","../../src/GenericBoardGame/GenericBoardGameState.ts","demo-gamenet/poker99/Poker99State.ts","demo-gamenet/poker99/constants.ts","demo-gamenet/poker99/cards/bomb.ts","demo-gamenet/poker99/cards/normal.ts","demo-gamenet/poker99/cards/pm.ts","demo-gamenet/poker99/cards/reverse.ts","demo-gamenet/poker99/cards/skip.ts","demo-gamenet/poker99/cards/target.ts","demo-gamenet/poker99/cards/spade1.ts","demo-gamenet/poker99/Poker99Reducer.ts","demo-gamenet/poker99/utils.ts","demo-gamenet/poker99/aiAction.ts","demo-gamenet/withPoker99Network.tsx","demo-gamenet/Game.tsx","../../src/GamePagesSlider.tsx","../../src/getRandomName.ts","../../src/Loading.tsx","../../src/Home.tsx","../../src/PersonAdd.tsx","../../src/RobotAdd.tsx","../../src/Room.tsx","demo-gamenet/GameApp.tsx","../../src/GenericBoardGame/useBoardGameNetwork.tsx","../../src/GenericBoardGame/withGenericBoardGameReducer.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PkgType","LoggerLevel","options","undefined","this","_options","peerHostConfig","host","port","Number","parseInt","path","secure","config","JSON","parse","make","makeAndOpen","peer","Promise","reject","on","message","name","historyLevel","verbose","keep","_logs","pushLog","level","date","length","_keep","shift","push","Date","getLogFunction","_verboseLevel","INFO","console","info","bind","window","LOG","DEBUG","log","ERROR","error","WARN","warn","TRACE","trace","withColor","logFunction","css","ALL","OFF","prefix","toISOString","prototype","call","withHistoryButWrongLineNumber","Proxy","apply","target","thisArg","argList","withAllFeatures","_historyLevel","clear","splice","printLogs","forEach","getLogs","filter","value","logger","Logger","verboseLevel","network","peerFactory","isAdmin","leaving","handlePromote","cs","stagingState","NoStagingStateError","stagingChecksum","stringify","setState","handleCancel","forceCancel","isBusy","pause","timeout","setTimeout","dispatch","action","debug","getState","applyReducer","broadcast","DISPATCH","responses","errors","forceUpdate","promote","conn","data","CANCEL","map","send","SET_STATE","PROMOTE","handleDispatch","prevState","setUpConnection","dispatchMemberLeft","catch","type","payload","recover","getNetworkName","oldId","myId","initAsStarHost","dispatchHostLeft","reconnectToHost","connections","sentPromises","reset","registerConnection","unregisterConnection","rest","getConnections","pkgType","getConn","pid","v4","sendACK","connId","ACK","sendNACK","NACK","promises","Object","all","receiveACK","response","removeSentPromise","receiveNACK","errorMessage","NotConnectedToPeerError","initialState","onChange","historyMax","history","_reset","set","state","_set","get","getHistory","StateManager","NetworkBusyError","wrappedStrategy","networkStrategy","flag","noConcurrentStaging","NoConcurrentStagingDecorator","stateReducer","initialStateOrManager","dataStream","_connecting","_dispatching","stateManager","kick","getNeighbor","includes","KICK","networkName","reduce","leave","promise","destroy","join","AlreadyJoinedNetworkError","AlreadyConnectingError","initAsStarMember","oldPeer","StarMemberStrategy","connect","err","ASK_STATE","peerId","pkg","dataHandler","newState","GameActionTypes","PlayerType","minPlayer","maxPlayer","members","spectators","localPlayers","aiPlayers","nameDict","players","ready","started","GameAppState","compose","t","funcs","reverse","p","func","shuffle","a","i","j","Math","floor","random","withMemberJoin","values","withRename","newName","withUpdateLocalAndAi","oldMasterPeerId","newMasterId","entries","fakePeerId","masterId","withRemovePlayer","withGameStart","who","withShuffleId","generalGameReducer","masterPeerId","MEMBER_JOIN","RENAME","MEMBER_LEFT","HOST_LEFT","READY","withToggleReady","START","ADD_AI","nextState","ADD_LOCAL","REMOVE_LOCAL_AI","Poker99ActionType","Suit","reducer","HOME","gameAppState","setGameAppState","setConnecting","setDispatching","REACT_APP_DISABLE_SMNET_WINDOW_VAR","stateHistory","smnetLog","freeze","finally","connected","connecting","dispatching","useNetwork","withGenericGameReducer","myPlayerId","myLocals","myAis","getPeerId","playerId","rename","GAME","ROOM","room","start","addLocal","addAi","playerType","nameOrId","find","n","NORMAL","AI","LOCAL","dispatchAs","turn","GenericGameState","Poker99State","direction","points","dead","drawDeck","trashDeck","playerDeck","winner","logs","cardPoints","1","2","3","4","5","6","7","8","9","10","11","12","13","bomb","card","number","isBombCard","withEndTurn","withIncrementTurn","isNormalCard","suit","SPADE","normal","isPmCard","pm","increase","isReverseCard","skip","isSkipCard","isTargetCard","spade1","isSpade1Card","withDrawCard","withDiscardCard","nextPlayerId","current","cards","min","Infinity","index","k","next","minPossible","Poker99Reducer","deck","getFullDeck","withInitGame","PLAY_CARD","cardStr","playCard","withPlayCard","cloneDeep","END","isSkippingCard","aiAction","normalCards","sort","b","card13","c","pmCards","Poker99Context","createContext","usePoker99","useContext","Game","hideDeck","setHideDeck","setError","renderedDeckId","useState","setTarget","increment","setIncrement","d","handleError","clickCard","renderDeck","key","onClick","again","style","pointerEvents","color","fontWeight","textDecorationLine","slice","s","GameRenderer","node","isRequired","children","arrayOf","fullPage","bool","width","height","overflow","position","child","time","props","ease","justifyContent","alignItems","display","left","transition","propTypes","dictionaries","separator","loading","size","CircularProgress","top","marginTop","marginLeft","setName","setRoom","Paper","elevation","padding","Grid","container","justify","spacing","item","Typography","variant","TextField","label","fullWidth","Alert","severity","Button","disabled","SvgIcon","viewBox","creatingLocal","setCreatingLocal","theme","useTheme","handleCloseClick","renderHintText","IconButton","title","Divider","List","palette","primary","main","success","text","secondary","ListItem","ListItemIcon","Visibility","Person","PersonOutline","getIcon","ListItemText","ListItemSecondaryAction","edge","CancelOutlined","Dialog","open","onClose","DialogTitle","DialogContent","autoFocus","margin","DialogActions","GameApp","Component","WithGameNetwork","withGenericBoardGameReducer","setRenderedDeckId","prevTurn","clearTimeout","useBoardGameNetwork","Provider","displayName","withPoker99Network","ReactDOM","render","document","getElementById"],"mappings":";qJAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,M,2QCMVC,G,QAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4aCUFQ,E,w2DAAZ,SAAYA,GACV,sBACA,YACA,cACA,oBACA,kBACA,wBACA,wBACA,cARF,CAAYA,MAAO,K,ICnBPC,E,aCIV,WAAaC,G,MACX,QAAgBC,IAAZD,EACFE,KAAKC,SAAWH,MACX,CACL,IAAMI,EAAiB,2KAIrBF,KAAKC,SAAW,CACdE,KAAqC,QAAjC,EAAE,wBAA+B,EAAI,YACzCC,KAAMC,OAAOC,SAAwC,OAA/B,YAAmC,OAAQ,IACjEC,KAAqC,OAA/B,QAAmC,QACzCC,QAAQ,EAERC,OAAuCC,KAAKC,MAAMT,KAqB5D,OAfE,YAAAU,KAAA,SAAM1B,GACJ,OAAO,IAAI,IAAKA,EAAIc,KAAKC,WAGrB,YAAAY,YAAN,SAAmB3B,G,gGAEV,OADD4B,EAAOd,KAAKY,KAAK1B,GAChB,GAAM,IAAI6B,SAAQ,SAAChC,EAASiC,GACjCF,EAAKG,GAAG,QAAQ,WACdlC,EAAQ+B,MAEVA,EAAKG,GAAG,SAAS,WACfD,EAAOF,U,OALX,SAAO,kBASX,E,GCvCA,yE,OACE,EAAAI,QAAU,yBACV,EAAAC,KAAO,4B,EACT,OAH+C,OAG/C,EAHA,CAA+CvC,OAK/C,yE,OACE,EAAAsC,QAAU,gCACV,EAAAC,KAAO,yB,EACT,OAH4C,OAG5C,EAHA,CAA4CvC,OAU5C,GALA,uE,OACE,EAAAsC,QAAU,4BACV,EAAAC,KAAO,8B,EAFwC,OAAjD,CAAiDvC,OAKjD,YAGE,WAAaM,GAAb,MACE,cAAO,K,OAHT,EAAAiC,KAAO,8BAIL,EAAKD,QAAU,oBAAoBhC,E,EAEvC,OAP6C,OAO7C,EAPA,CAA6CN,QAU7C,yE,OACE,EAAAsC,QAFuB,mBAGvB,EAAAC,KAAO,sB,EACT,OAHyC,OAGzC,EAHA,CAAyCvC,OAKzC,yE,OACE,EAAAsC,QAAU,sCACV,EAAAC,KAAO,mB,EACT,OAHsC,OAGtC,EAHA,CAAsCvC,QF9BtC,SAAYiB,GACV,iBACA,qBACA,iBACA,qBACA,mBACA,mBACA,qBACA,iBARF,CAAYA,MAAW,KAmBvB,iBAkBE,WAAauB,EAA2BC,EAAsBC,GAA9D,WAFiB,KAAAC,MAAe,GAQf,KAAAC,QAAU,SAACC,EAAoBC,G,IAAY,wDACtD,EAAKH,MAAMI,QAAU,EAAKC,OAC5B,EAAKL,MAAMM,QAEb,EAAKN,MAAMO,KAAK,CACdL,MAAK,EACLP,QAAO,EACPQ,KAAM,IAAIK,QAIG,KAAAC,eAAsD,SAAAP,GACrE,GAAIA,EAAQ,EAAKQ,cACf,OAAO,aAIT,OAAQR,GACN,KAAK5B,EAAYqC,KACf,OAAOC,QAAQC,KAAKC,KAAKC,OAAOH,SAClC,KAAKtC,EAAY0C,IAEjB,KAAK1C,EAAY2C,MACf,OAAOL,QAAQM,IAAIJ,KAAKC,OAAOH,SACjC,KAAKtC,EAAY6C,MACf,OAAOP,QAAQQ,MAAMN,KAAKC,OAAOH,SACnC,KAAKtC,EAAY+C,KACf,OAAOT,QAAQU,KAAKR,KAAKC,OAAOH,SAClC,KAAKtC,EAAYiD,MACf,OAAOX,QAAQY,MAAMV,KAAKC,OAAOH,SACnC,QACE,OAAO,eAMI,KAAAa,UAA4F,SAACvB,EAAOC,GAAS,gBAAAuB,G,MACtHC,GAAM,KACV,EAACrD,EAAYqC,MAAO,oBACpB,EAACrC,EAAY0C,KAAM,GACnB,EAAC1C,EAAY2C,OAAQ,eACrB,EAAC3C,EAAY6C,OAAQ,GACrB,EAAC7C,EAAY+C,MAAO,GACpB,EAAC/C,EAAYiD,OAAQ,eACrB,EAACjD,EAAYsD,KAAM,GACnB,EAACtD,EAAYuD,KAAM,G,GACnB3B,GACI4B,OAAkBtD,IAAT2B,EAAqB,MAAM7B,EAAY4B,GAAM,IAAM,MAAMC,EAAK4B,cAAa,IAAIzD,EAAY4B,GAAM,IAChH,OAAOpC,SAASkE,UAAUlB,KAAKmB,KAAKP,EAAad,QAASkB,EAAQH,KAGnD,KAAAO,8BAAmG,SAAAhC,GAAS,gBAAAwB,GAC3H,OAAO,IAAIS,MAAMT,EAAa,CAC5BU,MAAO,SAACC,EAAqBC,EAAkBC,GAC7C,IAAMpC,EAAO,IAAIK,KAEjB,OADA,EAAKP,QAAO,MAAZ,E,qLAAI,EAASC,EAAOC,GAASoC,IACtBF,EAAM,aAAIE,QAKN,KAAAC,gBAAuD,SAAAtC,GACtE,OAAIA,GAAS,EAAKuC,cACT,EAAKP,8BAA8BhC,EAAnC,CAA0C,EAAKuB,UAAUvB,EAAf,CAAsB,EAAKO,eAAeP,KAEpF,EAAKuB,UAAUvB,EAAf,CAAsB,EAAKO,eAAeP,KAIrD,KAAAwC,MAAQ,WACN,EAAK1C,MAAM2C,OAAO,EAAG,EAAK3C,MAAMI,SA2BlC,KAAAwC,UAAY,WACV,EAAK5C,MAAM6C,SAAQ,SAAC,G,IAAE3C,EAAK,QAAEP,EAAO,UAAEQ,EAAI,OACxC,EAAKsB,UAAUvB,EAAOC,EAAtB,CAA4B,EAAKM,eAAeP,IAAO,aAAIP,OAI/D,KAAAmD,QAAU,SAAC5C,GACT,YADS,IAAAA,MAAQ5B,EAAYsD,KACtB,EAAK5B,MAAM+C,QAAO,SAAC7B,GAAQ,OAAAA,EAAIhB,OAASA,MA9G/CzB,KAAKgE,cAAgB5C,EACrBpB,KAAKiC,cAAgBZ,EACrBrB,KAAK4B,MAAQN,EA8GjB,OAlIE,sBAAI,2BAAY,C,IAAhB,SAAkBiD,GAChBvE,KAAKgE,cAAgBO,G,gCAGvB,sBAAI,2BAAY,C,IAAhB,SAAkBA,GAChBvE,KAAKiC,cAAgBsC,G,gCAGvB,sBAAI,mBAAI,C,IAAR,SAAUA,GACRvE,KAAK4B,MAAQ2C,G,gCAwFf,sBAAW,mBAAI,C,IAAf,WACE,OAAOvE,KAAK+D,gBAAgBlE,EAAYqC,O,gCAG1C,sBAAW,kBAAG,C,IAAd,WACE,OAAOlC,KAAK+D,gBAAgBlE,EAAY0C,M,gCAG1C,sBAAW,oBAAK,C,IAAhB,WACE,OAAOvC,KAAK+D,gBAAgBlE,EAAY2C,Q,gCAG1C,sBAAW,oBAAK,C,IAAhB,WACE,OAAOxC,KAAK+D,gBAAgBlE,EAAY6C,Q,gCAG1C,sBAAW,mBAAI,C,IAAf,WACE,OAAO1C,KAAK+D,gBAAgBlE,EAAY+C,O,gCAG1C,sBAAW,oBAAK,C,IAAhB,WACE,OAAO5C,KAAK+D,gBAAgBlE,EAAYiD,Q,gCAY5C,EAnIA,GAgJa0B,EANA,IAAIC,EAAO5E,EAAYsD,IAAKtD,EAAY+C,KAAM,KASzD4B,EAAOpD,aAAevB,EAAYuD,IAClCoB,EAAOE,aAAe7E,EAAYsD,IGpJpC,iBAOE,WAAawB,EAAiCC,GAN9C,KAAAC,SAAU,EACV,KAAAC,SAAU,EAMR9E,KAAK2E,QAAUA,EACf3E,KAAK4E,YAAcA,EAoDvB,OA7Ce,YAAAG,cAAb,SAA4BC,G,gGAC1B,QAA0BjF,IAAtBC,KAAKiF,aAYP,MADAT,EAAO7B,MAAM,6CACP,IAAIuC,EAVV,IADMC,EAAkB,IAASzE,KAAK0E,UAAUpF,KAAKiF,kBAC7BD,EAMtB,MADAR,EAAO7B,MAAM,uCAAuCwC,EAAe,2CAA2CH,GACxG,IAAIpG,MAAM,wDAMb,OAXHoB,KAAK2E,QAAQU,SAASrF,KAAKiF,cAC3BT,EAAOpC,KAAK,4BAA6BpC,KAAKiF,cAC9CjF,KAAKiF,kBAAelF,EASjB,GAAMgB,QAAQhC,W,OAArB,SAAO,kBAGI,YAAAuG,aAAb,SAA2BN,G,gGACzB,QAA0BjF,IAAtBC,KAAKiF,aAWP,MADAT,EAAO7B,MAAM,4CACP,IAAIuC,EATV,IADMC,EAAkB,IAASzE,KAAK0E,UAAUpF,KAAKiF,kBAC7BD,EAKtB,MADAR,EAAO7B,MAAM,sCAAsCwC,EAAe,0CAA0CH,GACtG,IAAIpG,MAAM,uDAMb,OAVH4F,EAAOpC,KAAK,4BAA6BpC,KAAKiF,cAC9CjF,KAAKiF,kBAAelF,EASjB,GAAMgB,QAAQhC,W,OAArB,SAAO,kBAGF,YAAAwG,YAAP,WACEf,EAAOpC,KAAK,iCACZpC,KAAKiF,kBAAelF,GAGf,YAAAyF,OAAP,WACE,YAA6BzF,IAAtBC,KAAKiF,cAIhB,EA7DA,GCnBaQ,EAAQ,SAAOC,GAAe,0C,kDAAoB,SAAM,IAAI3E,SAAQ,SAAAhC,GAC/E4G,YAAW,WACT5G,MACC2G,O,OAH0D,2BCW/D,2B,+CAmFA,OAnFgG,OACjF,YAAAE,SAAb,SAAuBC,G,+GAQH,OANlBrB,EAAOsB,MAAM,iBAAkB9F,KAAK2E,QAAQoB,WAAYF,GACxD7F,KAAKiF,aAAejF,KAAK2E,QAAQqB,aAAahG,KAAK2E,QAAQoB,WAAYF,GACjEb,EAAK,IAAStE,KAAK0E,UAAUpF,KAAKiF,eACxCT,EAAOsB,MAAM,eAAgB9F,KAAKiF,cAGhB,GAAMjF,KAAK2E,QAAQsB,UAAUrG,EAAQsG,SAAUL,I,cAA3DM,EAAY,SAClB3B,EAAOsB,MAAM,qBAAsBK,GAK7BC,EAA8D,GAC9DC,EAAqC,GACrCC,EAAiC,GACvCH,EAAU/B,SAAQ,SAAC,G,IAAEmC,EAAI,OAAEC,EAAI,OAAE7D,EAAK,aACtB5C,IAAV4C,EACFyD,EAAOtE,KAAK,CAAEa,MAAK,EAAE4D,KAAI,IAErBC,IAASxB,EACXqB,EAAYvE,KAAKyE,GAEjBD,EAAQxE,KAAKyE,MAKfD,EAAQ3E,SAAWwE,EAAUxE,OAC/B6C,EAAOsB,MAAM,wBAETM,EAAOzE,OAAS,GAClB6C,EAAO7B,MAAM,YAAYyD,EAAOzE,OAAM,yBAA0ByE,GAE9DC,EAAY1E,OAAS,GACvB6C,EAAO3B,KAAK,YAAYwD,EAAY1E,OAAM,yDAA0D0E,IAGpGD,EAAOzE,OAAS,EAClB,GAAM3B,KAAK2E,QAAQsB,UAAUrG,EAAQ6G,OAAQzB,IAD3C,M,OAEF,MADA,SACM,IAAIpG,MAAMwH,EAAO,GAAGzD,O,OAE1B0D,EAAYK,KAAI,SAAMH,GAAI,qC,kDACxB,SAAMvG,KAAK2E,QAAQgC,KAAKJ,EAAM3G,EAAQgH,UAAW5G,KAAKiF,e,cAAtD,S,cAEFqB,EAAQI,KAAI,SAAMH,GAAI,qC,kDACpB,SAAMvG,KAAK2E,QAAQgC,KAAKJ,EAAM3G,EAAQiH,QAAS7B,I,cAA/C,S,+BAKJ,SAAMhF,KAAK+E,cAAcC,I,cAAzB,S,YAKW,YAAA8B,eAAb,SAA6BC,EAAkBlB,G,0FAC7C,SAAM7F,KAAK4F,SAASC,I,OACpB,OADA,SACA,GAAO7F,KAAK2E,QAAQoB,oBAIf,YAAAiB,gBAAP,SAAwBT,GAAxB,WACEA,EAAKtF,GAAG,SAAS,WACf,EAAKgG,mBAAmBV,EAAKzF,MAAMoG,MAAM1C,EAAO7B,WAItC,YAAAsE,mBAAd,SAAkC/H,G,6FAC3Bc,KAAK8E,QAAN,Y,iBAEA,O,sBAAA,GAAM9E,KAAK2E,QAAQiB,SAAS,CAC1BuB,KAAM,cACNC,QAASlI,K,cAFX,S,aAKA,O,SAAA,GAAMuG,EAAM,M,OACZ,OADA,SACA,GAAMzF,KAAKiH,mBAAmB/H,I,cAA9B,S,+BAIR,EAnFA,CAAgG,GCDhG,yE,OACE,EAAA2F,SAAU,E,EAoDZ,OArDkG,OAInF,YAAAe,SAAb,SAAuBC,G,0FACrB,SAAM7F,KAAK2E,QAAQsB,UAAUrG,EAAQsG,SAAUL,I,cAA/C,S,YAIW,YAAAiB,eAAb,SAA6BC,EAAkBlB,G,0FAEtC,OADP7F,KAAKiF,aAAejF,KAAK2E,QAAQqB,aAAae,EAAWlB,GAClD,GAAM9E,QAAQhC,QAAQiB,KAAKiF,e,OAAlC,SAAO,kBAKF,YAAA+B,gBAAP,SAAwBT,GAAxB,WACEA,EAAKtF,GAAG,SAAS,WACV,EAAK6D,SACR,EAAKuC,UAAUH,MAAM1C,EAAO7B,WAKpB,YAAA0E,QAAd,W,0GAEetH,KADPoB,EAAOnB,KAAK2E,QAAQ2C,kBACtB,Y,iBAIA,O,sBAFMC,EAAQvH,KAAK2E,QAAQ6C,KAC3BhD,EAAOsB,MAAM,QAASyB,GACtB,GAAMvH,KAAK2E,QAAQ8C,eAAetG,EAAMnB,KAAK4E,c,cAA7C,SACAJ,EAAOpC,KAAK,2DACErC,IAAVwH,EAAA,MACF,GAAMvH,KAAK0H,iBAAiBH,I,OAA5B,S,oCAGF,O,SAAA,GAAMvH,KAAK2E,QAAQgD,gBAAgBxG,I,cAAnC,S,+BAMQ,YAAAuG,iBAAd,SAAgCxI,G,0FAE5B,O,sBAAA,GAAMc,KAAK2E,QAAQiB,SAAS,CAC1BuB,KAAM,YACNC,QAASlI,K,cAFX,S,aAKA,O,SAAA,GAAMuG,EAAM,M,OACZ,OADA,SACA,GAAMzF,KAAK0H,iBAAiBxI,I,cAA5B,S,+BAGN,EArDA,CAAkG,GCLlG,0BACU,KAAA0I,YAAgD,GAChD,KAAAC,aAAiD,GA8E3D,OA5ES,YAAAC,MAAP,WACE9H,KAAK4H,YAAc,IAGd,YAAAG,mBAAP,SAA2BxB,GACzBvG,KAAK4H,YAAYrB,EAAKzF,MAAQyF,GAGzB,YAAAyB,qBAAP,SAA6BzB,GAC3B,IAAoC,EAAAvG,KAAK4H,YAAjC,EAACrB,EAAKzF,KAAamH,GAAL,KAAS,IAAzB,+BACNjI,KAAK4H,YAAcK,GAGd,YAAAC,eAAP,WACE,OAAOlI,KAAK4H,aAGD,YAAAjB,KAAb,SAAmCzH,EAA6BiJ,EAAkB3B,G,uGAEzE,OADDD,EAAOvG,KAAKoI,QAAQlJ,GACnB,GAAM,IAAI6B,SAAQ,SAAC,EAAS,GACjC,IAAMsH,EAAM,OAAAC,EAAA,KACZ,EAAKT,aAAaQ,GAAO,CACvBtJ,QAAS,SAACyH,GAAiB,SAAQ,CAAED,KAAI,EAAEC,KAAI,KAC/CxF,OAAQ,SAAC2B,GAAkB,SAAO,IAAI/D,MAAM+D,MAE9C4D,EAAKI,KAAK,CAAEwB,QAAO,EAAE3B,KAAI,EAAE6B,IAAG,Q,OANhC,SAAO,kBAUF,YAAAE,QAAP,SAAgBC,EAAiCH,EAAuB7B,GACzDxG,KAAKoI,QAAQI,GACrB7B,KAAK,CAAEwB,QAASvI,EAAQ6I,IAAKJ,IAAG,EAAE7B,KAAI,KAGtC,YAAAkC,SAAP,SAAiBF,EAAiCH,EAAuB7B,GAC1DxG,KAAKoI,QAAQI,GACrB7B,KAAK,CAAEwB,QAASvI,EAAQ+I,KAAMN,IAAG,EAAE7B,KAAI,KAGjC,YAAAP,UAAb,SAAwCkC,EAAkB3B,G,uGAEjD,OADDoC,EAAWC,OAAO/J,KAAKkB,KAAK4H,aAAalB,KAAI,SAAMxH,GAAE,gE,uBAAI,SAAMc,KAAK2G,KAAWzH,EAAIiJ,EAAS3B,I,OAAnC,6BACxD,GAAMzF,QAAQ+H,IAAIF,I,OAAzB,SAAO,kBAGF,YAAAG,WAAP,SAAmBV,EAAyBW,QAC9BjJ,IAARsI,GAAqBA,KAAOrI,KAAK6H,gBAEnC9I,EADoBiB,KAAK6H,aAAaQ,GAAvB,SACPW,GACRhJ,KAAKiJ,kBAAkBZ,KAIpB,YAAAa,YAAP,SAAoBb,EAAyBc,QAC/BpJ,IAARsI,GAAqBA,KAAOrI,KAAK6H,gBAEnC7G,EADmBhB,KAAK6H,aAAaQ,GAAvB,QACPc,GACPnJ,KAAKiJ,kBAAkBZ,KAInB,YAAAY,kBAAR,SAA2BZ,GACzB,IAA8B,EAAArI,KAAK6H,aAA3B,EAACQ,EAAYJ,GAAL,KAAS,IAAnB,+BACNjI,KAAK6H,aAAeI,GAGd,YAAAG,QAAR,SAAiBlJ,GACf,GAAkB,kBAAPA,EAAiB,CAC1B,IAAMqH,EAAOvG,KAAK4H,YAAY1I,GAC9B,QAAaa,IAATwG,EACF,OAAOA,EAET,MAAM,IAAI6C,EAAwBlK,GAElC,OAAOA,GAGb,EAhFA,GCMA,aAQE,WAAamK,EAAqBC,EAA0BC,GAA5D,gBAA4D,IAAAA,MAAA,GAH3C,KAAAC,QAAmB,GAIlCxJ,KAAKuJ,WAAaA,EAClBvJ,KAAKqJ,aAAe,IAAUA,GAC9BrJ,KAAKyJ,OAAS,WAAM,SAAKC,IAAI,IAAU,EAAKL,gBAC5CrJ,KAAK2J,MAAQN,EAEbrJ,KAAK4J,KAAe,OAARN,QAAQ,IAARA,IAAa,SAACK,GACxB,EAAKA,MAAQA,GA8BnB,OA1BS,YAAAE,IAAP,WACE,OAAO7J,KAAK2J,OAGP,YAAAD,IAAP,SAAYC,GACV3J,KAAK2J,MAAQA,EACT3J,KAAKuJ,WAAa,IAChBvJ,KAAKwJ,QAAQ7H,QAAU3B,KAAKuJ,YAC9BvJ,KAAKwJ,QAAQ3H,QAEf7B,KAAKwJ,QAAQ1H,KAAK,IAAU6H,KAE9B3J,KAAK4J,KAAI,KAAMD,KAGV,YAAA7B,MAAP,WACE9H,KAAKyJ,UAGA,YAAAK,WAAP,WACE,OAAO9J,KAAKwJ,SAGP,EAAA5I,KAAP,SAAyCyI,EAAqBC,EAA0BC,GACtF,OAAO,IAAIQ,EAAoBV,EAAcC,EAAUC,IAE3D,EA7CA,GCLA,2B,+CAkBA,OAlB4G,OAC7F,YAAA3D,SAAb,SAAuBC,G,0FACrB,QAA0B9F,IAAtBC,KAAKiF,aAEP,MADAT,EAAO7B,MAAM,8CAA+C3C,KAAKiF,cAC3D,IAAI+E,EAGL,SAAMhK,KAAKiK,gBAAgBrE,SAASC,I,OAA3C,SAAO,kBAGI,YAAAiB,eAAb,SAA6BC,EAAkBlB,G,0FAC7C,QAA0B9F,IAAtBC,KAAKiF,aAEP,MADAT,EAAO7B,MAAM,6DAA8D3C,KAAKiF,cAC1E,IAAI+E,EAGL,SAAMhK,KAAKiK,gBAAgBnD,eAAeC,EAAWlB,I,OAA5D,SAAO,kBAEX,EAlBA,CCDA,WA+BE,WAAaqE,GACXlK,KAAKiK,gBAAkBC,EA8B3B,OA3DE,sBAAI,2BAAY,C,IAAhB,WACE,OAAOlK,KAAKiK,gBAAgBhF,c,IAG9B,SAAkBV,GAChBvE,KAAKiK,gBAAgBhF,aAAeV,G,gCAGtC,sBAAI,sBAAO,C,IAAX,WACE,OAAOvE,KAAKiK,gBAAgBtF,S,gCAG9B,sBAAI,sBAAO,C,IAAX,WACE,OAAO3E,KAAKiK,gBAAgBnF,S,IAG9B,SAAaqF,GACXnK,KAAKiK,gBAAgBnF,QAAUqF,G,gCAGjC,sBAAI,sBAAO,C,IAAX,WACE,OAAOnK,KAAKiK,gBAAgBpF,S,IAG9B,SAAasF,GACXnK,KAAKiK,gBAAgBpF,QAAUsF,G,gCAOpB,YAAAvE,SAAb,SAAuBC,G,0FACd,SAAM7F,KAAKiK,gBAAgBrE,SAASC,I,OAA3C,SAAO,kBAGF,YAAAN,YAAP,WACE,OAAOvF,KAAKiK,gBAAgB1E,eAGjB,YAAAD,aAAb,SAA2BN,G,0FAClB,SAAMhF,KAAKiK,gBAAgB3E,aAAaN,I,OAA/C,SAAO,kBAGI,YAAA8B,eAAb,SAA6BC,EAAkBlB,G,0FACtC,SAAM7F,KAAKiK,gBAAgBnD,eAAeC,EAAWlB,I,OAA5D,SAAO,kBAGI,YAAAd,cAAb,SAA4BC,G,0FACnB,SAAMhF,KAAKiK,gBAAgBlF,cAAcC,I,OAAhD,SAAO,kBAGF,YAAAQ,OAAP,WACE,OAAOxF,KAAKiK,gBAAgBzE,UAGvB,YAAAwB,gBAAP,SAAwBT,GACtB,OAAOvG,KAAKiK,gBAAgBjD,gBAAgBT,IAEhD,EA9DA,IDqBa6D,EAAsB,SAA4DF,GAC7F,OAAO,IAAIG,EAA6BH,IEH1C,aAUE,WAAaI,EAA6CC,GAA1D,WAJiB,KAAAC,WAAa,IAAI,EAC1B,KAAAC,aAAc,EACd,KAAAC,cAAe,EA2ChB,KAAAZ,WAAa,WAClB,OAAO,EAAKa,aAAab,cAwBpB,KAAAc,KAAO,SAAO1L,GAAU,qC,iEACM,Q,EAAb,Q,EAAlBc,KAAK6K,qBAAa,eAAEC,SAAS5L,UAAE,SACjC,GAAMc,KAAK2G,KAAKzH,EAAIU,EAAQmL,KAAM7L,IADS,M,cAC3C,S,aAEA,SAAMc,KAAKiG,UAAUrG,EAAQmL,KAAM7L,I,OAAnC,S,mCApEAc,KAAK2K,aADHJ,aAAiC,EACfA,EAEA,EAAa3J,KAAK2J,GAExCvK,KAAKsK,aAAeA,EAuRxB,OApRE,sBAAW,mBAAI,C,IAAf,W,MACE,OAAgB,QAAhB,EAAOtK,KAAKc,YAAI,eAAE5B,I,gCAGpB,sBAAW,wBAAS,C,IAApB,WACE,YAA4Ba,IAArBC,KAAKgL,a,gCAGd,sBAAW,yBAAU,C,IAArB,WACE,OAAOhL,KAAKyK,a,gCAGd,sBAAW,0BAAW,C,IAAtB,WACE,OAAOzK,KAAK0K,c,gCAGP,YAAApD,eAAP,WACE,OAAOtH,KAAKgL,aAGP,YAAA3F,SAAP,SAAiBsE,GACf3J,KAAK2K,aAAajB,IAAIC,IAGjB,YAAA5D,SAAP,WACE,OAAO/F,KAAK2K,aAAad,OAG3B,sBAAW,oBAAK,C,IAAhB,WACE,OAAO7J,KAAK+F,Y,gCAOd,sBAAW,sBAAO,C,IAAlB,W,QACE,OAAoC,QAApC,EAA2B,QAA3B,EAAO/F,KAAKkK,uBAAe,eAAErF,eAAO,U,gCAQ/B,YAAAmB,aAAP,SAAqBe,EAAkBlB,GACrC,OAAO7F,KAAKsK,aAAavD,EAAWlB,IAO/B,YAAAoF,OAAP,SAAepF,GACb7F,KAAK2K,aAAajB,IAAI1J,KAAKsK,aAAatK,KAAK2K,aAAad,MAAOhE,KAWtD,YAAAqF,MAAb,W,mHACoBnL,IAAdC,KAAKc,KAAL,YAC2Bf,IAAzBC,KAAKkK,kBACPlK,KAAKkK,gBAAgBpF,SAAU,GAE3BqG,EAAU,IAAIpK,SAAQ,SAAAhC,GAAO,aAAa,QAAb,EAAI,EAAK+B,YAAI,eAAEG,GAAG,QAASlC,MAC9DiB,KAAKc,KAAKsK,UACV,GAAMD,I,OAAN,SACAnL,KAAKc,UAAOf,EACZC,KAAKgL,iBAAcjL,EACnBC,KAAKwK,WAAW1C,QAChB9H,KAAK2K,aAAa7C,Q,mCAST,YAAAuD,KAAb,SAAmBL,EAAqBpG,G,gGACtC,QAAkB7E,IAAdC,KAAKc,KACP,MAAM,IAAIwK,EAEZ,GAAItL,KAAKyK,YACP,MAAM,IAAIc,EAEZvL,KAAKyK,aAAc,E,uCAEjB7F,EAAyB,OAAXA,QAAW,IAAXA,IAAe,IAAI,E,iBAE/B,O,sBAAA,GAAM5E,KAAKyH,eAAeuD,EAAapG,I,cAAvC,SACA5E,KAAK2K,aAAa7C,QAClB9H,KAAKqF,SAAQ,OAAMrF,KAAK+F,YAAU,CAAEiF,YAAW,K,aAG/C,O,SADAxG,EAAOpC,KAAK,8CACZ,GAAMpC,KAAKwL,iBAAiBR,EAAapG,I,cAAzC,S,aAEF,SAAM5E,KAAK4F,SAAS,CAClBuB,KAAM,iB,cADR,SAGAnH,KAAKyK,aAAc,E,aAGnB,M,WADAzK,KAAKyK,aAAc,EACb,E,yBASG,YAAAhD,eAAb,SAA6BtG,EAAcyD,G,yGAG7B,OAFZJ,EAAOpC,KAAK,mBACNqJ,EAAUzL,KAAKc,KACrB,EAAAd,KAAY,GAAM4E,EAAY/D,YAAYM,I,cAA1C,EAAKL,KAAO,SACZd,KAAKc,KAAKG,GAAG,cAAc,SAAAsF,GACzB/B,EAAOpC,KAAK,2BAA4BmE,EAAKzF,MAC7C,EAAKkG,gBAAgBT,MAEvBvG,KAAKgL,YAAc7J,EACnBnB,KAAKkK,gBAAkBE,EAAoB,IAAI,EAAiBpK,KAAM4E,IAC/D,OAAP6G,QAAO,IAAPA,KAASL,UACT5G,EAAOpC,KAAK,kB,YAQD,YAAAoJ,iBAAb,SAA+BrK,EAAcyD,G,gGAG/B,OAFZJ,EAAOpC,KAAK,qBACZpC,KAAKkK,gBAAkBE,EAAoB,IAAIsB,EAAmB1L,KAAM4E,IACxE,EAAA5E,KAAY,GAAM4E,EAAY/D,e,OAE9B,OAFA,EAAKC,KAAO,SACZ0D,EAAOpC,KAAK,eACZ,GAAMpC,KAAK2H,gBAAgBxG,I,cAA3B,S,YAGW,YAAAwG,gBAAb,SAA8BxG,G,kGAC5B,YAAkBpB,IAAdC,KAAKc,KAAoB,KACvByF,EAAOvG,KAAKc,KAAK6K,QAAQxK,GAC/BnB,KAAKgH,gBAAgBT,GACrB,GAAM,IAAIxF,SAAQ,SAAChC,EAASiC,GAC1BuF,EAAKtF,GAAG,QAAQ,WACdlC,OAEFwH,EAAKtF,GAAG,SAAS,SAAA2K,GACf5K,EAAO4K,W,OAOM,OAZjB,SAQApH,EAAOpC,KAAK,+BACZpC,KAAKwK,WAAWzC,mBAAmBxB,GACnCvG,KAAKgL,YAAc7J,EACnBqD,EAAOpC,KAAK,8BACK,GAAMpC,KAAKwK,WAAW7D,KAAuBxF,EAAMvB,EAAQiM,eAAW9L,I,mBAC1EA,KADLyG,EAAS,SAAL,QAEVhC,EAAOpC,KAAK,mCAAoCoE,GAChDxG,KAAKqF,SAASmB,IAEhBhC,EAAOpC,KAAK,oB,YAMP,YAAAyI,YAAP,WACE,QAAkB9K,IAAdC,KAAKc,KAGT,OAAO+H,OAAO/J,KAAKkB,KAAKwK,WAAWtC,mBAGxB,YAAAvB,KAAb,SAAmCzH,EAA6BiJ,EAAkB3B,G,0FACzE,SAAMxG,KAAKwK,WAAW7D,KAAKzH,EAAIiJ,EAAS3B,I,OAA/C,SAAO,kBAGI,YAAAP,UAAb,SAAwCkC,EAAkB3B,G,0FACjD,SAAMxG,KAAKwK,WAAWvE,UAAUkC,EAAS3B,I,OAAhD,SAAO,kBAGI,YAAAZ,SAAb,SAAuBC,G,qIAEnB7F,KAAK0K,cAAe,EACpB7E,EAAOiG,OAAsB,QAAhB,EAAGjG,EAAOiG,cAAM,QAAI9L,KAAKwH,UACpBzH,IAAdC,KAAKwH,MAAoC,OAAdxH,KAAKwH,KAAhC,OACFhD,EAAOpC,KAAK,qBAAsByD,GAClC,GAA0B,QAA1B,EAAM7F,KAAKkK,uBAAe,eAAEtE,SAASC,K,cAArC,SACArB,EAAOpC,KAAK,oBAAqByD,G,aAEjCrB,EAAO7B,MAAM,iB,wBAEf3C,KAAK0K,cAAe,E,aAGpB,M,WADA1K,KAAK0K,cAAe,EACd,E,yBAIF,YAAA1D,gBAAR,SAAyBT,GAAzB,I,EAAA,OACEA,EAAKtF,GAAG,QAAQ,WACduD,EAAOpC,KAAK,yBAA0BmE,EAAKzF,MAC3C,EAAK0J,WAAWzC,mBAAmBxB,MAErCA,EAAKtF,GAAG,SAAS,WACfuD,EAAOpC,KAAK,yBAA0BmE,EAAKzF,MAC3C,EAAK0J,WAAWxC,qBAAqBzB,MAEvCA,EAAKtF,GAAG,QAAQ,SAAC8K,GAA4B,SAAKC,YAAYD,EAAKxF,MAC/C,QAApB,EAAAvG,KAAKkK,uBAAe,SAAElD,gBAAgBT,IAUhC,YAAAyF,YAAR,SAAqBD,EAAyBxF,GAA9C,I,QAAA,OACU8B,EAAuB0D,EAApB,IAAE5D,EAAkB4D,EAAX,QAAEvF,EAASuF,EAAL,KAE1B,OADAvH,EAAOsB,MAAM,oBAAqBS,EAAKzF,KAAMiL,GACrC5D,GACN,KAAKvI,EAAQsG,SAGS,QAApB,EAAAlG,KAAKkK,uBAAe,SAAEpD,eAAe9G,KAAK+F,WAAYS,GACnDlH,MAAK,SAAA2M,GACJ,IAAMjH,EAAa,IAAStE,KAAK0E,UAAU6G,IAC3C,EAAKzB,WAAWjC,QAAQhC,EAAM8B,EAAKrD,MAEpCkC,OAAM,SAACvE,GACN,EAAK6H,WAAW9B,SAASnC,EAAM8B,EAAK1F,EAAMzB,YAE9C,MACF,KAAKtB,EAAQ6I,IACXzI,KAAKwK,WAAWzB,WAAWV,EAAK7B,GAChC,MACF,KAAK5G,EAAQ+I,KACX3I,KAAKwK,WAAWtB,YAAYb,EAAK7B,GACjC,MACF,KAAK5G,EAAQiH,QAES,QAApB,EAAA7G,KAAKkK,uBAAe,SAAEnF,cAAcyB,GACjClH,MAAK,WAAM,SAAKkL,WAAWjC,QAAQhC,EAAM8B,EAAK7B,MAC9CU,OAAM,SAACvE,GAAiB,SAAK6H,WAAW9B,SAASnC,EAAM8B,EAAK1F,EAAMzB,YACrE,MACF,KAAKtB,EAAQ6G,OAES,QAApB,EAAAzG,KAAKkK,uBAAe,SAAE5E,aAAakB,GAChClH,MAAK,WAAM,SAAKkL,WAAWjC,QAAQhC,EAAM8B,EAAK7B,MAC9CU,OAAM,SAACvE,GAAiB,SAAK6H,WAAW9B,SAASnC,EAAM8B,EAAK1F,EAAMzB,YACrE,MACF,KAAKtB,EAAQgH,UAEX5G,KAAKqF,SAASmB,GACM,QAApB,EAAAxG,KAAKkK,uBAAe,SAAE3E,cACtB,MACF,KAAK3F,EAAQiM,UACX7L,KAAKwK,WAAWjC,QAAQhC,EAAM8B,EAAKrI,KAAK2J,OACxC,MACF,KAAK/J,EAAQmL,KACPvE,IAASxG,KAAKwH,MAChBhD,EAAOpC,KAAK,iCACZpC,KAAKkL,QAAQhE,MAAM1C,EAAO7B,QAE1B3C,KAAK2G,KAAKH,EAAM2B,EAAS3B,GAAMU,MAAM1C,EAAO7B,SAItD,EAvSA,G,ICIYuJ,EC1BAC,E,UD0BZ,SAAYD,GACV,4BACA,4BACA,wBACA,kBACA,gBACA,gBACA,kBACA,wBACA,oCATF,CAAYA,MAAe,KC1B3B,SAAYC,GACV,uBACA,qBACA,eAHF,CAAYA,MAAU,KAMtB,iBAGE,KAAAC,UAAY,EACZ,KAAAC,UAAY,EAKZ,KAAAC,QAAwC,GAIxC,KAAAC,WAAyC,GAIzC,KAAAC,aAA2C,GAI3C,KAAAC,UAAwC,GAIxC,KAAAC,SAAuC,GAIvC,KAAAC,QAAoB,GAIpB,KAAAC,MAAoC,GACpC,KAAAC,SAAU,G,yjECXAC,ECxBCC,GAA6D,W,IAAC,sDAAa,gBAAAC,GACtF,OAAOC,EAAMC,UAAUjC,QAAO,SAACkC,EAAGC,GAAS,OAAAA,EAAKD,KAAIH,KAGzCK,GAAU,SAAKC,GAC1B,I,MAASC,EAAID,EAAE3L,OAAS,EAAG4L,EAAI,EAAGA,IAAK,CACrC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IAC1C,EAAe,CAACD,EAAEE,GAAIF,EAAEC,IAAvBD,EAAEC,GAAE,KAAED,EAAEE,GAAE,KAEb,OAAOF,GAGHM,GAAkD,SAAA9B,GAAU,gBAAC/E,G,MACjE,GAAI+E,KAAU/E,EAAUuF,QACtB,MAAM,IAAI1N,MAAM,UAAUkN,EAAM,6BAKlC,OAHK/E,EAAUsF,UAAY,GAAKxD,OAAOgF,OAAO9G,EAAUuF,SAAS3K,QAAUoF,EAAUsF,WAActF,EAAU8F,WAC3G9F,EAAUwF,WAAWT,IAAU,GAEjC,OAAY/E,GAAS,CAAEuF,QAAS,EAAF,KAAOvF,EAAUuF,UAAO,OAAGR,GAAS,GAAE,QAGhEgC,GAA+D,SAAChC,EAAQiC,GAAY,gBAAChH,G,MACzF,GAAI8B,OAAOgF,OAAO9G,EAAUuF,SAASxB,SAASiD,GAC5C,MAAM,IAAInP,MAAM,kCAAkCmP,GAEpD,GAAIhH,EAAU8F,SAAWhE,OAAO/J,KAAKiI,EAAU2F,UAAU5B,SAASiD,GAAU,CAC1E,IAAuC,EAAAhH,EAAUwF,WAAzC,EAACT,EAAeS,GAAL,KAAe,IAA5B,+BACNxF,EAAUwF,WAAaA,EAEzB,cAAYxF,GAAS,CAAEuF,QAAS,EAAF,KAAOvF,EAAUuF,UAAO,OAAGR,GAASiC,EAAO,QAGrEC,GAA8F,SAACC,EAAiBC,GAAgB,gBAAAnH,GACpI,IAAMyF,EAAuC,GACvCC,EAAoC,GAe1C,OAdA5D,OAAOsF,QAAQpH,EAAUyF,cAAcpI,SAAQ,SAAC,G,IAACgK,EAAU,KAAEC,EAAQ,KAC/DA,IAAaJ,EACfzB,EAAa4B,GAAcC,OACFtO,IAAhBmO,IACT1B,EAAa4B,GAAcF,MAG/BrF,OAAOsF,QAAQpH,EAAU0F,WAAWrI,SAAQ,SAAC,G,IAACgK,EAAU,KAAEC,EAAQ,KAC5DA,IAAaJ,EACfxB,EAAU2B,GAAcC,OACCtO,IAAhBmO,IACTzB,EAAU2B,GAAcF,MAG5B,OAAYnH,GAAS,CAAEyF,aAAY,EAAEC,UAAS,MAG1C6B,GAAoD,SAACxC,GAAW,gBAAA/E,GACpE,IAAqC,EAAAA,EAAUuF,QAAvC,EAACR,EAAgBQ,GAAL,KAAY,IAA1B,+BACoC,EAAAvF,EAAUyF,aAA5C,EAACV,EAAgBU,GAAL,KAAiB,IAA/B,+BACiC,EAAAzF,EAAU0F,UAAzC,EAACX,EAAgBW,GAAL,KAAc,IAA5B,+BACN,cAAY1F,GAAS,CAAEuF,QAAO,EAAEE,aAAY,EAAEC,UAAS,MA2BnD8B,GAAsD,SAACvD,GAAgB,gBAAAjE,GAC3E,GAAIA,EAAU8F,QACZ,MAAM,IAAIjO,MAAM,mBAElB,IAAM4P,EAAM3F,OAAO/J,KAAKiI,EAAUuF,SAC/BhI,QAAO,SAAApF,GAAM,OAAAA,IAAO8L,KACpB1G,QAAO,SAAApF,GAAM,OAAC6H,EAAUwF,WAAWrN,MACnCoF,QAAO,SAAApF,GAAM,YAA+Ba,IAA/BgH,EAAUyF,aAAatN,MACpCoF,QAAO,SAAApF,GAAM,YAA4Ba,IAA5BgH,EAAU0F,UAAUvN,MACjCoF,QAAO,SAACpF,GAAE,MAAK,YAAOa,IAAPb,KAAyC,QAArB,EAAE6H,EAAU6F,MAAM1N,UAAG,aAC3D,GAAmB,IAAfsP,EAAI7M,OACN,OA1B+B,SAACoF,GAClC,IAAM4F,EAAUU,GAAQxE,OAAOsF,QAAQpH,EAAUuF,SAAShI,QAAO,SAAC,G,IAACwH,EAAM,KAAM,OAAC/E,EAAUwF,WAAWT,MAASpF,KAAI,SAAA4G,GAAK,OAAAA,EAAE,OACzH,GAAIX,EAAQhL,OAASoF,EAAUsF,UAC7B,MAAM,IAAIzN,MAAM,0BAA0BmI,EAAUsF,UAAS,UAAUM,EAAQhL,QAEjF,GAAIgL,EAAQhL,OAASoF,EAAUqF,UAC7B,MAAM,IAAIxN,MAAM,4BAA4BmI,EAAUqF,UAAS,UAAUO,EAAQhL,QAEnF,IAAM+K,EAAmC,GAIzC,OAHAC,EAAQvI,SAAQ,SAACjD,EAAMjC,GACrBwN,EAASvL,GAAQjC,KAEnB,OAAY6H,GAAS,CAAE2F,SAAQ,EAAEC,QAAO,IAc/B8B,CAAc,EAAD,KAAM1H,GAAS,CAAE8F,SAAS,KAE9C,MAAM,IAAIjO,MAAS4P,EAAI9H,KAAI,SAAAxH,GAAM,OAAA6H,EAAUuF,QAAQpN,MAAKmM,KAAK,KAAI,oBAsBxDqD,GAA0E,SAAC3H,EAAWlB,GACjG,IAAMiG,EAASjG,EAAOiG,OACtB,QAAe/L,IAAX+L,EACF,MAAM,IAAIlN,MAAM,2BAElB,IAvB4EuC,EAAMwN,EAuB5E3D,EAAcjE,EAAUiE,YAC9B,QAAoBjL,IAAhBiL,EACF,MAAM,IAAIpM,MAAM,mCAElB,OAAQiH,EAAOsB,MACb,KAAK+E,EAAgB0C,YACnB,OAAOhB,GAAe9B,EAAf8B,CAAuB7G,GAChC,KAAKmF,EAAgB2C,OACnB,OAAOf,GAAWhC,EAAQjG,EAAOuB,QAA1B0G,CAAmC/G,GAC5C,KAAKmF,EAAgB4C,YACnB,OAAO/B,GACLiB,GAAqBnI,EAAOuB,QAAS4D,GACrCsD,GAAiBzI,EAAOuB,SAFnB2F,CAGLhG,GACJ,KAAKmF,EAAgB6C,UACnB,OAAOhC,GACLiB,GAAqBnI,EAAOuB,QAAS4D,GACrC8C,GAAW9C,EAAajE,EAAUuF,QAAQzG,EAAOuB,UACjDkH,GAAiBzI,EAAOuB,SAHnB2F,CAILhG,GACJ,KAAKmF,EAAgB8C,MACnB,OArFmD,SAAClD,GAAW,gBAAA/E,G,MACnE,GAAIA,EAAU6F,MAAMd,GAAS,CAC3B,IAAkC,EAAA/E,EAAU6F,MAApC,EAACd,EAAec,GAAL,KAAU,IAAvB,+BACN,cAAY7F,GAAS,CAAE6F,MAAK,IAE5B,cAAY7F,GAAS,CAAE6F,MAAO,EAAF,KAAO7F,EAAU6F,QAAK,OAAGd,IAAS,EAAI,OAgFzDmD,CAAgBnD,EAAhBmD,CAAwBlI,GACjC,KAAKmF,EAAgBgD,MACnB,OAAOX,GAAcvD,EAAduD,CAA2BxH,GACpC,KAAKmF,EAAgBiD,OACnB,OAhDwEhO,EAgDjD0E,EAAOuB,QAhDgDuH,EAgDvC7C,EAhDwD,SAAA/E,G,MAC7FqH,EAAa,MAAMjN,EAAI,IAAI,eAC3BiO,EAAYrC,GAChBe,GAAWM,EAAYjN,GACvByM,GAAeQ,GAFCrB,CAGhBhG,GACF,cAAYqI,GAAS,CAAE3C,UAAW,EAAF,KAAO2C,EAAU3C,YAAS,OAAG2B,GAAaO,EAAY,QA0CnC5H,GACjD,KAAKmF,EAAgBmD,UACnB,OAzC0E,SAAClO,EAAMwN,GAAiB,gBAAA5H,G,MAChGqH,EAAa,SAASjN,EAAI,IAAI,eAC9BiO,EAAYrC,GAChBe,GAAWM,EAAYjN,GACvByM,GAAeQ,GAFCrB,CAGhBhG,GACF,cAAYqI,GAAS,CAAE5C,aAAc,EAAF,KAAO4C,EAAU5C,eAAY,OAAG4B,GAAaO,EAAY,OAmCjF,CAAmB9I,EAAOuB,QAAS0E,EAAnC,CAA2C/E,GACpD,KAAKmF,EAAgBoD,gBACnB,OAAOhB,GAAiBzI,EAAOuB,QAAxBkH,CAAiCvH,GAC1C,QACE,OAAOA,KDnIb,SAAY+F,GACV,mBACA,mBACA,mBAHF,CAAYA,MAAY,KAYxB,IEvCYyC,GCDAC,GHwCC,GAAiB,SAAgEC,EAAwCpG,GAC9H,MAAkC,mBAASyD,EAAa4C,MAAvDC,EAAY,KAAEC,EAAe,KAC9BjL,E,SIxB6G8K,EAAwCpG,GAA7J,WACQ,EAAoB,mBAASA,GAA5BM,EAAK,KAAEtE,EAAQ,KAChB,EAA8B,oBAAS,GAA1BwK,GAAF,KAAe,MAC1B,EAAgC,oBAAS,GAA3BC,GAAF,KAAgB,MAC5BnL,EAAU,mBAAQ,WAAM,WAAI,EAAQ8K,EAAS,EAAa7O,KAAKyI,EAAchE,EAAU,OAAM,IAyBnG,OAxBA,qBAAU,WAOR,YANuDtF,IAAnD,keAAYgQ,qCAIdzN,OAAO0N,aAAerL,EAAQmF,WAAYxH,OAAO2N,SAAWzL,EAAQlC,OAAOqC,QAAUA,GAEhF,WACLA,EAAQuG,QACLhE,MAAM1C,EAAO7B,UAEjB,CAACgC,IAaGkE,OAAOqH,OAAO,CACnB7E,KAbW,SAAOL,EAAqBpG,GAAyB,qC,kDAEhE,OADAiL,GAAc,GACd,GAAMlL,EAAQ0G,KAAKL,EAAapG,GAAauL,SAAQ,WACnDN,GAAc,O,cADhB,S,YAYA3E,MAAOvG,EAAQuG,MAAM7I,KAAKsC,GAC1BiB,SATe,SAAOC,GAAc,qC,kDAEpC,OADAiK,GAAe,GACf,GAAMnL,EAAQiB,SAASC,GAAQsK,SAAQ,WACrCL,GAAe,O,cADjB,S,YAQAnG,MAAK,EACLyG,UAAWzL,EAAQyL,UACnBC,WAAY1L,EAAQ0L,WACpBC,YAAa3L,EAAQ2L,YACrBtF,YAAarG,EAAQ2C,iBACrBzC,QAASF,EAAQE,QACjB2C,KAAM7C,EAAQ6C,KACdoD,KAAMjG,EAAQiG,OJhBA2F,CCyHoB,SAAgEd,GACpG,OAAO,SAAC1I,EAAWlB,GACjB,OAAO4J,EAAQf,GAAmB3H,EAAWlB,GAAuCA,ID3H3D2K,CAAuBf,GAAUpG,GACtDM,EAAQhF,EAAQgF,MAChBnC,EAAO7C,EAAQ6C,KACfiJ,EAAa,mBAAQ,WACzB,IACE,OAAO9G,EAAM+C,SAAS/C,EAAM2C,QAAQ9E,IACpC,MAAO7I,GACP,OAAQ,KAET,CAAC6I,EAAMmC,IACJ+G,EAAW,mBAAQ,WACvB,IACE,OAAO7H,OAAO/J,KAAK6K,EAAM6C,cAAclI,QAAO,SAAAnD,GAAQ,OAAAwI,EAAM6C,aAAarL,KAAUqG,KAAMd,KAAI,SAAAoF,GAAU,OAAAnC,EAAM2C,QAAQR,MACrH,MAAOnN,GACP,MAAO,MAER,CAAC6I,EAAMmC,IACJgH,EAAQ,mBAAQ,WACpB,IACE,OAAO9H,OAAO/J,KAAK6K,EAAM8C,WAAWnI,QAAO,SAAAnD,GAAQ,OAAAwI,EAAM8C,UAAUtL,KAAUqG,KAAMd,KAAI,SAAAoF,GAAU,OAAAnC,EAAM2C,QAAQR,MAC/G,MAAOnN,GACP,MAAO,MAER,CAAC6I,EAAMmC,IAEJiH,EAAY,SAACC,GACjB,OAAOhI,OAAO/J,KAAK6K,EAAM2C,SAAShI,QAAO,SAAAwH,GAAU,OAAAnC,EAAM2C,QAAQR,KAAYnC,EAAMgD,QAAQkE,MAAW,IAqBlGC,EAAS,SAAO3P,GAAY,0C,kDAChC,SAAMwD,EAAQiB,SAAS,CACrBuB,KAAM+E,EAAgB2C,OACtBzH,QAASjG,K,cAFX,S,YAwCI+J,EAAQ,qD,kDAEZ,OADA1G,EAAOpC,KAAK,WACZ,GAAMuC,EAAQuG,S,cAAd,S,YAsBF,OATA,qBAAU,WACJvG,EAAQgF,MAAMkD,cAAmC9M,IAAxB4E,EAAQqG,YACnC4E,EAAgB9C,EAAaiE,WACIhR,IAAxB4E,EAAQqG,YACjB4E,EAAgB9C,EAAakE,MAE7BpB,EAAgB9C,EAAa4C,QAE9B,CAAC/K,EAAQgF,MAAOhF,EAAQqG,cACpB,CACLW,QAtCc,SAAOxK,EAAc8P,GAAY,0C,wDAG7C,O,sBADAzM,EAAOpC,KAAK,aAAc6O,GAC1B,GAAMtM,EAAQ0G,KAAK4F,I,OAEnB,OAFA,SACAzM,EAAOpC,KAAK,qBAAsBjB,GAClC,GAAM2P,EAAO3P,I,cAAb,SACAqD,EAAOpC,KAAK,YAAa6O,G,aAGzB,O,WADAzM,EAAO7B,MAAM,GACb,GAAMuI,K,OACN,MADA,SACM,E,yBA6BRkF,UAAWzL,EAAQyL,UACnBC,WAAY1L,EAAQ0L,WACpBC,YAAa3L,EAAQ2L,YACrBX,aAAY,EACZhG,MAAK,EACLsH,KAAMtM,EAAQqG,YACdE,MAAK,EACLrG,QAASF,EAAQE,QACjB2C,KAAI,EACJoD,KA/BW,SAAOkB,GAAc,0C,yDAChCtH,EAAOpC,KAAK,WACR0J,KAAUnH,EAAQgF,MAAM8C,WAAaX,KAAUnH,EAAQgF,MAAM6C,aAC/D,GAAM7H,EAAQiB,SAAS,CACrBuB,KAAM+E,EAAgBoD,gBACtBlI,QAAS0E,KAHT,M,cACF,S,aAKA,SAAMnH,EAAQiG,KAAKkB,I,OAAnB,S,mCAwBFc,MAvEY,qD,kDACZ,SAAMjI,EAAQiB,SAAS,CACrBuB,KAAM+E,EAAgB8C,S,cADxB,S,YAuEAkC,MAnEY,qD,kDACZ,SAAMvM,EAAQiB,SAAS,CACrBuB,KAAM+E,EAAgBgD,S,cADxB,S,YAmEAtJ,SAAUjB,EAAQiB,SAClBuL,SAhEe,SAAOhQ,GAAY,0C,kDAClC,SAAMwD,EAAQiB,SAAS,CACrBuB,KAAM+E,EAAgBmD,UACtBjI,QAASjG,K,cAFX,S,YAgEAiQ,MA3DY,SAAOjQ,GAAY,0C,kDAC/B,SAAMwD,EAAQiB,SAAS,CACrBuB,KAAM+E,EAAgBiD,OACtB/H,QAASjG,K,cAFX,S,YA2DAkQ,WAhGiB,SAACC,G,MACZnQ,EAAmC,kBAAbmQ,EAAwBA,EAAW3M,EAAQgF,MAAMgD,QAAQ2E,GAC/ExF,EAAqG,QAA/F,EAAuBjD,OAAOsF,QAAQxJ,EAAQgF,MAAM2C,SAASiF,MAAK,SAAC,GAAQ,K,IAAEC,EAAC,KAAM,OAAArQ,IAASqQ,YAAE,eAAG,GAC9G,YAAezR,IAAX+L,EACKK,EAAWsF,OAEhB3F,KAAUnH,EAAQgF,MAAM8C,UACnBN,EAAWuF,GACT5F,KAAUnH,EAAQgF,MAAM6C,aAC1BL,EAAWwF,MAEXxF,EAAWsF,QAsFpBhB,WAAU,EACVC,SAAQ,EACRC,MAAK,EACLC,UAAS,EACTgB,WAzGiB,SAAOf,EAAkBhL,GAAc,0C,kDACxD,SAAMlB,EAAQiB,SAAQ,OAAMC,GAAM,CAAEiG,OAAQ8E,EAAUC,O,cAAtD,S,8BKzEJ,2D,OACE,EAAAgB,KAAO,E,+HADkC,M,CAAAC,G,2BCC9BC,GAAb,+MACE1F,UAAY,EADd,EAEED,UAAY,EAFd,EAGEyF,KAAO,EAHT,EAIEG,UAAY,EAJd,EAKEC,OAAS,EALX,EAMEC,KAA6B,GAN/B,EAOEC,SAAiB,GAPnB,EAQEC,UAAkB,GARpB,EASEC,WAAqB,GATvB,EAUEC,YAVF,IAWEC,KAAiB,GAXnB,YAAkCT,G,4BJCtBvC,O,yBAAAA,I,2BAAAA,I,cAAAA,Q,cCDAC,O,iBAAAA,I,iBAAAA,I,eAAAA,I,sBAAAA,Q,KIHL,IAAMgD,GAAqC,CAChDC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,GAAI,GACJC,GAAI,EACJC,GAAI,GACJC,GAAI,ICNOC,GAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,SAAA5J,GAC1C,OALgC,SAAC4J,GACjC,OAAuB,KAAhBA,EAAKC,OAIRC,CAAWF,IACb5J,EAAMsI,OAAS,GACRyB,GAAYC,GAAkBhK,KAEhCA,ICRIiK,GAAuB,SAACL,GACnC,OAAIA,EAAKM,OAASrE,GAAKsE,OAAyB,IAAhBP,EAAKC,SAG5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG1I,SAASyI,EAAKC,SAIlCO,GAAmB,SAAC,GAAD,IAAGR,EAAH,EAAGA,KAAH,OAAc,SAAA5J,GAC5C,GAAIiK,GAAaL,GAAO,CACtB,IAAMtB,EAAStI,EAAMsI,OAASO,GAAWe,EAAKC,QAC9C,GAAIvB,EAAS,GACX,MAAM,IAAIrT,MAAM,oCAElB,OAAO8U,GAAYC,GAAkB,6BAAKhK,GAAN,IAAasI,aAEnD,OAAOtI,IChBIqK,GAAmB,SAACT,GAC/B,OAAuB,KAAhBA,EAAKC,QAAiC,KAAhBD,EAAKC,QAGvBS,GAAe,SAAC,GAAD,IAAGV,EAAH,EAAGA,KAAMW,EAAT,EAASA,SAAT,OAAwB,SAAAvK,GAClD,GAAIqK,GAAST,GAAO,CAClB,QAAiBxT,IAAbmU,EACF,MAAM,IAAItV,MAAM,mCAElB,IAAMqT,EAAStI,EAAMsI,QAAUiC,EAAW1B,GAAWe,EAAKC,SAAWhB,GAAWe,EAAKC,SACrF,GAAIvB,EAAS,GACX,MAAM,IAAIrT,MAAM,oCAElB,OAAO8U,GAAYC,GAAkB,6BAAKhK,GAAN,IAAasI,aAEnD,OAAOtI,ICZIuD,GAAoB,SAAC,GAAD,IAAGqG,EAAH,EAAGA,KAAH,OAAc,SAAA5J,GAC7C,OALmC,SAAC4J,GACpC,OAAuB,IAAhBA,EAAKC,OAIRW,CAAcZ,IAChB5J,EAAMqI,YAAc,EACb0B,GAAYC,GAAkBhK,KAEhCA,ICLIyK,GAAiB,SAAC,GAAD,IAAGb,EAAH,EAAGA,KAAH,OAAc,SAAA5J,GAC1C,OALgC,SAAC4J,GACjC,OAAuB,KAAhBA,EAAKC,OAIRa,CAAWd,GACNG,GAAYC,GAAkBhK,IAEhCA,ICJI/F,GAAmB,WAAmBiN,GAAnB,IAAG0C,EAAH,EAAGA,KAAM3P,EAAT,EAASA,OAAT,OAAgC,SAAA+F,GAC9D,GALkC,SAAC4J,GACnC,OAAuB,IAAhBA,EAAKC,OAIRc,CAAaf,GAAO,CACtB,QAAexT,IAAX6D,EACF,MAAM,IAAIhF,MAAM,iCAElB,GAAIgF,IAAWiN,EACb,MAAM,IAAIjS,MAAM,wBAGlB,OADA+K,EAAMkI,KAAOjO,EACN8P,GAAY/J,GAErB,OAAOA,ICXI4K,GAAmB,SAAC,GAAD,IAAGhB,EAAH,EAAGA,KAAH,OAAc,SAAA5J,GAC5C,OALkC,SAAC4J,GACnC,OAAuB,IAAhBA,EAAKC,QAAgBD,EAAKM,OAASrE,GAAKsE,MAI3CU,CAAajB,IACf5J,EAAMsI,OAAS,EACRyB,GAAYC,GAAkBhK,KAEhCA,ICcH8K,GAAkD,SAAlDA,EAAkD5D,GAAQ,OAAI,SAAA9J,GAClE,GAAIA,EAAUsL,WAAWxB,GAAUlP,QRXd,EQYnB,MAAM,IAAI/C,MAAJ,uBAA0BmI,EAAU4F,QAAQkE,GAA5C,wBRZa,EQYb,WAER,IAAM0C,EAAOxM,EAAUoL,SAAStQ,QAChC,YAAa9B,IAATwT,EACKkB,EAAa5D,EAAb4D,CAAA,6BAA4B1N,GAA5B,IAAuCoL,SAAU9E,GAAQtG,EAAUqL,WAAYA,UAAW,OAEjGrL,EAAUsL,WAAWxB,GAAU/O,KAAKyR,GAC7B,gBAAKxM,MA2BV2N,GAA4B,SAAC,EAAU7D,GAAX,IAAG0C,EAAH,EAAGA,KAAH,OAAwB,SAAA5J,GAGxD,OAFAA,EAAMyI,UAAUtQ,KAAKyR,GACrB5J,EAAM0I,WAAWxB,GAAYlH,EAAM0I,WAAWxB,GAAUvM,QAAO,gBAAGuP,EAAH,EAAGA,KAAML,EAAT,EAASA,OAAT,QAAwBK,IAASN,EAAKM,MAAQL,IAAWD,EAAKC,WACtH7J,IAkBIgK,GAAiC,SAAA5M,GAC5C,IAAM4N,GAAgB5N,EAAU8K,KAAO9K,EAAUsF,UAAYtF,EAAUiL,WAAajL,EAAUsF,UAC9F,OAAO,6BAAKtF,GAAZ,IAAuB8K,KAAM8C,KAGlBjB,GAA2B,SAA3BA,EAA2B3M,GAUtC,OATKA,EAAUmL,KAAKnL,EAAU8K,OCtFL,SAAC+C,EAAiBC,GAC3C,IAAIC,EAAMC,IACNC,EAAQ,EAmBZ,OAlBAH,EAAMzQ,SAAQ,WAAmB6Q,GAAO,IAAvBpB,EAAsB,EAAtBA,KAAML,EAAgB,EAAhBA,OACjB0B,EAAO,EACX,GAAIrB,IAASrE,GAAKsE,OAAoB,IAAXN,EACzB,MAAO,CAAC,EAAGyB,IAEXC,EADoB,KAAX1B,EACFoB,EAAU,GACG,KAAXpB,EACFoB,EAAU,GACG,KAAXpB,EACF,GAEAoB,EAAUpC,GAAWgB,IAEnBsB,IACTA,EAAMI,EACNF,EAAQC,MAGL,CAACH,EAAKE,GDiE0BG,CAAYpO,EAAUkL,OAAQlL,EAAUsL,WAAWtL,EAAU8K,OAAO,GAAK,KAC9G9K,EAAUwL,KAAKzQ,KAAf,UAAuBiF,EAAU4F,QAAQ5F,EAAU8K,MAAnD,2BAA2E9K,EAAUsL,WAAWtL,EAAU8K,MAAMnL,KAAI,SAAA6M,GAAI,gBACnH/D,GAAK+D,EAAKM,OADyG,OACjGN,EAAKC,WAC1BnI,KAAK,OACPtE,EAAUmL,KAAKnL,EAAU8K,OAAQ,GAE/BhJ,OAAO/J,KAAKiI,EAAUmL,MAAMvQ,SAAWoF,EAAU4F,QAAQhL,OAAS,GAAKoF,EAAU8F,UACnF9F,EAAUuL,OAAS,CAAC,EAAG,EAAG,EAAG,GAAGhO,QAAO,SAAA2Q,GAAC,OAAKlO,EAAUmL,KAAK+C,MAAI,IAE9DlO,EAAUmL,KAAKnL,EAAU8K,MACpB6B,EAAYC,GAAkB,6BAAK5M,GAAN,IAAiB8K,KAAM9K,EAAU8K,SAE9D,6BAAK9K,GAAZ,IAAuB8K,KAAM9K,EAAU8K,QAI9BuD,GAA8D,SAACrO,EAAWlB,GACrF,IAAMiG,EAASjG,EAAOiG,OACtB,QAAe/L,IAAX+L,EACF,MAAM,IAAIlN,MAAM,2BASlB,OAAQiH,EAAOsB,MACb,KAAK+E,EAAgBgD,MACnB,OAhF4B,SAACnI,IACjCA,EAAS,6BACJA,GADI,IAEPoL,SAAU,GACVC,UAAW,GACXC,WAAY,GACZJ,OAAQ,EACRD,UAAW,EACXH,KAAM,EACNK,KAAM,GACNK,KAAM,CAAC,gBACPD,YAAQvS,KAEAoS,SAAW9E,GApCH,WAElB,IADA,IAAMgI,EAAa,GACVxB,EAAO,EAAGA,EAAO,EAAGA,IAC3B,IAAK,IAAIL,EAAS,EAAGA,GAAU,GAAIA,IACjC6B,EAAKvT,KAAK,CAAE+R,OAAML,WAGtB,OAAO6B,EA6BsBC,IAC7B,IAAK,IAAIpW,EAAK,EAAGA,EAAK6H,EAAU4F,QAAQhL,OAAQzC,IAAM,CACpD6H,EAAUsL,WAAWnT,GAAM,GAC3B,IAAK,IAAI+V,EAAI,EAAGA,ERvCG,EQuCUA,IAC3BlO,EAAY0N,GAAavV,EAAbuV,CAAiB1N,GAGjC,OAAO,gBAAKA,GA4DDwO,CAAaxO,GACtB,KAAKwI,GAAkBiG,UACrB,OArD4E,SAAC3E,EAAUzJ,GAAX,OAAuB,SAAAL,GAAc,IAC7GwM,EAASnM,EAATmM,KACFkC,EAAO,UAAMjG,GAAK+D,EAAKM,OAAhB,OAAwBN,EAAKC,QAC1C,QAAgHzT,IAA5GgH,EAAUsL,WAAWxB,GAAUU,MAAK,gBAAGsC,EAAH,EAAGA,KAAML,EAAT,EAASA,OAAT,OAAsBK,IAASN,EAAKM,MAAQL,IAAWD,EAAKC,UAClG,MAAM,IAAI5U,MAAJ,UAAamI,EAAU4F,QAAQkE,GAA/B,4BAA4D4E,IAEpE,GAAI1O,EAAU8K,OAAShB,EACrB,MAAM,IAAIjS,MAAM,iBAElB,OAAOmO,GAAO,WAAP,GACL0H,GAAa5D,IADR,oBAEF,CAAC6D,GAAiBpB,GAAMS,GAAQE,GAAI/G,GAASkH,GAAMxQ,GAAQ2Q,IAAQ7N,KAAI,SAAAgP,GAAQ,OAAIA,EAAStO,EAASyJ,QAFnG9D,CAGLhG,IAyCS4O,CAXM,WACf,IAAMzW,EAAK6H,EAAU2F,SAAS3F,EAAUuF,QAAQR,IAChD,QAAW/L,IAAPb,EACF,MAAM,IAAIN,MAAM,oBAElB,OAAOM,EAMe2R,GAAYhL,EAAOuB,QAAhCuO,CAAyCC,IAAU7O,IAC5D,KAAKwI,GAAkBsG,IACrB,OAAO,6BAAK9O,GAAZ,IAAuB8F,SAAS,IAEpC,OAAO9F,G,SErHH+O,GAAiB,SAACvC,GACtB,MAAO,CAAC,EAAG,EAAG,GAAI,IAAIzI,SAASyI,EAAKC,SAGzBuC,GAAW,SAACpM,EAAqBkI,GAC5C,IAAMgD,EAAQlL,EAAM0I,WAAWR,GACzBI,EAAStI,EAAMsI,OACf+D,EAAcnB,EAAMvQ,OAAOsP,IAAcqC,MAAK,SAAC3I,EAAG4I,GAAJ,OAAU1D,GAAW0D,EAAE1C,QAAUhB,GAAWlF,EAAEkG,WAC5F2C,EAAStB,EAAMtD,MAAK,SAAA6E,GAAC,OAAiB,KAAbA,EAAE5C,UACjC,QAAezT,IAAXoW,GACa,KAAXlE,GAAiB+D,EAAYrU,OAAS,EACxC,MAAO,CACLwF,KAAMoI,GAAkBiG,UACxBpO,QAAS,CACPmM,KAAM4C,IAV8D,qBAgBzDH,GAhByD,IAgB5E,2BAAgC,CAAC,IAAtBzC,EAAqB,QAC9B,GAAItB,EAASO,GAAWe,EAAKC,SAAW,GACtC,MAAQ,CACNrM,KAAMoI,GAAkBiG,UACxBpO,QAAS,CACPmM,UArBoE,8BA0B5E,IA1B4E,EA0BtE8C,EAAUxB,EAAMvQ,OAAO0P,IA1B+C,eA2BzDqC,EAAQJ,MAAK,SAAC3I,EAAG4I,GAAJ,OAAUA,EAAE1C,OAASlG,EAAEkG,WA3BqB,IA2B5E,2BAAgE,CAAC,IAAtDD,EAAqD,QAC9D,GAAItB,EAASO,GAAWe,EAAKC,SAAW,GACtC,MAAQ,CACNrM,KAAMoI,GAAkBiG,UACxBpO,QAAS,CACPmM,OACAW,UAAU,KAjC0D,8BAuC1E,IAAMX,EAAOsB,EAAMtD,KAAKuE,IACxB,QAAa/V,IAATwT,EACF,MAAO,CACLpM,KAAMoI,GAAkBiG,UACxBpO,QAAS,CACPmM,OACA3P,OAAQ+F,EAAM+C,SAASW,GAAQ1D,EAAMgD,QAAQrI,QAAO,SAACnD,EAAMjC,GAAP,OAAeyK,EAAMuI,KAAKhT,IAAOA,IAAO2S,MAAO,MA7C/B,qBAkDzDwE,EAAQJ,MAAK,SAAC3I,EAAG4I,GAAJ,OAAU5I,EAAEkG,OAAS0C,EAAE1C,WAlDqB,IAkD5E,2BAAgE,CAAC,IAAtDD,EAAqD,QAC9D,GAAItB,EAASO,GAAWe,EAAKC,SAAW,GACtC,MAAQ,CACNrM,KAAMoI,GAAkBiG,UACxBpO,QAAS,CACPmM,OACAW,UAAU,KAxD0D,mDA6DzDW,GA7DyD,IA6D5E,2BAA0B,CAAC,IAAhBtB,EAAe,QACxB,GAAItB,EAASO,GAAWe,EAAKC,SAAW,GACtC,MAAQ,CACNrM,KAAMoI,GAAkBiG,UACxBpO,QAAS,CACPmM,OACAW,UAAU,KAnE0D,8BAwE5E,MAAM,IAAItV,MAAM,yBC7EZ0X,GAAiBC,wBAA6E,MAevFC,GAAa,WACxB,IAAM7R,EAAyE8R,qBAAWH,IAC1F,GAAgB,OAAZ3R,EACF,MAAM,IAAI/F,MAAM,oEAElB,OAAO+F,GCtBI+R,GAA0B,WAAO,IAAD,EAYvCF,KAVF7M,EAFyC,EAEzCA,MACA/D,EAHyC,EAGzCA,SACAgM,EAJyC,EAIzCA,WACAnB,EALyC,EAKzCA,WACAC,EANyC,EAMzCA,SACAiG,EAPyC,EAOzCA,SACAC,EARyC,EAQzCA,YACAjU,EATyC,EASzCA,MACAkU,EAVyC,EAUzCA,SACAC,EAXyC,EAWzCA,eAXyC,EAafC,mBAAS,GAbM,mBAapCnT,EAboC,KAa5BoT,EAb4B,OAcTD,oBAAS,GAdA,mBAcpCE,EAdoC,KAczBC,EAdyB,KAerCC,EAAwB,IAApBxN,EAAMqI,UAAkB,IAAM,IAClCoF,EAAc,SAACzY,GACnBkY,EAASlY,EAAEuC,UAEPmW,EAAY,SAAC9D,GAAD,6BAAgB,4BAAAjG,EAAA,yDAC1BzH,EAAwB,CAC5BsB,KAAMoI,GAAkBiG,UACxBpO,QAAS,CACPmM,OACAW,SAAU+C,EACVrT,WAGA+F,EAAMkI,OAASpB,EATa,gCAUxB7K,EAASC,GAAQvG,MAAK,kBAAMuX,EAAS,OAAK3P,MAAMkQ,GAVxB,iCAWrB1G,EAAS5F,SAASnB,EAAMgD,QAAQhD,EAAMkI,OAXjB,gCAYxBD,EAAWjI,EAAMkI,KAAMhM,GAAQvG,MAAK,kBAAMuX,EAAS,OAAK3P,MAAMkQ,GAZtC,4CAe5BE,EAAa,SAACzG,GAAD,uBAAiClH,EAAM0I,WAAWxB,UAAlD,aAAiC,EAA4BnK,KAAI,SAAA6M,GAAI,OACtF,4BAAQgE,IAAmB,GAAdhE,EAAKC,OAAcD,EAAKM,KAAM2D,QAASH,EAAU9D,IAC3D/D,GAAK+D,EAAKM,MADb,IACqBN,EAAKC,YAOtBiE,EAAK,uCAAG,sBAAAnK,EAAA,sEACN1H,EAAS,CACbuB,KAAMoI,GAAkBsG,MACvB3O,MAAMkQ,GAHG,2CAAH,qDAKX,OACE,yBAAKM,MAAO,CAAEC,cAAe,QAC3B,6BACE,4BAAKhO,EAAMsI,QACX,4BAAKtI,EAAMgD,QAAQhD,EAAMkI,MAAO,IAAhC,UACW,KAAVlP,GAAgB,yBAAK+U,MAAO,CAAEE,MAAO,QAAUjV,QAC9B5C,IAAjB4J,EAAM2I,QAAyC,OAAjB3I,EAAM2I,QAAmB,0CAAgB3I,EAAMgD,QAAQhD,EAAM2I,QAC1F,4BAAQkF,QAASC,GAAjB,UAED9N,EAAMgD,QAAQjG,KAAI,SAACvF,EAAMjC,GAAP,OACjB,0BACEqY,IAAKpW,EACLqW,QAAS,kBAAMR,EAAU9X,IACzBwY,MAAO,CACLG,WAAYlO,EAAMkI,OAAS3S,EAAK,OAAS,SACzC4Y,mBAAoBnO,EAAMuI,KAAKhT,GAAM,eAAiB,SAEzDiC,EAPD,IAOQgW,MAGV,6BAEwB,IAApBzG,EAAS/O,OACL2V,EAAW7G,GA/BhBkG,EAAW,4BAAQa,QAAS,kBAAMZ,GAAY,KAAnC,QAAiDjN,EAAMgD,QAAQmK,IAC7EQ,EAAWR,IAkCX,wCACWlT,GAEX,4BAAQ4T,QAAS,kBAAMN,GAAcD,KAClCA,EAAY,IAAM,MAGvB,6BACGtN,EAAM4I,KAAKwF,QAAQ7K,UAAUxG,KAAI,SAACsR,EAAG/C,GAAJ,OAAU,yBAAKsC,IAAKtC,GAAI+C,S,s0DCrFlE,IAIM,GAAQ,CACZC,aAAc,KAAUC,KACxBvI,aAAc,KAAU6D,OAAO2E,WAC/BC,SAAU,KAAUC,QAAQ,KAAUH,KAAKC,YAAYA,WACvDG,SAAU,KAAUD,QAAQ,KAAUE,OAG3B,GAAyE,SAAC,G,IAAEN,EAAY,eAAEtI,EAAY,eAAEyI,EAAQ,WAAE,IAAAE,gBAAQ,IAAG,IAAC,GAAO,GAAO,GAAK,EAC5J,OACE,yBAAKZ,MAAO,CAAEc,MAAO,QAASC,OAAQ,QAASC,SAAU,SAAUC,SAAU,aAC1EV,EACQ,OAARG,QAAQ,IAARA,OAAQ,EAARA,EAAUL,QAAQ7K,UAAUxG,KAAI,SAACkS,EAAO3D,GACvC,IAhBY4D,EAAcC,EAAiBC,EAgBrC/D,EAAQoD,EAASzW,OAAS,EAAIsT,EACpC,OAAO,yBACLsC,IAAKtC,EACLyC,MAAK,aACS,OAARY,QAAQ,IAARA,OAAQ,EAARA,EAAWtD,IAAS,CAAE2C,cAAe,QAAW,CAAEqB,eAAgB,SAAUC,WAAY,WAAU,CACtGC,QAAS,OACTT,OAAQ,QACRD,MAAO,QACPW,KAAmC,MAAxBxJ,EAAeqF,GAAY,IACtC2D,SAAU,cAzBFE,EA0BM,GA1BQC,EA0BH,CAAC,QA1BmBC,EA0BV,cA1BU,IAAAA,MAAA,QAA2C,CAC5FK,WAAYN,EAAMpS,KAAI,SAAAyG,GAAK,OAAG0L,EAAI,KAAK1L,EAAC,IAAI4L,KAAQ1N,KAAK,SA2BhDuN,QAOX,GAAgBS,UAAY,G,ICpCf,GAAgB,WAC3B,OAAO,aAAqB,CAC1BC,aAAc,CAAC,KAAQ,MACvB5B,MAAO,UACP6B,UAAW,OCFTF,GAAY,CAChBjB,SAAU,KAAUF,KACpBsB,QAAS,KAAUjB,KAAKJ,WACxBsB,KAAM,KAAUjG,QAGL,GAAqE,SAACsF,G,MACjF,OACE,yBAAKpB,MAAO,CAAEiB,SAAU,aACrBG,EAAMV,SACNU,EAAMU,SAAW,kBAACE,GAAA,EAAgB,CAACD,KAAgB,QAAZ,EAAEX,EAAMW,YAAI,QAAI,GAAI/B,MAAO,CACjEiB,SAAU,WACVgB,IAAK,MACLR,KAAM,MACNS,WAAY,GACZC,YAAa,QAMrB,GAAQR,UAAYA,G,ICnBP,GAA2G,SAAC,G,IAAE1N,EAAO,UAAE0E,EAAU,aACtI,EAAkB,mBAAS,MAA1BlP,EAAI,KAAE2Y,EAAO,KACd,EAAkB,mBAAS,IAA1B7I,EAAI,KAAE8I,EAAO,KACd,EAAoB,mBAAS,IAA5BpX,EAAK,KAAEkU,EAAQ,KAEtB,OACE,kBAACmD,GAAA,EAAK,CAACC,UAAW,EAAGvC,MAAO,CAAEwC,QAAS,cACrC,kBAACC,GAAA,EAAI,CAACC,WAAS,EAACC,QAAQ,WAAWrI,UAAU,SAASsI,QAAS,GAC7D,kBAACH,GAAA,EAAI,CAACI,MAAI,GACR,kBAACC,GAAA,EAAU,CAACC,QAAQ,MAAI,wBAE1B,kBAACN,GAAA,EAAI,CAACI,MAAI,GACR,kBAACG,GAAA,EAAS,CAACC,MAAM,YAAYpW,MAAOpD,EAAMmI,SAAU,SAAC,G,IAAY/E,EAAK,eAAS,OAAAuV,EAAQvV,IAAQqW,WAAS,KAE1G,kBAACT,GAAA,EAAI,CAACI,MAAI,GACR,kBAACG,GAAA,EAAS,CAACC,MAAM,YAAYpW,MAAO0M,EAAM3H,SAAU,SAAC,G,IAAY/E,EAAK,eAAS,OAAAwV,EAAQxV,IAAQqW,WAAS,KAE/F,KAAVjY,GAAgB,kBAACkY,GAAA,EAAK,CAACC,SAAS,SAASnY,GAC1C,kBAACwX,GAAA,EAAI,CAACI,MAAI,EAACH,WAAS,EAACC,QAAQ,YAC3B,kBAAC,GAAO,CAACb,QAASnJ,GAChB,kBAAC0K,GAAA,EAAM,CACLnD,MAAM,UACN6C,QAAQ,YACRO,SAAmB,KAAT7Z,GAAwB,KAAT8P,GAAeZ,EACxCmH,QApBC,kF,uBAA2B,SAAM7L,EAAQxK,EAAM8P,GAAM/J,OAAM,SAACvE,GAAiB,OAAAkU,EAASlU,EAAMzB,a,OAAjE,4BAoBf,aC3Bd,GAA+B,WAAM,OAChD,kBAAC+Z,GAAA,EAAO,KACN,yBAAKvD,MAAO,CAAEc,MAAO,OAAQC,OAAQ,QAAUyC,QAAQ,aACrD,0BACE/D,EAAE,6RAIJ,0BAAMA,EAAE,kDCRD,GAA8B,WAAM,OAC/C,kBAAC8D,GAAA,EAAO,KACN,yBAAKvD,MAAO,CAAEc,MAAO,OAAQC,OAAQ,QAAUyC,QAAQ,aACrD,0BACE/D,EAAE,4hBAMJ,0BAAMA,EAAE,kDCgBD,GAAO,SAA+D,G,IAAElG,EAAI,OAAEtH,EAAK,QAAEuB,EAAK,QAAErG,EAAO,UAAE2C,EAAI,OAAEoD,EAAI,OAAEgC,EAAK,QAAEsE,EAAK,QAAEE,EAAK,QAAED,EAAQ,WAAEE,EAAU,aAAEf,EAAW,cAC5K,EAAoB,mBAAS,IAA5B3N,EAAK,KAAEkU,EAAQ,KAChB,EAAkB,mBAAS,IAA1B1V,EAAI,KAAE2Y,EAAO,KACd,EAAoC,wBAA8B/Z,GAAjEob,EAAa,KAAEC,EAAgB,KAChCC,EAAQ,OAAAC,GAAA,KAURC,EAAmB,WACvBzB,EAAQ,IACRsB,OAAiBrb,IA0Cbyb,EAAiB,SAAC1P,EAAgB3K,GACtC,OAAI2K,IAAWnC,EAAMqB,YACT7J,EAAI,eACN2K,KAAUnC,EAAM4C,WACdpL,EAAI,kBACL2K,KAAUnC,EAAM6C,aACfrL,EAAI,yBAAyBwI,EAAM2C,QAAQ3C,EAAM6C,aAAaV,IAC/DA,KAAUnC,EAAM8C,UACftL,EAAI,uBAAuBwI,EAAM2C,QAAQ3C,EAAM8C,UAAUX,IAE/DnC,EAAMiD,MAAMd,GACJ3K,EAAI,oBAEJA,EAAI,aAKpB,OACE,kBAAC6Y,GAAA,EAAK,CAACC,UAAW,EAAGvC,MAAO,CAAEwC,QAAS,YAAa1B,MAAO,UACzD,kBAAC2B,GAAA,EAAI,CAACC,WAAS,EAACC,QAAQ,WAAWrI,UAAU,SAASsI,QAAS,GAC7D,kBAACH,GAAA,EAAI,CAACI,MAAI,GACR,kBAACC,GAAA,EAAU,CAACC,QAAQ,M,SAAYxJ,IAElC,kBAACkJ,GAAA,EAAI,CAACI,MAAI,GACR,kBAACJ,GAAA,EAAI,CAACC,WAAS,EAACC,QAAQ,gBAAgBpB,WAAW,YACjD,kBAACkB,GAAA,EAAI,CAACI,MAAI,GACR,kBAACC,GAAA,EAAU,CAACC,QAAQ,MAAI,YAE1B,kBAACN,GAAA,EAAI,CAACI,MAAI,GACR,kBAACkB,GAAA,EAAU,CAAChC,KAAK,SAASiC,MAAM,4BAA4BlE,QAAS,WAAM,OAAA4D,GAAiB,KAC1F,kBAAC,GAAS,OAEZ,kBAACK,GAAA,EAAU,CAAChC,KAAK,SAASiC,MAAM,gBAAgBlE,QAhFnC,sD,mDACvB,SAAMpG,EAAM,MAAiBlK,OAAM,SAACvI,GAAa,OAAAkY,EAASlY,EAAEuC,a,cAA5D,S,aAgFY,kBAAC,GAAQ,SAIf,kBAACya,GAAA,EAAO,MACR,kBAACC,GAAA,EAAI,KACF/S,OAAOsF,QAAQxE,EAAM2C,SAAS5F,KAAI,SAAC,G,IAACxH,EAAE,KAAEiC,EAAI,KACrCyW,EAAS1Y,IAAOyK,EAAMqB,aAAe,CAACmB,EAAWwF,MAAOxF,EAAWuF,IAAI5G,SAASuG,EAAWlQ,IAC7Fka,EAAMQ,QAAQC,QAAQC,KACtBpS,EAAMiD,MAAM1N,GAAMmc,EAAMQ,QAAQG,QAAQD,KAAOV,EAAMQ,QAAQI,KAAKC,UACtE,OACE,kBAACC,GAAA,EAAQ,CACP5E,IAAKrY,EACLwc,MAAOF,EAAetc,EAAIiC,GAC1BuW,MAAO,CAAEE,MAAK,IACd,kBAACwE,GAAA,EAAY,KACX,0BAAM1E,MAAO,CAAEE,MAAK,IAhFtB,SAAC9L,EAAgB3K,GAC/B,OAAI2K,KAAUnC,EAAM4C,WACX,kBAAC4N,GAAA,EAAI,CAACI,MAAI,EAACmB,MAAM,aACtB,kBAACW,GAAA,EAAU,OAEJ1S,EAAMqB,cAAgBc,EACxB,kBAACqO,GAAA,EAAI,CAACI,MAAI,EAACmB,MAAM,QACtB,kBAAC,KAAK,OAECrK,EAAWlQ,KAAUgL,EAAWsF,OACtC9H,EAAMiD,MAAMd,GACN,kBAACqO,GAAA,EAAI,CAACI,MAAI,EAACmB,MAAM,gBACtB,kBAAC,KAAY,OAGR,kBAACvB,GAAA,EAAI,CAACI,MAAI,EAACmB,MAAM,oBACtB,kBAACY,GAAA,EAAM,OAGFjL,EAAWlQ,KAAUgL,EAAWwF,MAClC,kBAACwI,GAAA,EAAI,CAACI,MAAI,EAACmB,MAAM,mBACtB,kBAACa,GAAA,EAAa,OAEPlL,EAAWlQ,KAAUgL,EAAWuF,GAClC,kBAACyI,GAAA,EAAI,CAACI,MAAI,EAACmB,MAAM,aACtB,kBAAC,KAAK,YAFH,EA0DYc,CAAQtd,EAAIiC,KAGjB,kBAACsb,GAAA,EAAY,KACVtb,IAEA0D,GAAW,CAACsH,EAAWwF,MAAOxF,EAAWuF,IAAI5G,SAASuG,EAAWlQ,MAAWjC,IAAOsI,GAAQtI,IAAOyK,EAAMqB,aAC3G,kBAAC0R,GAAA,EAAuB,KACtB,kBAACjB,GAAA,EAAU,CAACkB,KAAK,MAAK,aAAY,SAASnF,QAAS,WAAM,OAAA5M,EAAK1L,IAAKwc,MAAM,QACxE,kBAACkB,GAAA,EAAc,CAAChF,MAAM,kBAQzB,KAAVjV,GAAgB,kBAACkY,KAAK,CAACC,SAAS,SAASnY,GAC1C,kBAACwX,GAAA,EAAI,CAACI,MAAI,EAACH,WAAS,EAACC,QAAQ,WAAWC,QAAS,GAC/C,kBAACH,GAAA,EAAI,CAACI,MAAI,GACR,kBAACQ,GAAA,EAAM,CAACN,QAAQ,YAAY7C,MAAM,YAAYJ,QAAStM,GAAK,UAE9D,kBAACiP,GAAA,EAAI,CAACI,MAAI,GACR,kBAAC,GAAO,CAACf,QAASlJ,GACfzL,EACG,kBAACkW,GAAA,EAAM,CAACN,QAAQ,YAAY7C,MAAM,UAAUoD,SAAU1K,EAAakH,QAjI1D,sD,mDACvB,SAAMtG,IAAQhK,OAAM,SAACvI,GAAa,OAAAkY,EAASlY,EAAEuC,a,cAA7C,S,aAgI0G,SAC5F,kBAAC6Z,GAAA,EAAM,CAACN,QAAQ,YAAY7C,MAAM,UAAUoD,SAAU1K,EAAakH,QA/H1D,sD,mDACvB,SAAM5K,IAAQ1F,OAAM,SAACvI,GAAa,OAAAkY,EAASlY,EAAEuC,a,cAA7C,S,aA8H6GyI,EAAMiD,MAAU,OAAJpF,QAAI,IAAJA,IAAQ,IAAM,UAAY,aAKjJ,kBAACqV,GAAA,EAAM,CAACC,UAAwB/c,IAAlBob,EAA6B4B,QAASxB,EAAgB,kBAAkB,qBACpF,kBAACyB,GAAA,EAAW,CAAC9d,GAAG,qB,iBAAoD,IAAlBic,EAAyB,QAAU,KAA0B,WAC/G,kBAAC8B,GAAA,EAAa,KACZ,kBAACvC,GAAA,EAAS,CACRwC,WAAS,EACTC,OAAO,QACPxC,MAAM,OACNC,WAAS,EACTrW,MAAOpD,EACPmI,SAAU,SAAC,G,IAAE1F,EAAM,SAAO,OAAAkW,EAAQlW,EAAOW,WAG7C,kBAAC6Y,GAAA,EAAa,KACZ,kBAACrC,GAAA,EAAM,CAACvD,QAAS+D,EAAkB3D,MAAM,WAAS,UAGlD,kBAACmD,GAAA,EAAM,CAACvD,QA1IQ,sD,yDACT,KAATrW,EAAA,OACoB,IAAlBga,EAAA,MACF,GAAMhK,EAAShQ,GAAM+F,OAAM,SAACvI,GAAa,OAAAkY,EAASlY,EAAEuC,a,cAApD,S,oBAC2B,IAAlBia,EAAA,MACT,GAAM/J,EAAMjQ,GAAM+F,OAAM,SAACvI,GAAa,OAAAkY,EAASlY,EAAEuC,a,OAAjD,S,wBAGJqa,I,YAkIwC3D,MAAM,WAAS,cCpL9CyF,GTIqB,SAACC,GACjC,IAAMC,EAAqC,SAAAzE,GACzC,IAAMnU,EUUyB,SAAqE8K,EAAwCpG,EAAqB0M,GACnK,IAAMpR,EAAU,GCfyB,SAAqE8K,GAC9G,OAAO,SAAC1I,EAAWlB,GACjB,OAAO4J,EAAgC1I,EAA6BlB,IDavC2X,CAA4B/N,GAAUpG,GAC7DqH,EAA4C/L,EAApC,SAAE8L,EAAkC9L,EAAxB,WAAEgM,EAAsBhM,EAAjB,MAAEiN,EAAejN,EAAL,WACzCgF,EAAQhF,EAAQgF,MAChB,EAAoB,mBAAS,IAA5BhH,EAAK,KAAEkU,EAAQ,KAClB,EAA0B,mBAASnG,EAAS/O,OAAS,GAApDgV,EAAQ,KAAEC,EAAW,KACpB,EAAsC,mBAASnG,GAA9CqG,EAAc,KAAE2G,EAAiB,KAClCC,EAAW,kBAAQ,GACrB/T,EAAMkI,OAAS6L,EAAS9I,UACtBlE,EAAS/O,OAAS,IACpBgV,GAAW,EACXC,GAAY,GACZ6G,EAAkB9T,EAAMkI,OAE1B6L,EAAS9I,QAAUjL,EAAMkI,MAE3B,IAAMuF,EAAc,SAACzY,GACnBkY,EAASlY,EAAEuC,UAeb,OAbA,qBAAU,WACR,GAAIyP,EAAM7F,SAASnB,EAAMgD,QAAQhD,EAAMkI,QAAUlI,EAAMkD,cAA4B9M,IAAjB4J,EAAM2I,OAAsB,CAC5F,IAKM,EAAIhQ,OAAOqD,YALN,WACT,IAAME,EAASkQ,EAASpM,EAAOA,EAAMkI,MAErCD,EAAWjI,EAAMkI,KAAMhM,GAAQqB,MAAMkQ,KAEP,KAChC,OAAO,WACL9U,OAAOqb,aAAa,OAGvB,CAAChU,IACJ,OACKhF,GAAO,CACVgF,MAAK,EACLgN,SAAQ,EACRC,YAAW,EACXjU,MAAK,EACLkU,SAAQ,EACRC,eAAc,IVjDE8G,CAAoBxI,GAAgB,IAAIrD,GAAgBgE,IACxE,OACE,kBAACO,GAAeuH,SAAhB,CAAyBtZ,MAAOI,GAC9B,kBAAC2Y,EAAcxE,KAKrB,OADAyE,EAAgBO,YAAc,kBACvBP,ESdiCQ,EAAmB,WAC3D,IAAMpZ,EAAU6R,KAChB,OACE,kBAAC,GAAD,CAAiB7G,aAAchL,EAAQgL,aAAc2I,SAAU,EAAC,GAAO,GAAO,IAC5E,kBAAC,GAAS3T,GACV,kBAAC,GAASA,GACV,kBAAC,GAAD,UGLNqZ,IAASC,OACP,kBAACZ,GAAD,MACAa,SAASC,eAAe,SAM1Bhf,M","file":"static/js/main.0bdd6fea.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 5950;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { DataConnection } from 'peerjs'\r\n\r\nexport interface NetworkAction {\r\n  peerId?: string\r\n\r\n  [key: string]: unknown | undefined\r\n}\r\n\r\nexport interface NetworkState {\r\n  networkName?: string\r\n\r\n  [key: string]: unknown | undefined\r\n}\r\n\r\nexport interface PromiseHandler {\r\n  resolve: (data?: never) => void\r\n  reject: (error: string) => void\r\n}\r\n\r\nexport enum PkgType {\r\n  DISPATCH = 'DISPATCH',\r\n  ACK = 'ACK',\r\n  NACK = 'NACK',\r\n  PROMOTE = 'PROMOTE',\r\n  CANCEL = 'CANCEL',\r\n  SET_STATE = 'SET_STATE',\r\n  ASK_STATE = 'ASK_STATE',\r\n  KICK = 'KICK',\r\n}\r\n\r\nexport type Pkg<State extends NetworkState, Action extends NetworkAction> = (\r\n  { pkgType: PkgType.DISPATCH, data: Action }\r\n  | { pkgType: PkgType.ACK, data: string }\r\n  | { pkgType: PkgType.NACK, data: string }\r\n  | { pkgType: PkgType.CANCEL, data: string }\r\n  | { pkgType: PkgType.SET_STATE, data: NetworkState }\r\n  | { pkgType: PkgType.ASK_STATE }\r\n  | { pkgType: PkgType.KICK, data: string }\r\n  | { pkgType: PkgType }) & { pid?: string, data: never }\r\n\r\nexport type NetworkReducer<State extends NetworkState, Action extends NetworkAction> = (prevState: State, action: Action) => State\r\n\r\nexport interface SendResponse<T> {\r\n  conn: DataConnection\r\n  data?: T\r\n  error?: string\r\n}\r\n","export enum LoggerLevel {\r\n  ALL,\r\n  TRACE,\r\n  LOG,\r\n  DEBUG,\r\n  INFO,\r\n  WARN,\r\n  ERROR,\r\n  OFF\r\n}\r\n\r\ninterface Log {\r\n  level: LoggerLevel\r\n  message: unknown[]\r\n  date: Date\r\n}\r\n\r\ntype LogFunction = (...message: unknown[]) => void\r\n\r\nclass Logger {\r\n  set historyLevel (value: LoggerLevel) {\r\n    this._historyLevel = value\r\n  }\r\n\r\n  set verboseLevel (value: LoggerLevel) {\r\n    this._verboseLevel = value\r\n  }\r\n\r\n  set keep (value: number) {\r\n    this._keep = value\r\n  }\r\n\r\n  private _historyLevel: LoggerLevel\r\n  private _verboseLevel: LoggerLevel\r\n  private _keep: number\r\n  private readonly _logs: Log[] = []\r\n\r\n  constructor (historyLevel: LoggerLevel, verbose: LoggerLevel, keep: number) {\r\n    this._historyLevel = historyLevel\r\n    this._verboseLevel = verbose\r\n    this._keep = keep\r\n  }\r\n\r\n  private readonly pushLog = (level: LoggerLevel, date: Date, ...message: unknown[]): void => {\r\n    if (this._logs.length >= this._keep) {\r\n      this._logs.shift()\r\n    }\r\n    this._logs.push({\r\n      level,\r\n      message,\r\n      date: new Date()\r\n    })\r\n  }\r\n\r\n  private readonly getLogFunction: (level: LoggerLevel) => LogFunction = level => {\r\n    if (level < this._verboseLevel) {\r\n      return () => {\r\n        //\r\n      }\r\n    }\r\n    switch (level) {\r\n      case LoggerLevel.INFO:\r\n        return console.info.bind(window.console)\r\n      case LoggerLevel.LOG:\r\n        return console.log.bind(window.console)\r\n      case LoggerLevel.DEBUG:\r\n        return console.log.bind(window.console)\r\n      case LoggerLevel.ERROR:\r\n        return console.error.bind(window.console)\r\n      case LoggerLevel.WARN:\r\n        return console.warn.bind(window.console)\r\n      case LoggerLevel.TRACE:\r\n        return console.trace.bind(window.console)\r\n      default:\r\n        return () => {\r\n          //\r\n        }\r\n    }\r\n  }\r\n\r\n  private readonly withColor: (level: LoggerLevel, date?: Date) => (logFunction: LogFunction) => LogFunction = (level, date) => logFunction => {\r\n    const css = {\r\n      [LoggerLevel.INFO]: 'color: DodgerBlue',\r\n      [LoggerLevel.LOG]: '',\r\n      [LoggerLevel.DEBUG]: 'color: Green',\r\n      [LoggerLevel.ERROR]: '',\r\n      [LoggerLevel.WARN]: '',\r\n      [LoggerLevel.TRACE]: 'color: Green',\r\n      [LoggerLevel.ALL]: '',\r\n      [LoggerLevel.OFF]: ''\r\n    }[level]\r\n    const prefix = date === undefined ? `%c[${LoggerLevel[level]}]` : `%c[${date.toISOString()} ${LoggerLevel[level]}]`\r\n    return Function.prototype.bind.call(logFunction, console, prefix, css) as LogFunction\r\n  }\r\n\r\n  private readonly withHistoryButWrongLineNumber: (level: LoggerLevel) => (logFunction: LogFunction) => LogFunction = level => logFunction => {\r\n    return new Proxy(logFunction, {\r\n      apply: (target: LogFunction, thisArg: unknown, argList: unknown[]) => {\r\n        const date = new Date()\r\n        this.pushLog(level, date, ...argList)\r\n        return target(...argList)\r\n      }\r\n    })\r\n  }\r\n\r\n  private readonly withAllFeatures: (level: LoggerLevel) => LogFunction = level => {\r\n    if (level >= this._historyLevel) {\r\n      return this.withHistoryButWrongLineNumber(level)(this.withColor(level)(this.getLogFunction(level)))\r\n    } else {\r\n      return this.withColor(level)(this.getLogFunction(level))\r\n    }\r\n  }\r\n\r\n  clear = (): void => {\r\n    this._logs.splice(0, this._logs.length)\r\n  }\r\n\r\n  public get info (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.INFO)\r\n  }\r\n\r\n  public get log (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.LOG)\r\n  }\r\n\r\n  public get debug (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.DEBUG)\r\n  }\r\n\r\n  public get error (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.ERROR)\r\n  }\r\n\r\n  public get warn (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.WARN)\r\n  }\r\n\r\n  public get trace (): LogFunction {\r\n    return this.withAllFeatures(LoggerLevel.TRACE)\r\n  }\r\n\r\n  printLogs = (): void => {\r\n    this._logs.forEach(({ level, message, date }) => {\r\n      this.withColor(level, date)(this.getLogFunction(level))(...message)\r\n    })\r\n  }\r\n\r\n  getLogs = (level = LoggerLevel.ALL): Log[] => {\r\n    return this._logs.filter((log) => log.level >= level)\r\n  }\r\n}\r\n\r\nexport const createLogger = (): Logger => {\r\n  switch (process.env.NODE_ENV) {\r\n    case 'development':\r\n      return new Logger(LoggerLevel.ALL, LoggerLevel.WARN, 100)\r\n    case 'production':\r\n      return new Logger(LoggerLevel.ALL, LoggerLevel.WARN, 100)\r\n    default:\r\n      return new Logger(LoggerLevel.OFF, LoggerLevel.OFF, 0)\r\n  }\r\n}\r\n\r\nexport const logger = createLogger()\r\n\r\nif (process.env.REACT_APP_SMNET_VERBOSE_ALL_NO_HISTORY !== undefined) {\r\n  logger.historyLevel = LoggerLevel.OFF\r\n  logger.verboseLevel = LoggerLevel.ALL\r\n}\r\n","import Peer from 'peerjs'\n\nexport class PeerFactory {\n  private readonly _options?: Peer.PeerJSOption\n  constructor (options?: Peer.PeerJSOption) {\n    if (options !== undefined) {\n      this._options = options\n    } else {\n      const peerHostConfig = process.env.REACT_APP_PEER_CONFIG\n      if (peerHostConfig === undefined && process.env.REACT_APP_PEER_HOST === undefined) {\n        this._options = undefined\n      } else {\n        this._options = {\n          host: process.env.REACT_APP_PEER_HOST ?? 'localhost',\n          port: Number.parseInt(process.env.REACT_APP_PEER_PORT ?? '9000', 10),\n          path: process.env.REACT_APP_PEER_PATH ?? '/peer',\n          secure: process.env.REACT_APP_PEER_SECURE === 'true',\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          config: peerHostConfig !== undefined ? JSON.parse(peerHostConfig) : undefined\n        }\n      }\n    }\n  }\n\n  make (id?: string): Peer {\n    return new Peer(id, this._options)\n  }\n\n  async makeAndOpen (id?: string): Promise<Peer> {\n    const peer = this.make(id)\n    return await new Promise((resolve, reject) => {\n      peer.on('open', () => {\n        resolve(peer)\n      })\n      peer.on('error', () => {\n        reject(peer)\n      })\n    })\n  }\n}\n","export class AlreadyJoinedNetworkError extends Error {\r\n  message = 'already joined network'\r\n  name = 'AlreadyJoinedNetworkError'\r\n}\r\n\r\nexport class AlreadyConnectingError extends Error {\r\n  message = 'already connecting to network'\r\n  name = 'AlreadyConnectingError'\r\n}\r\n\r\nexport class PlayerNameAlreadyExistError extends Error {\r\n  message = 'player name already exist'\r\n  name = 'PlayerNameAlreadyExistError'\r\n}\r\n\r\nexport class NotConnectedToPeerError extends Error {\r\n  name = 'PlayerNameAlreadyExistError'\r\n\r\n  constructor (id: string) {\r\n    super()\r\n    this.message = `not connected to ${id}`\r\n  }\r\n}\r\n\r\nconst NO_STAGING_STATE = 'No Staging State'\r\nexport class NoStagingStateError extends Error {\r\n  message = NO_STAGING_STATE\r\n  name = 'NoStagingStateError'\r\n}\r\n\r\nexport class NetworkBusyError extends Error {\r\n  message = 'Network is busy, please retry later'\r\n  name = 'NetworkBusyError'\r\n}\r\n","import { NetworkStrategy } from './NetworkStrategy'\r\nimport { Network } from '../Network'\r\nimport { NetworkAction, NetworkState } from '../types'\r\nimport Peer from 'peerjs'\r\nimport checksum from 'checksum'\r\nimport { NoStagingStateError } from '../Errors'\r\nimport { PeerFactory } from '../PeerFactory'\r\nimport { logger } from '../Logger'\r\n\r\n/**\r\n * AbstractNetworkStrategies is the base class of all other NetworkStrategies, it\r\n * hold the stagingState, which is an intermediate state computed when a point dispatch,\r\n *    but hasn't verified by other points,\r\n *    after getting verified we promote this stagingState to live state that is used by the application,\r\n *    NetworkStrategies can implement different logics to handle this\r\n * It always reject dispatch when there is statingState because even if we queue the dispatches in a buffer,\r\n *    the users may not be aware of what would be the new state before sending this request,\r\n *    the drawback is the user need to send their request manually later\r\n */\r\nexport abstract class AbstractNetworkStrategy<State extends NetworkState, Action extends NetworkAction> implements NetworkStrategy<State, Action> {\r\n  isAdmin = true\r\n  leaving = false\r\n  network: Network<State, Action>\r\n  stagingState?: State\r\n  protected peerFactory: PeerFactory\r\n\r\n  constructor (network: Network<State, Action>, peerFactory: PeerFactory) {\r\n    this.network = network\r\n    this.peerFactory = peerFactory\r\n  }\r\n\r\n  public abstract dispatch (action: Action): Promise<void>\r\n\r\n  public abstract handleDispatch (prevState: State, action: Action): Promise<State>\r\n\r\n  public async handlePromote (cs: string): Promise<void> {\r\n    if (this.stagingState !== undefined) {\r\n      const stagingChecksum = checksum(JSON.stringify(this.stagingState))\r\n      if (stagingChecksum === cs) {\r\n        this.network.setState(this.stagingState)\r\n        logger.info('promoted the stagingState', this.stagingState)\r\n        this.stagingState = undefined\r\n      } else {\r\n        logger.error(`Cannot promote, staging checksum is ${stagingChecksum} while requested to promote checksum of ${cs}`)\r\n        throw new Error('Cannot promote staging state with unmatched checksum')\r\n      }\r\n    } else {\r\n      logger.error('Cannot promote, there is no staging state')\r\n      throw new NoStagingStateError()\r\n    }\r\n    return await Promise.resolve()\r\n  }\r\n\r\n  public async handleCancel (cs: string): Promise<void> {\r\n    if (this.stagingState !== undefined) {\r\n      const stagingChecksum = checksum(JSON.stringify(this.stagingState))\r\n      if (stagingChecksum === cs) {\r\n        logger.info('canceled the stagingState', this.stagingState)\r\n        this.stagingState = undefined\r\n      } else {\r\n        logger.error(`Cannot cancel, staging checksum is ${stagingChecksum} while requested to cancel checksum of ${cs}`)\r\n        throw new Error('Cannot cancel staging state with unmatched checksum')\r\n      }\r\n    } else {\r\n      logger.error('Cannot cancel, there is no staging state')\r\n      throw new NoStagingStateError()\r\n    }\r\n    return await Promise.resolve()\r\n  }\r\n\r\n  public forceCancel (): void {\r\n    logger.info('force cancel the stagingState')\r\n    this.stagingState = undefined\r\n  }\r\n\r\n  public isBusy (): boolean {\r\n    return this.stagingState !== undefined\r\n  }\r\n\r\n  public abstract setUpConnection (conn: Peer.DataConnection): void\r\n}\r\n","export const pause = async (timeout: number): Promise<void> => await new Promise(resolve => {\r\n  setTimeout(() => {\r\n    resolve()\r\n  }, timeout)\r\n})\r\n","import { NetworkAction, NetworkState, PkgType } from '../types'\r\nimport Peer from 'peerjs'\r\nimport checksum from 'checksum'\r\nimport { AbstractNetworkStrategy } from './AbstractNetworkStrategy'\r\nimport { logger } from '../Logger'\r\nimport { pause } from '../pause'\r\n\r\n/**\r\n * Strategy of the center point of star network\r\n * star network host has the greatest power and force everyone to use his state\r\n */\r\nexport class StarHostStrategy<State extends NetworkState, Action extends NetworkAction> extends AbstractNetworkStrategy<State, Action> {\r\n  public async dispatch (action: Action): Promise<void> {\r\n    // run reducer locally, stage it and get checksum of new state\r\n    logger.debug('reduce locally', this.network.getState(), action)\r\n    this.stagingState = this.network.applyReducer(this.network.getState(), action)\r\n    const cs = checksum(JSON.stringify(this.stagingState))\r\n    logger.debug('stagingState', this.stagingState)\r\n\r\n    // tell other points to calculate\r\n    const responses = await this.network.broadcast(PkgType.DISPATCH, action)\r\n    logger.debug('obtained responses', responses)\r\n\r\n    // revert if anypoint threw any error\r\n    // force update if that point wont have same checksum\r\n    // promote if that point will have same checksum\r\n    const errors: Array<{ error: string, conn: Peer.DataConnection }> = []\r\n    const forceUpdate: Peer.DataConnection[] = []\r\n    const promote: Peer.DataConnection[] = []\r\n    responses.forEach(({ conn, data, error }) => {\r\n      if (error !== undefined) {\r\n        errors.push({ error, conn })\r\n      } else {\r\n        if (data !== cs) {\r\n          forceUpdate.push(conn)\r\n        } else {\r\n          promote.push(conn)\r\n        }\r\n      }\r\n    })\r\n    // logger.debug('different type of responses', { errors, forceUpdate, promote })\r\n    if (promote.length === responses.length) {\r\n      logger.debug('all can be promoted')\r\n    } else {\r\n      if (errors.length > 0) {\r\n        logger.error(`received ${errors.length} error from some peers`, errors)\r\n      }\r\n      if (forceUpdate.length > 0) {\r\n        logger.warn(`received ${forceUpdate.length} unmatched checksum from some peer, forceUpdating them`, forceUpdate)\r\n      }\r\n    }\r\n    if (errors.length > 0) {\r\n      await this.network.broadcast(PkgType.CANCEL, cs)\r\n      throw new Error(errors[0].error)\r\n    } else {\r\n      forceUpdate.map(async conn => {\r\n        await this.network.send(conn, PkgType.SET_STATE, this.stagingState)\r\n      })\r\n      promote.map(async conn => {\r\n        await this.network.send(conn, PkgType.PROMOTE, cs)\r\n      })\r\n    }\r\n\r\n    // promote owns' state after updating all others' state\r\n    await this.handlePromote(cs)\r\n  }\r\n\r\n  // other points' dispatch action will directly forward to host, and host broadcast the action\r\n  // if host cannot broadcast the action, it will feedback the source with error message\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    await this.dispatch(action)\r\n    return this.network.getState()\r\n  }\r\n\r\n  // no special handlers for star host\r\n  public setUpConnection (conn: Peer.DataConnection): void {\r\n    conn.on('close', () => {\r\n      this.dispatchMemberLeft(conn.peer).catch(logger.error)\r\n    })\r\n  }\r\n\r\n  private async dispatchMemberLeft (id: string): Promise<void> {\r\n    if (!this.leaving) {\r\n      try {\r\n        await this.network.dispatch({\r\n          type: 'member-left',\r\n          payload: id\r\n        } as unknown as Action)\r\n      } catch (e) {\r\n        await pause(1000)\r\n        await this.dispatchMemberLeft(id)\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NetworkAction, NetworkState, PkgType } from '../types'\r\nimport Peer from 'peerjs'\r\nimport { AbstractNetworkStrategy } from './AbstractNetworkStrategy'\r\nimport { pause } from '../pause'\r\nimport { logger } from '../Logger'\r\n\r\n/**\r\n * Strategy of the non-center point of star network\r\n * star network host has the greatest power and force everyone to use his state\r\n */\r\nexport class StarMemberStrategy<State extends NetworkState, Action extends NetworkAction> extends AbstractNetworkStrategy<State, Action> {\r\n  isAdmin = false\r\n\r\n  // just forward the dispatch to host\r\n  public async dispatch (action: Action): Promise<void> {\r\n    await this.network.broadcast(PkgType.DISPATCH, action)\r\n  }\r\n\r\n  // just do the reduce when receiving a dispatch\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    this.stagingState = this.network.applyReducer(prevState, action)\r\n    return await Promise.resolve(this.stagingState)\r\n  }\r\n\r\n  // when got disconnected from host, most probably due to host is down\r\n  // it will try to be the new host or reconnect to new host\r\n  public setUpConnection (conn: Peer.DataConnection): void {\r\n    conn.on('close', () => {\r\n      if (!this.leaving) {\r\n        this.recover().catch(logger.error)\r\n      }\r\n    })\r\n  }\r\n\r\n  private async recover (): Promise<void> {\r\n    const name = this.network.getNetworkName()\r\n    if (name !== undefined) {\r\n      try {\r\n        const oldId = this.network.myId\r\n        logger.debug('oldId', oldId)\r\n        await this.network.initAsStarHost(name, this.peerFactory)\r\n        logger.info('became the new host, changed peerId, notify others')\r\n        if (oldId !== undefined) {\r\n          await this.dispatchHostLeft(oldId)\r\n        }\r\n      } catch (e) {\r\n        await this.network.reconnectToHost(name)\r\n        // await this.network.connectToHost()\r\n      }\r\n    }\r\n  }\r\n\r\n  private async dispatchHostLeft (id: string): Promise<void> {\r\n    try {\r\n      await this.network.dispatch({\r\n        type: 'host-left',\r\n        payload: id\r\n      } as unknown as Action)\r\n    } catch (e) {\r\n      await pause(1000)\r\n      await this.dispatchHostLeft(id)\r\n    }\r\n  }\r\n}\r\n","import Peer, { DataConnection } from 'peerjs'\r\nimport { PkgType, PromiseHandler, SendResponse } from './types'\r\nimport { v4 } from 'uuid'\r\nimport { NotConnectedToPeerError } from './Errors'\r\n\r\nexport class DataStream {\r\n  private connections: { [id: string]: DataConnection } = {}\r\n  private sentPromises: { [id: string]: PromiseHandler } = {}\r\n\r\n  public reset (): void {\r\n    this.connections = {}\r\n  }\r\n\r\n  public registerConnection (conn: Peer.DataConnection): void {\r\n    this.connections[conn.peer] = conn\r\n  }\r\n\r\n  public unregisterConnection (conn: Peer.DataConnection): void {\r\n    const { [conn.peer]: a, ...rest } = this.connections\r\n    this.connections = rest\r\n  }\r\n\r\n  public getConnections (): { [id: string]: DataConnection } {\r\n    return this.connections\r\n  }\r\n\r\n  public async send<T, U = unknown> (id: string | DataConnection, pkgType: PkgType, data: T): Promise<SendResponse<U>> {\r\n    const conn = this.getConn(id)\r\n    return await new Promise((resolve, reject) => {\r\n      const pid = v4()\r\n      this.sentPromises[pid] = {\r\n        resolve: (data?: never) => resolve({ conn, data }),\r\n        reject: (error: string) => reject(new Error(error))\r\n      }\r\n      conn.send({ pkgType, data, pid })\r\n    })\r\n  }\r\n\r\n  public sendACK (connId: string | DataConnection, pid: string|undefined, data: unknown): void {\r\n    const conn = this.getConn(connId)\r\n    conn.send({ pkgType: PkgType.ACK, pid, data })\r\n  }\r\n\r\n  public sendNACK (connId: string | DataConnection, pid: string|undefined, data: unknown): void {\r\n    const conn = this.getConn(connId)\r\n    conn.send({ pkgType: PkgType.NACK, pid, data })\r\n  }\r\n\r\n  public async broadcast<T, U = unknown> (pkgType: PkgType, data: T): Promise<Array<SendResponse<U>>> {\r\n    const promises = Object.keys(this.connections).map(async id => await this.send<T, U>(id, pkgType, data))\r\n    return await Promise.all(promises)\r\n  }\r\n\r\n  public receiveACK (pid: string | undefined, response: never): void {\r\n    if (pid !== undefined && pid in this.sentPromises) {\r\n      const { resolve } = this.sentPromises[pid]\r\n      resolve(response)\r\n      this.removeSentPromise(pid)\r\n    }\r\n  }\r\n\r\n  public receiveNACK (pid: string | undefined, errorMessage: never): void {\r\n    if (pid !== undefined && pid in this.sentPromises) {\r\n      const { reject } = this.sentPromises[pid]\r\n      reject(errorMessage)\r\n      this.removeSentPromise(pid)\r\n    }\r\n  }\r\n\r\n  private removeSentPromise (pid: string): void {\r\n    const { [pid]: p, ...rest } = this.sentPromises\r\n    this.sentPromises = rest\r\n  }\r\n\r\n  private getConn (id: string | DataConnection): DataConnection {\r\n    if (typeof id === 'string') {\r\n      const conn = this.connections[id]\r\n      if (conn !== undefined) {\r\n        return conn\r\n      }\r\n      throw new NotConnectedToPeerError(id)\r\n    } else {\r\n      return id\r\n    }\r\n  }\r\n}\r\n","import { NetworkState } from './types'\r\nimport cloneDeep from 'clone-deep'\r\n\r\ntype Setter<State extends NetworkState> = (state: State) => void\r\n\r\ntype Resetter = () => void\r\n\r\n/**\r\n * Make State changes policy extensible\r\n * Only have get, set and reset\r\n */\r\nexport class StateManager<State extends NetworkState> {\r\n  private readonly _set: Setter<State>\r\n  private readonly _reset: Resetter\r\n  private readonly initialState!: State\r\n  private state!: State\r\n  private readonly history: State[] = []\r\n  private readonly historyMax: number\r\n\r\n  constructor (initialState: State, onChange?: Setter<State>, historyMax = 0) {\r\n    this.historyMax = historyMax\r\n    this.initialState = cloneDeep(initialState)\r\n    this._reset = () => this.set(cloneDeep(this.initialState))\r\n    this.state = initialState\r\n\r\n    this._set = onChange ?? ((state: State) => {\r\n      this.state = state\r\n    })\r\n  }\r\n\r\n  public get (): State {\r\n    return this.state\r\n  }\r\n\r\n  public set (state: State): void {\r\n    this.state = state\r\n    if (this.historyMax > 0) {\r\n      if (this.history.length >= this.historyMax) {\r\n        this.history.shift()\r\n      }\r\n      this.history.push(cloneDeep(state))\r\n    }\r\n    this._set({ ...state })\r\n  }\r\n\r\n  public reset (): void {\r\n    this._reset()\r\n  }\r\n\r\n  public getHistory (): State[] {\r\n    return this.history\r\n  }\r\n\r\n  static make<State extends NetworkState> (initialState: State, onChange?: Setter<State>, historyMax?: number): StateManager<State> {\r\n    return new StateManager<State>(initialState, onChange, historyMax)\r\n  }\r\n}\r\n","import { AbstractNetworkStrategyDecorator } from './AbstractNetworkStrategyDecorator'\r\nimport { NetworkAction, NetworkState } from '../types'\r\nimport { NetworkBusyError } from '../Errors'\r\nimport { NetworkStrategy } from './NetworkStrategy'\r\nimport { logger } from '../Logger'\r\n\r\nexport class NoConcurrentStagingDecorator<State extends NetworkState, Action extends NetworkAction> extends AbstractNetworkStrategyDecorator<State, Action> {\r\n  public async dispatch (action: Action): Promise<void> {\r\n    if (this.stagingState !== undefined) {\r\n      logger.error('cannot dispatch when there is staging state', this.stagingState)\r\n      throw new NetworkBusyError()\r\n    }\r\n    // next action\r\n    return await this.wrappedStrategy.dispatch(action)\r\n  }\r\n\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    if (this.stagingState !== undefined) {\r\n      logger.error('cannot handle dispatch request when there is staging state', this.stagingState)\r\n      throw new NetworkBusyError()\r\n    }\r\n    // next action\r\n    return await this.wrappedStrategy.handleDispatch(prevState, action)\r\n  }\r\n}\r\n\r\nexport const noConcurrentStaging = <State extends NetworkState, Action extends NetworkAction> (networkStrategy: NetworkStrategy<State, Action>): NetworkStrategy<State, Action> => {\r\n  return new NoConcurrentStagingDecorator(networkStrategy)\r\n}\r\n","import { NetworkStrategy } from './NetworkStrategy'\r\nimport { NetworkAction, NetworkState } from '../types'\r\nimport { Network } from '../Network'\r\nimport { DataConnection } from 'peerjs'\r\n\r\nexport abstract class AbstractNetworkStrategyDecorator<State extends NetworkState, Action extends NetworkAction> implements NetworkStrategy<State, Action> {\r\n  protected wrappedStrategy: NetworkStrategy<State, Action>\r\n\r\n  get stagingState (): State | undefined {\r\n    return this.wrappedStrategy.stagingState\r\n  }\r\n\r\n  set stagingState (value: State | undefined) {\r\n    this.wrappedStrategy.stagingState = value\r\n  }\r\n\r\n  get network (): Network<State, Action> {\r\n    return this.wrappedStrategy.network\r\n  }\r\n\r\n  get leaving (): boolean {\r\n    return this.wrappedStrategy.leaving\r\n  }\r\n\r\n  set leaving (flag: boolean) {\r\n    this.wrappedStrategy.leaving = flag\r\n  }\r\n\r\n  get isAdmin (): boolean {\r\n    return this.wrappedStrategy.isAdmin\r\n  }\r\n\r\n  set isAdmin (flag: boolean) {\r\n    this.wrappedStrategy.isAdmin = flag\r\n  }\r\n\r\n  constructor (networkStrategy: NetworkStrategy<State, Action>) {\r\n    this.wrappedStrategy = networkStrategy\r\n  }\r\n\r\n  public async dispatch (action: Action): Promise<void> {\r\n    return await this.wrappedStrategy.dispatch(action)\r\n  }\r\n\r\n  public forceCancel (): void {\r\n    return this.wrappedStrategy.forceCancel()\r\n  }\r\n\r\n  public async handleCancel (cs: string): Promise<void> {\r\n    return await this.wrappedStrategy.handleCancel(cs)\r\n  }\r\n\r\n  public async handleDispatch (prevState: State, action: Action): Promise<State> {\r\n    return await this.wrappedStrategy.handleDispatch(prevState, action)\r\n  }\r\n\r\n  public async handlePromote (cs: string): Promise<void> {\r\n    return await this.wrappedStrategy.handlePromote(cs)\r\n  }\r\n\r\n  public isBusy (): boolean {\r\n    return this.wrappedStrategy.isBusy()\r\n  }\r\n\r\n  public setUpConnection (conn: DataConnection): void {\r\n    return this.wrappedStrategy.setUpConnection(conn)\r\n  }\r\n}\r\n","import { NetworkAction, NetworkReducer, NetworkState, Pkg, PkgType, SendResponse } from './types'\r\nimport { PeerFactory } from './PeerFactory'\r\nimport Peer, { DataConnection } from 'peerjs'\r\nimport { NetworkStrategy } from './NetworkStrategies/NetworkStrategy'\r\nimport { StarHostStrategy } from './NetworkStrategies/StarHostStrategy'\r\nimport checksum from 'checksum'\r\nimport { AlreadyConnectingError, AlreadyJoinedNetworkError } from './Errors'\r\nimport { StarMemberStrategy } from './NetworkStrategies/StarMemberStrategy'\r\nimport { DataStream } from './DataStream'\r\nimport { StateManager } from './StateManager'\r\nimport { noConcurrentStaging } from './NetworkStrategies/NoConcurrentStagingDecorator'\r\nimport { logger } from './Logger'\r\n\r\n/**\r\n * The main Network class, which holds\r\n * - a networkStrategy that handles behavior when in different kinds of network and position, e.g. the center point in StarNetwork vs other points in that\r\n * - a stateManager, which holds the data state of this network, you may supply you own version of stateManager such as observableStateManager\r\n * - a dataStream, which handle the data exchange between different points in the network\r\n * and it can\r\n * - join a network\r\n * - leave the joined network\r\n * - dispatch changes on the data state\r\n * - get the newest data state\r\n */\r\nexport class Network<State extends NetworkState, Action extends NetworkAction> {\r\n  private peer?: Peer\r\n  private readonly stateManager: StateManager<State>\r\n  private readonly stateReducer: NetworkReducer<State, Action>\r\n  private networkStrategy?: NetworkStrategy<State, Action>\r\n  private networkName?: string\r\n  private readonly dataStream = new DataStream()\r\n  private _connecting = false\r\n  private _dispatching = false\r\n\r\n  constructor (stateReducer: NetworkReducer<State, Action>, initialStateOrManager: State | StateManager<State>) {\r\n    if (initialStateOrManager instanceof StateManager) {\r\n      this.stateManager = initialStateOrManager\r\n    } else {\r\n      this.stateManager = StateManager.make(initialStateOrManager)\r\n    }\r\n    this.stateReducer = stateReducer\r\n  }\r\n\r\n  public get myId (): string | undefined {\r\n    return this.peer?.id\r\n  }\r\n\r\n  public get connected (): boolean {\r\n    return this.networkName !== undefined\r\n  }\r\n\r\n  public get connecting (): boolean {\r\n    return this._connecting\r\n  }\r\n\r\n  public get dispatching (): boolean {\r\n    return this._dispatching\r\n  }\r\n\r\n  public getNetworkName (): string | undefined {\r\n    return this.networkName\r\n  }\r\n\r\n  public setState (state: State): void {\r\n    this.stateManager.set(state)\r\n  }\r\n\r\n  public getState (): State {\r\n    return this.stateManager.get()\r\n  }\r\n\r\n  public get state (): State {\r\n    return this.getState()\r\n  }\r\n\r\n  public getHistory = (): State[] => {\r\n    return this.stateManager.getHistory()\r\n  }\r\n\r\n  public get isAdmin (): boolean {\r\n    return this.networkStrategy?.isAdmin ?? false\r\n  }\r\n\r\n  /**\r\n   * reduce a given state which changing owns' state\r\n   * @param prevState\r\n   * @param action\r\n   */\r\n  public applyReducer (prevState: State, action: Action): State {\r\n    return this.stateReducer(prevState, action)\r\n  }\r\n\r\n  /**\r\n   * reduce owns' state\r\n   * @param action\r\n   */\r\n  public reduce (action: Action): void {\r\n    this.stateManager.set(this.stateReducer(this.stateManager.get(), action))\r\n  }\r\n\r\n  public kick = async (id: string): Promise<void> => {\r\n    if (this.getNeighbor()?.includes(id) ?? false) {\r\n      await this.send(id, PkgType.KICK, id)\r\n    } else {\r\n      await this.broadcast(PkgType.KICK, id)\r\n    }\r\n  }\r\n\r\n  public async leave (): Promise<void> {\r\n    if (this.peer !== undefined) {\r\n      if (this.networkStrategy !== undefined) {\r\n        this.networkStrategy.leaving = true\r\n      }\r\n      const promise = new Promise(resolve => this.peer?.on('close', resolve))\r\n      this.peer.destroy()\r\n      await promise\r\n      this.peer = undefined\r\n      this.networkName = undefined\r\n      this.dataStream.reset()\r\n      this.stateManager.reset()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Join a network, give a peerFactory if you have different PeerJS configuration\r\n   * @param networkName\r\n   * @param peerFactory\r\n   */\r\n  public async join (networkName: string, peerFactory?: PeerFactory): Promise<void> {\r\n    if (this.peer !== undefined) {\r\n      throw new AlreadyJoinedNetworkError()\r\n    }\r\n    if (this._connecting) {\r\n      throw new AlreadyConnectingError()\r\n    }\r\n    this._connecting = true\r\n    try {\r\n      peerFactory = peerFactory ?? new PeerFactory()\r\n      try {\r\n        await this.initAsStarHost(networkName, peerFactory)\r\n        this.stateManager.reset()\r\n        this.setState({ ...this.getState(), networkName })\r\n      } catch (e) {\r\n        logger.info('cannot init as host, try to init as member')\r\n        await this.initAsStarMember(networkName, peerFactory)\r\n      }\r\n      await this.dispatch({\r\n        type: 'member-join'\r\n      } as unknown as Action)\r\n      this._connecting = false\r\n    } catch (e) {\r\n      this._connecting = false\r\n      throw e\r\n    }\r\n  }\r\n\r\n  /**\r\n   * set up StarHostStrategy\r\n   * @param name\r\n   * @param peerFactory\r\n   */\r\n  public async initAsStarHost (name: string, peerFactory: PeerFactory): Promise<void> {\r\n    logger.info('initing as host')\r\n    const oldPeer = this.peer\r\n    this.peer = await peerFactory.makeAndOpen(name)\r\n    this.peer.on('connection', conn => {\r\n      logger.info('received connection with', conn.peer)\r\n      this.setUpConnection(conn)\r\n    })\r\n    this.networkName = name\r\n    this.networkStrategy = noConcurrentStaging(new StarHostStrategy(this, peerFactory))\r\n    oldPeer?.destroy()\r\n    logger.info('inited as host')\r\n  }\r\n\r\n  /**\r\n   * set up StarMemberStrategy\r\n   * @param name\r\n   * @param peerFactory\r\n   */\r\n  public async initAsStarMember (name: string, peerFactory: PeerFactory): Promise<void> {\r\n    logger.info('initing as member')\r\n    this.networkStrategy = noConcurrentStaging(new StarMemberStrategy(this, peerFactory))\r\n    this.peer = await peerFactory.makeAndOpen()\r\n    logger.info('opened peer')\r\n    await this.reconnectToHost(name)\r\n  }\r\n\r\n  public async reconnectToHost (name: string): Promise<void> {\r\n    if (this.peer === undefined) return\r\n    const conn = this.peer.connect(name)\r\n    this.setUpConnection(conn)\r\n    await new Promise((resolve, reject) => {\r\n      conn.on('open', () => {\r\n        resolve()\r\n      })\r\n      conn.on('error', err => {\r\n        reject(err)\r\n      })\r\n    })\r\n    logger.info('opened connection with host')\r\n    this.dataStream.registerConnection(conn)\r\n    this.networkName = name\r\n    logger.info('requesting state from host')\r\n    const { data } = await this.dataStream.send<undefined, State>(name, PkgType.ASK_STATE, undefined)\r\n    if (data !== undefined) {\r\n      logger.info('updating the state got from host', data)\r\n      this.setState(data)\r\n    }\r\n    logger.info('inited as member')\r\n  }\r\n\r\n  /**\r\n   * Get the neighboring connections of this point\r\n   */\r\n  public getNeighbor (): string[] | undefined {\r\n    if (this.peer === undefined) {\r\n      return undefined\r\n    }\r\n    return Object.keys(this.dataStream.getConnections())\r\n  }\r\n\r\n  public async send<T, U = unknown> (id: string | DataConnection, pkgType: PkgType, data: T): Promise<SendResponse<U>> {\r\n    return await this.dataStream.send(id, pkgType, data)\r\n  }\r\n\r\n  public async broadcast<T, U = unknown> (pkgType: PkgType, data: T): Promise<Array<SendResponse<U>>> {\r\n    return await this.dataStream.broadcast(pkgType, data)\r\n  }\r\n\r\n  public async dispatch (action: Action): Promise<void> {\r\n    try {\r\n      this._dispatching = true\r\n      action.peerId = action.peerId ?? this.myId\r\n      if (this.myId !== undefined && this.myId !== null) {\r\n        logger.info('dispatching action', action)\r\n        await this.networkStrategy?.dispatch(action)\r\n        logger.info('dispatched action', action)\r\n      } else {\r\n        logger.error('not connected')\r\n      }\r\n      this._dispatching = false\r\n    } catch (e) {\r\n      this._dispatching = false\r\n      throw e\r\n    }\r\n  }\r\n\r\n  private setUpConnection (conn: DataConnection): void {\r\n    conn.on('open', () => {\r\n      logger.info('opened connection with', conn.peer)\r\n      this.dataStream.registerConnection(conn)\r\n    })\r\n    conn.on('close', () => {\r\n      logger.info('closed connection with', conn.peer)\r\n      this.dataStream.unregisterConnection(conn)\r\n    })\r\n    conn.on('data', (pkg: Pkg<State, Action>) => this.dataHandler(pkg, conn))\r\n    this.networkStrategy?.setUpConnection(conn)\r\n  }\r\n\r\n  /**\r\n   * handling different kinds of package\r\n   *\r\n   * @param pkg\r\n   * @param conn\r\n   * @private\r\n   */\r\n  private dataHandler (pkg: Pkg<State, Action>, conn: Peer.DataConnection): void {\r\n    const { pid, pkgType, data } = pkg\r\n    logger.debug('received pkg from', conn.peer, pkg)\r\n    switch (pkgType) {\r\n      case PkgType.DISPATCH:\r\n        // ack with new state's checksum\r\n        // nack with error message\r\n        this.networkStrategy?.handleDispatch(this.getState(), data)\r\n          .then(newState => {\r\n            const cs: string = checksum(JSON.stringify(newState))\r\n            this.dataStream.sendACK(conn, pid, cs)\r\n          })\r\n          .catch((error: Error) => {\r\n            this.dataStream.sendNACK(conn, pid, error.message)\r\n          })\r\n        break\r\n      case PkgType.ACK:\r\n        this.dataStream.receiveACK(pid, data)\r\n        break\r\n      case PkgType.NACK:\r\n        this.dataStream.receiveNACK(pid, data)\r\n        break\r\n      case PkgType.PROMOTE:\r\n        // promote need to provide checksum, only promote when checksum same as that of staging state\r\n        this.networkStrategy?.handlePromote(data)\r\n          .then(() => this.dataStream.sendACK(conn, pid, data))\r\n          .catch((error: Error) => this.dataStream.sendNACK(conn, pid, error.message))\r\n        break\r\n      case PkgType.CANCEL:\r\n        // cancel need to provide checksum, only cancel when checksum same as that of staging state\r\n        this.networkStrategy?.handleCancel(data)\r\n          .then(() => this.dataStream.sendACK(conn, pid, data))\r\n          .catch((error: Error) => this.dataStream.sendNACK(conn, pid, error.message))\r\n        break\r\n      case PkgType.SET_STATE:\r\n        // ignore whatever staging state, just set state and cancel the staging state\r\n        this.setState(data)\r\n        this.networkStrategy?.forceCancel()\r\n        break\r\n      case PkgType.ASK_STATE:\r\n        this.dataStream.sendACK(conn, pid, this.state)\r\n        break\r\n      case PkgType.KICK:\r\n        if (data === this.myId) {\r\n          logger.info('you got kicked out of network')\r\n          this.leave().catch(logger.error)\r\n        } else {\r\n          this.send(data, pkgType, data).catch(logger.error)\r\n        }\r\n    }\r\n  }\r\n}\r\n","import { NetworkAction } from 'smnet'\r\n\r\nexport type GenericGameAction = ({\r\n  type: GameActionTypes.RENAME\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.MEMBER_LEFT\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.HOST_LEFT\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.READY\r\n} | {\r\n  type: GameActionTypes.START\r\n} | {\r\n  type: GameActionTypes.MEMBER_JOIN\r\n} | {\r\n  type: GameActionTypes.ADD_AI\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.ADD_LOCAL\r\n  payload: string\r\n} | {\r\n  type: GameActionTypes.REMOVE_LOCAL_AI\r\n  payload: string\r\n}) & NetworkAction\r\n\r\nexport enum GameActionTypes {\r\n  MEMBER_JOIN = 'member-join',\r\n  MEMBER_LEFT = 'member-left',\r\n  HOST_LEFT = 'host-left',\r\n  RENAME = 'rename',\r\n  READY = 'ready',\r\n  START = 'start',\r\n  ADD_AI = 'add-ai',\r\n  ADD_LOCAL = 'add-local',\r\n  REMOVE_LOCAL_AI = 'remove-local-ai',\r\n}\r\n","import { NetworkState } from 'smnet'\r\n\r\nexport enum PlayerType {\r\n  NORMAL,\r\n  LOCAL,\r\n  AI\r\n}\r\n\r\nexport class GenericGameState implements NetworkState {\r\n  [key: string]: unknown | undefined\r\n\r\n  minPlayer = 1\r\n  maxPlayer = 4\r\n  networkName?: string\r\n  /**\r\n   * all connected members and their names\r\n   */\r\n  members: { [peerId: string]: string } = {}\r\n  /**\r\n   * peerId in this dict iff not playing\r\n   */\r\n  spectators: { [peerId: string]: true } = {}\r\n  /**\r\n   * local players, key: display name, value is the peerId that control this local player\r\n   */\r\n  localPlayers: { [name: string]: string } = {}\r\n  /**\r\n   * ai players, key: display name, value is the peerId that control this ai player\r\n   */\r\n  aiPlayers: { [name: string]: string } = {}\r\n  /**\r\n   * name to in game id map\r\n   */\r\n  nameDict: { [name: string]: number } = {}\r\n  /**\r\n   * in game id to name map\r\n   */\r\n  players: string[] = []\r\n  /**\r\n   * peerId in ready iff ready\r\n   */\r\n  ready: { [peerId: string]: true } = {}\r\n  started = false\r\n}\r\n","import { logger, NetworkAction, NetworkReducer, useNetwork } from 'smnet'\r\nimport { withGenericGameReducer } from './withGenericGameReducer'\r\nimport { GenericGameState, PlayerType } from './GenericGameState'\r\nimport { GameActionTypes } from './GenericGameAction'\r\nimport { ReactNode, useEffect, useMemo, useState } from 'react'\r\n\r\nexport interface GameContextInterface<State, Action> {\r\n  connect: (name: string, room: string) => Promise<void>\r\n  connected: boolean\r\n  connecting: boolean\r\n  dispatching: boolean\r\n  leave: () => Promise<void>\r\n  gameAppState: GameAppState\r\n  state: State\r\n  room?: string\r\n  isAdmin: boolean\r\n  myId?: string\r\n  kick: (id: string) => Promise<void>\r\n  ready: () => Promise<void>\r\n  start: () => Promise<void>\r\n  addLocal: (name: string) => Promise<void>\r\n  addAi: (name: string) => Promise<void>\r\n  dispatch: (action: Action) => Promise<void>\r\n  playerType: (nameOrId: string | number) => PlayerType\r\n  myPlayerId: number\r\n  myLocals: string[] // array of names\r\n  myAis: string[] // array of names\r\n  getPeerId: (playerId: number) => string\r\n  dispatchAs: (playerId: number, action: Action) => Promise<void>\r\n}\r\n\r\nexport enum GameAppState {\r\n  HOME,\r\n  ROOM,\r\n  GAME\r\n}\r\n\r\nexport interface GameNetworkProps<State extends GenericGameState, Action extends NetworkAction> {\r\n  children: ReactNode\r\n  reducer: NetworkReducer<State, Action>\r\n  initialState: State\r\n}\r\n\r\nexport const useGameNetwork = <State extends GenericGameState, Action extends NetworkAction> (reducer: NetworkReducer<State, Action>, initialState: State): GameContextInterface<State, Action> => {\r\n  const [gameAppState, setGameAppState] = useState(GameAppState.HOME)\r\n  const network = useNetwork(withGenericGameReducer(reducer), initialState)\r\n  const state = network.state as State\r\n  const myId = network.myId\r\n  const myPlayerId = useMemo(() => {\r\n    try {\r\n      return state.nameDict[state.members[myId as string]]\r\n    } catch (e) {\r\n      return -1\r\n    }\r\n  }, [myId, state])\r\n  const myLocals = useMemo(() => {\r\n    try {\r\n      return Object.keys(state.localPlayers).filter(name => state.localPlayers[name] === myId).map(peerId => state.members[peerId])\r\n    } catch (e) {\r\n      return []\r\n    }\r\n  }, [myId, state])\r\n  const myAis = useMemo(() => {\r\n    try {\r\n      return Object.keys(state.aiPlayers).filter(name => state.aiPlayers[name] === myId).map(peerId => state.members[peerId])\r\n    } catch (e) {\r\n      return []\r\n    }\r\n  }, [myId, state])\r\n\r\n  const getPeerId = (playerId: number): string => {\r\n    return Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[playerId])[0]\r\n  }\r\n\r\n  const dispatchAs = async (playerId: number, action: Action): Promise<void> => {\r\n    await network.dispatch({ ...action, peerId: getPeerId(playerId) })\r\n  }\r\n\r\n  const playerType = (nameOrId: string | number): PlayerType => {\r\n    const name: string = typeof nameOrId === 'string' ? nameOrId : network.state.players[nameOrId]\r\n    const peerId: string | undefined = Object.entries(network.state.members).find(([_peerId, n]) => name === n)?.[0]\r\n    if (peerId === undefined) {\r\n      return PlayerType.NORMAL\r\n    }\r\n    if (peerId in network.state.aiPlayers) {\r\n      return PlayerType.AI\r\n    } else if (peerId in network.state.localPlayers) {\r\n      return PlayerType.LOCAL\r\n    } else {\r\n      return PlayerType.NORMAL\r\n    }\r\n  }\r\n  const rename = async (name: string): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.RENAME,\r\n      payload: name\r\n    })\r\n  }\r\n  const ready = async (): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.READY\r\n    })\r\n  }\r\n  const start = async (): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.START\r\n    })\r\n  }\r\n  const addLocal = async (name: string): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.ADD_LOCAL,\r\n      payload: name\r\n    })\r\n  }\r\n  const addAi = async (name: string): Promise<void> => {\r\n    await network.dispatch({\r\n      type: GameActionTypes.ADD_AI,\r\n      payload: name\r\n    })\r\n  }\r\n  const connect = async (name: string, room: string): Promise<void> => {\r\n    try {\r\n      logger.info('connecting', room)\r\n      await network.join(room)\r\n      logger.info('entering with name', name)\r\n      await rename(name)\r\n      logger.info('connected', room)\r\n    } catch (e) {\r\n      logger.error(e)\r\n      await leave()\r\n      throw e\r\n    }\r\n  }\r\n  const leave = async (): Promise<void> => {\r\n    logger.info('leaving')\r\n    await network.leave()\r\n  }\r\n  const kick = async (peerId: string): Promise<void> => {\r\n    logger.info('leaving')\r\n    if (peerId in network.state.aiPlayers || peerId in network.state.localPlayers) {\r\n      await network.dispatch({\r\n        type: GameActionTypes.REMOVE_LOCAL_AI,\r\n        payload: peerId\r\n      })\r\n    } else {\r\n      await network.kick(peerId)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (network.state.started && network.networkName !== undefined) {\r\n      setGameAppState(GameAppState.GAME)\r\n    } else if (network.networkName !== undefined) {\r\n      setGameAppState(GameAppState.ROOM)\r\n    } else {\r\n      setGameAppState(GameAppState.HOME)\r\n    }\r\n  }, [network.state, network.networkName])\r\n  return {\r\n    connect,\r\n    connected: network.connected,\r\n    connecting: network.connecting,\r\n    dispatching: network.dispatching,\r\n    gameAppState,\r\n    state,\r\n    room: network.networkName,\r\n    leave,\r\n    isAdmin: network.isAdmin,\r\n    myId,\r\n    kick,\r\n    ready,\r\n    start,\r\n    dispatch: network.dispatch,\r\n    addLocal,\r\n    addAi,\r\n    playerType,\r\n    myPlayerId,\r\n    myLocals,\r\n    myAis,\r\n    getPeerId,\r\n    dispatchAs\r\n  }\r\n}\r\n","import { NetworkAction, NetworkReducer } from 'smnet'\r\nimport { GenericGameState } from './GenericGameState'\r\nimport { GameActionTypes, GenericGameAction } from './GenericGameAction'\r\nimport { v4 } from 'uuid'\r\n\r\ntype StateMapper = (prevState: GenericGameState) => GenericGameState\r\n\r\nexport const compose: <T>(...func: Array<(t: T) => T>) => ((t: T) => T) = (...funcs) => t => {\r\n  return funcs.reverse().reduce((p, func) => func(p), t)\r\n}\r\n\r\nexport const shuffle = <T> (a: T[]): T[] => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]]\r\n  }\r\n  return a\r\n}\r\n\r\nconst withMemberJoin: (peerId: string) => StateMapper = peerId => (prevState) => {\r\n  if (peerId in prevState.members) {\r\n    throw new Error(`peerId ${peerId} already joined this room`)\r\n  }\r\n  if ((prevState.maxPlayer > 0 && Object.values(prevState.members).length >= prevState.maxPlayer) || prevState.started) {\r\n    prevState.spectators[peerId] = true\r\n  }\r\n  return { ...prevState, members: { ...prevState.members, [peerId]: '' } }\r\n}\r\n\r\nconst withRename: (peerId: string, newName: string) => StateMapper = (peerId, newName) => (prevState) => {\r\n  if (Object.values(prevState.members).includes(newName)) {\r\n    throw new Error(`there is already someone named ${newName}`)\r\n  }\r\n  if (prevState.started && Object.keys(prevState.nameDict).includes(newName)) {\r\n    const { [peerId]: _, ...spectators } = prevState.spectators\r\n    prevState.spectators = spectators\r\n  }\r\n  return { ...prevState, members: { ...prevState.members, [peerId]: newName } }\r\n}\r\n\r\nconst withUpdateLocalAndAi: (oldMasterId: string, newMasterId: string | undefined) => StateMapper = (oldMasterPeerId, newMasterId) => prevState => {\r\n  const localPlayers: Record<string, string> = {}\r\n  const aiPlayers: Record<string, string> = {}\r\n  Object.entries(prevState.localPlayers).forEach(([fakePeerId, masterId]) => {\r\n    if (masterId !== oldMasterPeerId) {\r\n      localPlayers[fakePeerId] = masterId\r\n    } else if (newMasterId !== undefined) {\r\n      localPlayers[fakePeerId] = newMasterId\r\n    }\r\n  })\r\n  Object.entries(prevState.aiPlayers).forEach(([fakePeerId, masterId]) => {\r\n    if (masterId !== oldMasterPeerId) {\r\n      aiPlayers[fakePeerId] = masterId\r\n    } else if (newMasterId !== undefined) {\r\n      aiPlayers[fakePeerId] = newMasterId\r\n    }\r\n  })\r\n  return { ...prevState, localPlayers, aiPlayers }\r\n}\r\n\r\nconst withRemovePlayer: (peerId: string) => StateMapper = (peerId) => prevState => {\r\n  const { [peerId]: _1, ...members } = prevState.members\r\n  const { [peerId]: _2, ...localPlayers } = prevState.localPlayers\r\n  const { [peerId]: _3, ...aiPlayers } = prevState.aiPlayers\r\n  return { ...prevState, members, localPlayers, aiPlayers }\r\n}\r\n\r\nconst withToggleReady: (peerId: string) => StateMapper = (peerId) => prevState => {\r\n  if (prevState.ready[peerId]) {\r\n    const { [peerId]: _, ...ready } = prevState.ready\r\n    return { ...prevState, ready }\r\n  } else {\r\n    return { ...prevState, ready: { ...prevState.ready, [peerId]: true } }\r\n  }\r\n}\r\n\r\nconst withShuffleId: StateMapper = (prevState) => {\r\n  const players = shuffle(Object.entries(prevState.members).filter(([peerId]) => !prevState.spectators[peerId]).map(a => a[1]))\r\n  if (players.length > prevState.maxPlayer) {\r\n    throw new Error(`Too much players, max: ${prevState.maxPlayer}, got: ${players.length}`)\r\n  }\r\n  if (players.length < prevState.minPlayer) {\r\n    throw new Error(`Not enough players, min: ${prevState.minPlayer}, got: ${players.length}`)\r\n  }\r\n  const nameDict: Record<string, number> = {}\r\n  players.forEach((name, id) => {\r\n    nameDict[name] = id\r\n  })\r\n  return { ...prevState, nameDict, players }\r\n}\r\n\r\nconst withGameStart: (networkName: string) => StateMapper = (networkName) => prevState => {\r\n  if (prevState.started) {\r\n    throw new Error('Started already')\r\n  }\r\n  const who = Object.keys(prevState.members)\r\n    .filter(id => id !== networkName)\r\n    .filter(id => !prevState.spectators[id])\r\n    .filter(id => prevState.localPlayers[id] === undefined)\r\n    .filter(id => prevState.aiPlayers[id] === undefined)\r\n    .filter((id) => id !== undefined && !(prevState.ready[id] ?? false))\r\n  if (who.length === 0) {\r\n    return withShuffleId({ ...prevState, started: true })\r\n  } else {\r\n    throw new Error(`${who.map(id => prevState.members[id]).join(',')} not ready yet`)\r\n  }\r\n}\r\n\r\nconst withAddAiPlayer: (name: string, masterPeerId: string) => StateMapper = (name, masterPeerId) => prevState => {\r\n  const fakePeerId = `ai-${name}-${v4()}`\r\n  const nextState = compose(\r\n    withRename(fakePeerId, name),\r\n    withMemberJoin(fakePeerId)\r\n  )(prevState)\r\n  return { ...nextState, aiPlayers: { ...nextState.aiPlayers, [fakePeerId]: masterPeerId } }\r\n}\r\n\r\nconst withAddLocalPlayer: (name: string, masterPeerId: string) => StateMapper = (name, masterPeerId) => prevState => {\r\n  const fakePeerId = `local-${name}-${v4()}`\r\n  const nextState = compose(\r\n    withRename(fakePeerId, name),\r\n    withMemberJoin(fakePeerId)\r\n  )(prevState)\r\n  return { ...nextState, localPlayers: { ...nextState.localPlayers, [fakePeerId]: masterPeerId } }\r\n}\r\n\r\nexport const generalGameReducer: NetworkReducer<GenericGameState, GenericGameAction> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('expect peerId in action')\r\n  }\r\n  const networkName = prevState.networkName\r\n  if (networkName === undefined) {\r\n    throw new Error('expect networkName in prevState')\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.MEMBER_JOIN:\r\n      return withMemberJoin(peerId)(prevState)\r\n    case GameActionTypes.RENAME:\r\n      return withRename(peerId, action.payload)(prevState)\r\n    case GameActionTypes.MEMBER_LEFT:\r\n      return compose(\r\n        withUpdateLocalAndAi(action.payload, networkName),\r\n        withRemovePlayer(action.payload)\r\n      )(prevState)\r\n    case GameActionTypes.HOST_LEFT:\r\n      return compose(\r\n        withUpdateLocalAndAi(action.payload, networkName),\r\n        withRename(networkName, prevState.members[action.payload]),\r\n        withRemovePlayer(action.payload)\r\n      )(prevState)\r\n    case GameActionTypes.READY:\r\n      return withToggleReady(peerId)(prevState)\r\n    case GameActionTypes.START:\r\n      return withGameStart(networkName)(prevState)\r\n    case GameActionTypes.ADD_AI:\r\n      return withAddAiPlayer(action.payload, peerId)(prevState)\r\n    case GameActionTypes.ADD_LOCAL:\r\n      return withAddLocalPlayer(action.payload, peerId)(prevState)\r\n    case GameActionTypes.REMOVE_LOCAL_AI:\r\n      return withRemovePlayer(action.payload)(prevState)\r\n    default:\r\n      return prevState\r\n  }\r\n}\r\n\r\nexport const withGenericGameReducer = <State extends GenericGameState, Action extends NetworkAction> (reducer: NetworkReducer<State, Action>): NetworkReducer<GenericGameState, NetworkAction> => {\r\n  return (prevState, action) => {\r\n    return reducer(generalGameReducer(prevState, action as GenericGameAction) as State, action as Action)\r\n  }\r\n}\r\n","import { GameActionTypes, GenericBoardGameAction } from 'gamenet'\r\nimport { Card } from './types'\r\nimport { NetworkAction } from 'smnet'\r\n\r\nexport enum Poker99ActionType {\r\n  PLAY_CARD,\r\n  LOCAL_MOVE,\r\n  END,\r\n}\r\n\r\nexport interface PlayCardPayload {\r\n  card: Card\r\n  increase?: boolean\r\n  target?: number\r\n}\r\n\r\nexport type Poker99Action = (({\r\n  type: Poker99ActionType.PLAY_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: Poker99ActionType.END\r\n} | {\r\n  type: GameActionTypes\r\n  payload: never\r\n}) & NetworkAction) | GenericBoardGameAction\r\n","import { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload } from './Poker99Action'\r\n\r\nexport enum Suit {\r\n  SPADE,\r\n  HEART,\r\n  CLUB,\r\n  DIAMOND\r\n}\r\n\r\nexport interface Card {\r\n  suit: Suit\r\n  number: number\r\n}\r\n\r\nexport type Deck = Card[]\r\n\r\nexport type StateMapper = (prevState: Poker99State) => Poker99State\r\n\r\nexport type IsCard = (card: Card) => boolean\r\n\r\nexport type PlayCard = (payload: PlayCardPayload, playerId: number) => StateMapper\r\n","import { useEffect, useMemo, useState } from 'react'\r\nimport { NetworkAction, NetworkReducer, NetworkState } from './types'\r\nimport { Network } from './Network'\r\nimport { StateManager } from './StateManager'\r\nimport { PeerFactory } from './PeerFactory'\r\nimport { logger } from './Logger'\r\n\r\nexport interface UseNetworkReturn<State extends NetworkState, Action extends NetworkAction> {\r\n  state: State\r\n  connected: boolean\r\n  connecting: boolean\r\n  dispatching: boolean\r\n  networkName: string | undefined\r\n  join: (networkName: string, peerFactory?: PeerFactory) => Promise<void>\r\n  leave: () => Promise<void>\r\n  dispatch: (action: Action) => Promise<void>\r\n  isAdmin: boolean\r\n  myId?: string\r\n  kick: (id: string) => Promise<void>\r\n}\r\n\r\nexport function useNetwork<State extends NetworkState = NetworkState, Action extends NetworkAction = NetworkAction> (reducer: NetworkReducer<State, Action>, initialState: State): UseNetworkReturn<State, Action> {\r\n  const [state, setState] = useState(initialState)\r\n  const [connecting, setConnecting] = useState(false)\r\n  const [dispatching, setDispatching] = useState(false)\r\n  const network = useMemo(() => new Network(reducer, StateManager.make(initialState, setState, 10)), [])\r\n  useEffect(() => {\r\n    if (process.env.REACT_APP_DISABLE_SMNET_WINDOW_VAR === undefined) {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/ban-ts-comment\r\n      // @ts-expect-error\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      window.stateHistory = network.getHistory; window.smnetLog = logger; window.network = network\r\n    }\r\n    return () => {\r\n      network.leave()\r\n        .catch(logger.error)\r\n    }\r\n  }, [network])\r\n  const join = async (networkName: string, peerFactory?: PeerFactory) => {\r\n    setConnecting(true)\r\n    await network.join(networkName, peerFactory).finally(() => {\r\n      setConnecting(false)\r\n    })\r\n  }\r\n  const dispatch = async (action: Action) => {\r\n    setDispatching(true)\r\n    await network.dispatch(action).finally(() => {\r\n      setDispatching(false)\r\n    })\r\n  }\r\n  return Object.freeze({\r\n    join,\r\n    leave: network.leave.bind(network),\r\n    dispatch,\r\n    state,\r\n    connected: network.connected,\r\n    connecting: network.connecting,\r\n    dispatching: network.dispatching,\r\n    networkName: network.getNetworkName(),\r\n    isAdmin: network.isAdmin,\r\n    myId: network.myId,\r\n    kick: network.kick\r\n  })\r\n}\r\n","import { GenericGameState } from '../Generic/GenericGameState'\r\n\r\nexport class GenericBoardGameState extends GenericGameState {\r\n  turn = 0\r\n}\r\n","import { GenericGameState } from 'gamenet'\r\nimport { Deck } from './types'\r\n\r\nexport class Poker99State extends GenericGameState {\r\n  maxPlayer = 4\r\n  minPlayer = 4\r\n  turn = 0\r\n  direction = 1\r\n  points = 0\r\n  dead: Record<number, true> = {}\r\n  drawDeck: Deck = []\r\n  trashDeck: Deck = []\r\n  playerDeck: Deck[] = []\r\n  winner?: number\r\n  logs: string[] = []\r\n}\r\n","export const cardPoints: Record<number, number> = {\r\n  1: 1, // spade set 1\r\n  2: 2,\r\n  3: 3,\r\n  4: 0, // reverse\r\n  5: 0, // target\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10, // +- 10\r\n  11: 0, //  skip\r\n  12: 20, // +=20\r\n  13: 99 //   set to 99\r\n}\r\n\r\nexport const maxCard = 5\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isBombCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 13\r\n}\r\n\r\nexport const bomb: PlayCard = ({ card }) => state => {\r\n  if (isBombCard(card)) {\r\n    state.points = 99\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard, Suit } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isNormalCard: IsCard = (card: Card): boolean => {\r\n  if (card.suit === Suit.SPADE && card.number === 1) {\r\n    return false\r\n  } else {\r\n    return [1, 2, 3, 6, 7, 8, 9].includes(card.number)\r\n  }\r\n}\r\n\r\nexport const normal: PlayCard = ({ card }) => state => {\r\n  if (isNormalCard(card)) {\r\n    const points = state.points + cardPoints[card.number]\r\n    if (points > 99) {\r\n      throw new Error('playing this card will exceed 99')\r\n    }\r\n    return withEndTurn(withIncrementTurn({ ...state, points }))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isPmCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 10 || card.number === 12\r\n}\r\n\r\nexport const pm: PlayCard = ({ card, increase }) => state => {\r\n  if (isPmCard(card)) {\r\n    if (increase === undefined) {\r\n      throw new Error('increase is required in payload')\r\n    }\r\n    const points = state.points + (increase ? cardPoints[card.number] : -cardPoints[card.number])\r\n    if (points > 99) {\r\n      throw new Error('playing this card will exceed 99')\r\n    }\r\n    return withEndTurn(withIncrementTurn({ ...state, points }))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isReverseCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 4\r\n}\r\n\r\nexport const reverse: PlayCard = ({ card }) => state => {\r\n  if (isReverseCard(card)) {\r\n    state.direction *= -1\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isSkipCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 11\r\n}\r\n\r\nexport const skip: PlayCard = ({ card }) => state => {\r\n  if (isSkipCard(card)) {\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn } from '../Poker99Reducer'\r\n\r\nexport const isTargetCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 5\r\n}\r\n\r\nexport const target: PlayCard = ({ card, target }, playerId) => state => {\r\n  if (isTargetCard(card)) {\r\n    if (target === undefined) {\r\n      throw new Error('target is required in payload')\r\n    }\r\n    if (target === playerId) {\r\n      throw new Error('cannot target myself')\r\n    }\r\n    state.turn = target\r\n    return withEndTurn(state)\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard, Suit } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isSpade1Card: IsCard = (card: Card): boolean => {\r\n  return card.number === 1 && card.suit === Suit.SPADE\r\n}\r\n\r\nexport const spade1: PlayCard = ({ card }) => state => {\r\n  if (isSpade1Card(card)) {\r\n    state.points = 1\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { NetworkReducer } from 'smnet'\r\nimport { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload, Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { Deck, PlayCard, StateMapper, Suit } from './types'\r\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\r\nimport { maxCard } from './constants'\r\nimport { minPossible } from './utils'\r\nimport cloneDeep from 'clone-deep'\r\nimport { bomb } from './cards/bomb'\r\nimport { normal } from './cards/normal'\r\nimport { pm } from './cards/pm'\r\nimport { reverse } from './cards/reverse'\r\nimport { skip } from './cards/skip'\r\nimport { target } from './cards/target'\r\nimport { spade1 } from './cards/spade1'\r\n\r\nconst getFullDeck = (): Deck => {\r\n  const deck: Deck = []\r\n  for (let suit = 0; suit < 4; suit++) {\r\n    for (let number = 1; number <= 13; number++) {\r\n      deck.push({ suit, number })\r\n    }\r\n  }\r\n  return deck\r\n}\r\n\r\nconst withDrawCard: (playerId: number) => StateMapper = playerId => prevState => {\r\n  if (prevState.playerDeck[playerId].length >= maxCard) {\r\n    throw new Error(`cannot draw, ${prevState.players[playerId]} already has ${maxCard} cards`)\r\n  }\r\n  const card = prevState.drawDeck.shift()\r\n  if (card === undefined) {\r\n    return withDrawCard(playerId)({ ...prevState, drawDeck: shuffle(prevState.trashDeck), trashDeck: [] })\r\n  } else {\r\n    prevState.playerDeck[playerId].push(card)\r\n    return { ...prevState }\r\n  }\r\n}\r\n\r\nconst withInitGame: StateMapper = (prevState: Poker99State) => {\r\n  prevState = {\r\n    ...prevState,\r\n    drawDeck: [],\r\n    trashDeck: [],\r\n    playerDeck: [],\r\n    points: 0,\r\n    direction: 1,\r\n    turn: 0,\r\n    dead: {},\r\n    logs: ['game started'],\r\n    winner: undefined\r\n  }\r\n  prevState.drawDeck = shuffle(getFullDeck())\r\n  for (let id = 0; id < prevState.players.length; id++) {\r\n    prevState.playerDeck[id] = []\r\n    for (let k = 0; k < maxCard; k++) {\r\n      prevState = withDrawCard(id)(prevState)\r\n    }\r\n  }\r\n  return { ...prevState }\r\n}\r\n\r\nconst withDiscardCard: PlayCard = ({ card }, playerId) => state => {\r\n  state.trashDeck.push(card)\r\n  state.playerDeck[playerId] = state.playerDeck[playerId].filter(({ suit, number }) => !(suit === card.suit && number === card.number))\r\n  return state\r\n}\r\n\r\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => StateMapper = (playerId, payload) => prevState => {\r\n  const { card } = payload\r\n  const cardStr = `${Suit[card.suit]}${card.number}`\r\n  if (prevState.playerDeck[playerId].find(({ suit, number }) => suit === card.suit && number === card.number) === undefined) {\r\n    throw new Error(`${prevState.players[playerId]} doesnt own card ${cardStr}`)\r\n  }\r\n  if (prevState.turn !== playerId) {\r\n    throw new Error('not your turn')\r\n  }\r\n  return compose(\r\n    withDrawCard(playerId),\r\n    ...[withDiscardCard, bomb, normal, pm, reverse, skip, target, spade1].map(playCard => playCard(payload, playerId))\r\n  )(prevState)\r\n}\r\n\r\nexport const withIncrementTurn: StateMapper = prevState => {\r\n  const nextPlayerId = (prevState.turn + prevState.maxPlayer + prevState.direction) % prevState.maxPlayer\r\n  return { ...prevState, turn: nextPlayerId }\r\n}\r\n\r\nexport const withEndTurn: StateMapper = prevState => {\r\n  if (!prevState.dead[prevState.turn] && minPossible(prevState.points, prevState.playerDeck[prevState.turn])[0] > 99) {\r\n    prevState.logs.push(`${prevState.players[prevState.turn]} die, his card: ${prevState.playerDeck[prevState.turn].map(card => (\r\n      `${Suit[card.suit]}${card.number}`)\r\n    ).join(',')}`)\r\n    prevState.dead[prevState.turn] = true\r\n  }\r\n  if (Object.keys(prevState.dead).length === prevState.players.length - 1 && prevState.started) {\r\n    prevState.winner = [0, 1, 2, 3].filter(k => !prevState.dead[k])[0]\r\n  }\r\n  if (prevState.dead[prevState.turn]) {\r\n    return withEndTurn(withIncrementTurn({ ...prevState, turn: prevState.turn }))\r\n  } else {\r\n    return { ...prevState, turn: prevState.turn }\r\n  }\r\n}\r\n\r\nexport const Poker99Reducer: NetworkReducer<Poker99State, Poker99Action> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('Expect peerId in action')\r\n  }\r\n  const playerId = (): number => {\r\n    const id = prevState.nameDict[prevState.members[peerId]]\r\n    if (id === undefined) {\r\n      throw new Error('game not started')\r\n    }\r\n    return id\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.START:\r\n      return withInitGame(prevState)\r\n    case Poker99ActionType.PLAY_CARD:\r\n      return withPlayCard(playerId(), action.payload)(cloneDeep(prevState))\r\n    case Poker99ActionType.END:\r\n      return { ...prevState, started: false }\r\n  }\r\n  return prevState\r\n}\r\n","import { Card, Suit } from './types'\r\nimport { cardPoints } from './constants'\r\n\r\nexport const minPossible = (current: number, cards: Card[]): number[] => {\r\n  let min = Infinity\r\n  let index = 0\r\n  cards.forEach(({ suit, number }, k) => {\r\n    let next = 0\r\n    if (suit === Suit.SPADE && number === 1) {\r\n      return [0, k]\r\n    } else if (number === 10) {\r\n      next = current - 10\r\n    } else if (number === 12) {\r\n      next = current - 20\r\n    } else if (number === 13) {\r\n      next = 99\r\n    } else {\r\n      next = current + cardPoints[number]\r\n    }\r\n    if (next < min) {\r\n      min = next\r\n      index = k\r\n    }\r\n  })\r\n  return [min, index]\r\n}\r\n","import { Poker99State } from './Poker99State'\r\nimport { Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { Card } from './types'\r\nimport { cardPoints } from './constants'\r\nimport { shuffle } from 'gamenet'\r\nimport { isNormalCard } from './cards/normal'\r\nimport { isPmCard } from './cards/pm'\r\n\r\nconst isSkippingCard = (card: Card): boolean => {\r\n  return [4, 5, 11, 13].includes(card.number)\r\n}\r\n\r\nexport const aiAction = (state: Poker99State, turn: number): Poker99Action => {\r\n  const cards = state.playerDeck[turn]\r\n  const points = state.points\r\n  const normalCards = cards.filter(isNormalCard).sort((a, b) => cardPoints[b.number] - cardPoints[a.number])\r\n  const card13 = cards.find(c => c.number === 13)\r\n  if (card13 !== undefined) {\r\n    if (points !== 99 && normalCards.length < 3) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card: card13\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const card of normalCards) {\r\n    if (points + cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card\r\n        }\r\n      })\r\n    }\r\n  }\r\n  const pmCards = cards.filter(isPmCard)\r\n  for (const card of pmCards.sort((a, b) => b.number - a.number)) {\r\n    if (points + cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: true\r\n        }\r\n      })\r\n    }\r\n  }\r\n  {\r\n    const card = cards.find(isSkippingCard)\r\n    if (card !== undefined) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          target: state.nameDict[shuffle(state.players.filter((name, id) => !state.dead[id] && id !== turn))[0]]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (const card of pmCards.sort((a, b) => a.number - b.number)) {\r\n    if (points - cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n  for (const card of cards) {\r\n    if (points - cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n  throw new Error('reached an edge case')\r\n}\r\n","import React, { createContext, FunctionComponent, useContext } from 'react'\r\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\r\nimport { Poker99State } from './poker99/Poker99State'\r\nimport { Poker99Reducer } from './poker99/Poker99Reducer'\r\nimport { Poker99Action } from './poker99/Poker99Action'\r\nimport { aiAction } from './poker99/aiAction'\r\n\r\nconst Poker99Context = createContext<BoardGameContextInterface<Poker99State, Poker99Action> | null>(null)\r\n\r\nexport const withPoker99Network = (Component: FunctionComponent): FunctionComponent => {\r\n  const WithGameNetwork: FunctionComponent = props => {\r\n    const network = useBoardGameNetwork(Poker99Reducer, new Poker99State(), aiAction)\r\n    return (\r\n      <Poker99Context.Provider value={network}>\r\n        <Component {...props} />\r\n      </Poker99Context.Provider>\r\n    )\r\n  }\r\n  WithGameNetwork.displayName = 'WithGameNetwork'\r\n  return WithGameNetwork\r\n}\r\n\r\nexport const usePoker99 = (): BoardGameContextInterface<Poker99State, Poker99Action> => {\r\n  const network: BoardGameContextInterface<Poker99State, Poker99Action> | null = useContext(Poker99Context)\r\n  if (network === null) {\r\n    throw new Error('please wrap it using withPoker99Network before calling this hook')\r\n  }\r\n  return network\r\n}\r\n","import React, { FunctionComponent, ReactNode, useState } from 'react'\r\nimport { usePoker99 } from './withPoker99Network'\r\nimport { Card, Suit } from './poker99/types'\r\nimport { Poker99Action, Poker99ActionType } from './poker99/Poker99Action'\r\n\r\nexport const Game: FunctionComponent = () => {\r\n  const {\r\n    state,\r\n    dispatch,\r\n    dispatchAs,\r\n    myPlayerId,\r\n    myLocals,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  } = usePoker99()\r\n  const [target, setTarget] = useState(0)\r\n  const [increment, setIncrement] = useState(true)\r\n  const d = state.direction === 1 ? '>' : '<'\r\n  const handleError = (e: Error): void => {\r\n    setError(e.message)\r\n  }\r\n  const clickCard = (card: Card) => async () => {\r\n    const action: Poker99Action = {\r\n      type: Poker99ActionType.PLAY_CARD,\r\n      payload: {\r\n        card,\r\n        increase: increment,\r\n        target\r\n      }\r\n    }\r\n    if (state.turn === myPlayerId) {\r\n      await dispatch(action).then(() => setError('')).catch(handleError)\r\n    } else if (myLocals.includes(state.players[state.turn])) {\r\n      await dispatchAs(state.turn, action).then(() => setError('')).catch(handleError)\r\n    }\r\n  }\r\n  const renderDeck = (playerId: number): ReactNode => state.playerDeck[playerId]?.map(card => (\r\n    <button key={card.number * 10 + card.suit} onClick={clickCard(card)}>\r\n      {Suit[card.suit]} {card.number}\r\n    </button>\r\n  ))\r\n  const renderLocalDeck = (): ReactNode => {\r\n    return hideDeck ? <button onClick={() => setHideDeck(false)}>show {state.players[renderedDeckId]}</button>\r\n      : renderDeck(renderedDeckId)\r\n  }\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: Poker99ActionType.END\r\n    }).catch(handleError)\r\n  }\r\n  return (\r\n    <div style={{ pointerEvents: 'all' }}>\r\n      <div>\r\n        <h3>{state.points}</h3>\r\n        <h6>{state.players[state.turn]}{'\\''}s turn</h6>\r\n        {error !== '' && <div style={{ color: 'red' }}>{error}</div>}\r\n        {state.winner !== undefined && state.winner !== null && <div>winner is {state.players[state.winner]}\r\n          <button onClick={again}>again</button>\r\n        </div>}\r\n        {state.players.map((name, id) => (\r\n          <span\r\n            key={name}\r\n            onClick={() => setTarget(id)}\r\n            style={{\r\n              fontWeight: state.turn === id ? 'bold' : 'normal',\r\n              textDecorationLine: state.dead[id] ? 'line-through' : 'none'\r\n            }}>\r\n          {name} {d}\r\n        </span>\r\n        ))}\r\n        <div>\r\n          {\r\n            myLocals.length === 0\r\n              ? renderDeck(myPlayerId)\r\n              : renderLocalDeck()\r\n          }\r\n        </div>\r\n        <div>\r\n          target: {target}\r\n        </div>\r\n        <button onClick={() => setIncrement(!increment)}>\r\n          {increment ? '+' : '-'}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst transition = (time: number, props: string[], ease = 'ease'): { transition: string } => ({\r\n  transition: props.map(p => `${time}s ${p} ${ease}`).join(',')\r\n})\r\n\r\nconst props = {\r\n  GameRenderer: PropTypes.node,\r\n  gameAppState: PropTypes.number.isRequired,\r\n  children: PropTypes.arrayOf(PropTypes.node.isRequired).isRequired,\r\n  fullPage: PropTypes.arrayOf(PropTypes.bool)\r\n}\r\n\r\nexport const GamePagesSlider: FunctionComponent<PropTypes.InferProps<typeof props>> = ({ GameRenderer, gameAppState, children, fullPage = [false, false, true] }) => {\r\n  return (\r\n    <div style={{ width: '100vw', height: '100vh', overflow: 'hidden', position: 'relative' }}>\r\n      {GameRenderer}\r\n      {children?.slice().reverse().map((child, k) => {\r\n        const index = children.length - 1 - k\r\n        return <div\r\n          key={k}\r\n          style={{\r\n            ...(fullPage?.[index] ? { pointerEvents: 'none' } : { justifyContent: 'center', alignItems: 'center' }),\r\n            display: 'flex',\r\n            height: '100vh',\r\n            width: '100vw',\r\n            left: `${-(gameAppState - index) * 100}%`,\r\n            position: 'absolute',\r\n            ...transition(0.3, ['left'], 'linear')\r\n          }}>\r\n          {child}\r\n        </div>\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nGamePagesSlider.propTypes = props\r\n","import { animals, colors, uniqueNamesGenerator } from 'unique-names-generator'\r\n\r\nexport const getRandomName = (): string => {\r\n  return uniqueNamesGenerator({\r\n    dictionaries: [colors, animals],\r\n    style: 'capital',\r\n    separator: ' '\r\n  })\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { CircularProgress } from '@material-ui/core'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst propTypes = {\r\n  children: PropTypes.node,\r\n  loading: PropTypes.bool.isRequired,\r\n  size: PropTypes.number\r\n}\r\n\r\nexport const Loading: FunctionComponent<PropTypes.InferProps<typeof propTypes>> = (props) => {\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      {props.children}\r\n      {props.loading && <CircularProgress size={props.size ?? 24} style={{\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12\r\n      }}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nLoading.propTypes = propTypes\r\n","import React, { FunctionComponent, useState } from 'react'\r\nimport { Button, Grid, Paper, TextField, Typography } from '@material-ui/core'\r\nimport { getRandomName } from './getRandomName'\r\nimport { Alert } from '@material-ui/lab'\r\nimport { Loading } from './Loading'\r\n\r\nexport const Home: FunctionComponent<{ connect: (name: string, room: string) => Promise<void>, connecting: boolean }> = ({ connect, connecting }) => {\r\n  const [name, setName] = useState(getRandomName())\r\n  const [room, setRoom] = useState('')\r\n  const [error, setError] = useState('')\r\n  const join = async (): Promise<void> => await connect(name, room).catch((error: Error) => setError(error.message))\r\n  return (\r\n    <Paper elevation={3} style={{ padding: '32px 64px' }}>\r\n      <Grid container justify='flex-end' direction='column' spacing={3}>\r\n        <Grid item>\r\n          <Typography variant=\"h5\">Welcome to Poker 99</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField label='Your Name' value={name} onChange={({ target: { value } }) => setName(value)} fullWidth/>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField label='Room Code' value={room} onChange={({ target: { value } }) => setRoom(value)} fullWidth/>\r\n        </Grid>\r\n        {error !== '' && <Alert severity='error'>{error}</Alert>}\r\n        <Grid item container justify='flex-end'>\r\n          <Loading loading={connecting}>\r\n            <Button\r\n              color='primary'\r\n              variant='contained'\r\n              disabled={name === '' || room === '' || connecting}\r\n              onClick={join}>\r\n              join\r\n            </Button>\r\n          </Loading>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { SvgIcon } from '@material-ui/core'\r\n\r\nexport const PersonAdd: FunctionComponent = () => (\r\n  <SvgIcon>\r\n    <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\r\n      <path\r\n        d=\"M12,5.5c2.2,0,4,1.8,4,4s-1.8,4-4,4s-4-1.8-4-4S9.8,5.5,12,5.5 M12,7.5c-1.1,0-2,0.9-2,2s0.9,2,2,2s2-0.9,2-2\r\n            S13.1,7.5,12,7.5 M12,14.5c2.7,0,8,1.3,8,4v3H4v-3C4,15.8,9.3,14.5,12,14.5 M12,16.4c-3,0-6.1,1.5-6.1,2.1v1.1h12.2v-1.1\r\n            C18.1,17.9,15,16.4,12,16.4z\"\r\n      />\r\n      <path d=\"M17.9,1.8v3h-3v2h3v3h2v-3h3v-2h-3v-3H17.9z\"/>\r\n    </svg>\r\n  </SvgIcon>\r\n)\r\n","import React, { FunctionComponent } from 'react'\r\nimport { SvgIcon } from '@material-ui/core'\r\n\r\nexport const RobotAdd: FunctionComponent = () => (\r\n  <SvgIcon>\r\n    <svg style={{ width: '24px', height: '24px' }} viewBox=\"0 0 24 24\">\r\n      <path\r\n        d=\"M11,4c1,0,1.7,0.8,1.7,1.7c0,0.6-0.3,1.2-0.9,1.5v1.1h0.9c3.3,0,6.1,2.7,6.1,6.1l0,0h0.9c0.5,0,0.9,0.4,0.9,0.9v2.6\r\n  c0,0.5-0.4,0.9-0.9,0.9H19v0.9c0,1-0.8,1.7-1.7,1.7H5.1c-1,0-1.7-0.8-1.7-1.7v-0.9H2.5c-0.5,0-0.9-0.4-0.9-0.9v-2.6\r\n  c0-0.5,0.4-0.9,0.9-0.9h0.9c0-3.3,2.7-6.1,6.1-6.1h0.9V7.2C9.8,7,9.5,6.4,9.5,5.8C9.5,4.8,10.2,4,11.2,4 M7.3,13.5\r\n  c-1.2,0-2.2,1-2.2,2.2c0,1.2,1,2.2,2.2,2.2s2.2-1,2.2-2.2C9.5,14.5,8.5,13.5,7.3,13.5 M15.1,13.5c-1.2,0-2.2,1-2.2,2.2\r\n  c0,1.2,1,2.2,2.2,2.2s2.2-1,2.2-2.2C17.2,14.5,16.3,13.5,15.1,13.5z\"\r\n      />\r\n      <path d=\"M17.9,1.8v3h-3v2h3v3h2v-3h3v-2h-3v-3H17.9z\"/>\r\n    </svg>\r\n  </SvgIcon>\r\n)\r\n","import React, { PropsWithChildren, useState } from 'react'\r\nimport { BoardGameContextInterface, GenericBoardGameState, GenericGameAction, PlayerType } from 'gamenet'\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  useTheme\r\n} from '@material-ui/core'\r\nimport { CancelOutlined, Person, PersonOutline, Visibility } from '@material-ui/icons'\r\nimport { AccountCheck, Crown, Robot } from 'mdi-material-ui'\r\nimport { RobotAdd } from './RobotAdd'\r\nimport { PersonAdd } from './PersonAdd'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport { getRandomName } from './getRandomName'\r\nimport { Loading } from './Loading'\r\n\r\nexport const Room = <S extends GenericBoardGameState, A extends GenericGameAction>({ room, state, leave, isAdmin, myId, kick, ready, start, addAi, addLocal, playerType, dispatching }: PropsWithChildren<BoardGameContextInterface<S, A>> ) => {\r\n  const [error, setError] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [creatingLocal, setCreatingLocal] = useState<boolean | undefined>(undefined)\r\n  const theme = useTheme()\r\n  const handleStartClick = async (): Promise<void> => {\r\n    await start().catch((e: Error) => setError(e.message))\r\n  }\r\n  const handleReadyClick = async (): Promise<void> => {\r\n    await ready().catch((e: Error) => setError(e.message))\r\n  }\r\n  const handleAddAiClick = async (): Promise<void> => {\r\n    await addAi(getRandomName()).catch((e: Error) => setError(e.message))\r\n  }\r\n  const handleCloseClick = (): void => {\r\n    setName('')\r\n    setCreatingLocal(undefined)\r\n  }\r\n  const createLocalOrAI = async (): Promise<void> => {\r\n    if (name !== '') {\r\n      if (creatingLocal === true) {\r\n        await addLocal(name).catch((e: Error) => setError(e.message))\r\n      } else if (creatingLocal === false) {\r\n        await addAi(name).catch((e: Error) => setError(e.message))\r\n      }\r\n    }\r\n    handleCloseClick()\r\n  }\r\n  const getIcon = (peerId: string, name: string): React.ReactNode => {\r\n    if (peerId in state.spectators) {\r\n      return <Grid item title='spectator'>\r\n        <Visibility/>\r\n      </Grid>\r\n    } else if (state.networkName === peerId) {\r\n      return <Grid item title='host'>\r\n        <Crown/>\r\n      </Grid>\r\n    } else if (playerType(name) === PlayerType.NORMAL) {\r\n      if(state.ready[peerId]) {\r\n        return <Grid item title='player ready'>\r\n          <AccountCheck/>\r\n        </Grid>\r\n      }else{\r\n        return <Grid item title='player not ready'>\r\n          <Person/>\r\n        </Grid>\r\n      }\r\n    } else if (playerType(name) === PlayerType.LOCAL) {\r\n      return <Grid item title='hot seat player'>\r\n        <PersonOutline/>\r\n      </Grid>\r\n    } else if (playerType(name) === PlayerType.AI) {\r\n      return <Grid item title='AI player'>\r\n        <Robot/>\r\n      </Grid>\r\n    }\r\n  }\r\n\r\n  const renderHintText = (peerId: string, name: string) => {\r\n    if (peerId === state.networkName) {\r\n      return `${name} is the host`\r\n    }else if (peerId in state.spectators) {\r\n      return `${name} is a spectator`\r\n    } else if (peerId in state.localPlayers) {\r\n      return `${name} is a local player of ${state.members[state.localPlayers[peerId]]}`\r\n    } else if (peerId in state.aiPlayers) {\r\n      return `${name} is an ai player of ${state.members[state.aiPlayers[peerId]]}`\r\n    } else {\r\n      if (state.ready[peerId]) {\r\n        return `${name} is not ready yet`\r\n      } else {\r\n        return `${name} is ready`\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper elevation={3} style={{ padding: '32px 64px', width: '400px' }}>\r\n      <Grid container justify='flex-end' direction='column' spacing={3}>\r\n        <Grid item>\r\n          <Typography variant=\"h5\">Room: {room}</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid container justify='space-between' alignItems='flex-end'>\r\n            <Grid item>\r\n              <Typography variant=\"h6\">Players</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton size='medium' title='Add Local Hot Seat player' onClick={() => setCreatingLocal(true)}>\r\n                <PersonAdd/>\r\n              </IconButton>\r\n              <IconButton size='medium' title='Add AI Player' onClick={handleAddAiClick}>\r\n                <RobotAdd/>\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider/>\r\n          <List>\r\n            {Object.entries(state.members).map(([id, name]) => {\r\n              const color = (id === state.networkName || [PlayerType.LOCAL, PlayerType.AI].includes(playerType(name)))\r\n                ? theme.palette.primary.main\r\n                : state.ready[id] ? theme.palette.success.main : theme.palette.text.secondary\r\n              return (\r\n                <ListItem\r\n                  key={id}\r\n                  title={renderHintText(id, name)}\r\n                  style={{ color }}>\r\n                  <ListItemIcon>\r\n                    <span style={{ color }}>\r\n                      {getIcon(id, name)}\r\n                    </span>\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    {name}\r\n                  </ListItemText>\r\n                  {((isAdmin || [PlayerType.LOCAL, PlayerType.AI].includes(playerType(name))) && id !== myId && id !== state.networkName) &&\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => kick(id)} title='Kick'>\r\n                      <CancelOutlined color='error'/>\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>}\r\n                </ListItem>\r\n              )\r\n            })}\r\n          </List>\r\n        </Grid>\r\n        {error !== '' && <Alert severity='error'>{error}</Alert>}\r\n        <Grid item container justify='flex-end' spacing={1}>\r\n          <Grid item>\r\n            <Button variant='contained' color='secondary' onClick={leave}>leave</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Loading loading={dispatching}>\r\n              {isAdmin\r\n                ? <Button variant='contained' color='primary' disabled={dispatching} onClick={handleStartClick}>start</Button>\r\n                : <Button variant='contained' color='primary' disabled={dispatching} onClick={handleReadyClick}>{state.ready[myId ?? ''] ? 'unready' : 'ready'}</Button>}\r\n            </Loading>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Dialog open={creatingLocal !== undefined} onClose={handleCloseClick} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Name for new {creatingLocal === true ? 'local' : 'AI'} player</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Name\"\r\n            fullWidth\r\n            value={name}\r\n            onChange={({ target }) => setName(target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseClick} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createLocalOrAI} color=\"primary\">\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { Game } from './Game'\r\nimport { usePoker99, withPoker99Network } from './withPoker99Network'\r\nimport { GamePagesSlider, Home, Room } from 'gamenet-material'\r\n\r\nexport const GameApp: FunctionComponent = withPoker99Network(() => {\r\n  const network = usePoker99()\r\n  return (\r\n    <GamePagesSlider gameAppState={network.gameAppState} fullPage={[false, false, true]}>\r\n      <Home {...network} />\r\n      <Room {...network} />\r\n      <Game />\r\n    </GamePagesSlider>\r\n  )\r\n})\r\n","import { NetworkAction, NetworkReducer } from 'smnet'\r\nimport { GenericBoardGameState } from './GenericBoardGameState'\r\nimport { GenericBoardGameAction } from './GenericBoardGameAction'\r\nimport { GameContextInterface, GameNetworkProps, useGameNetwork } from '../Generic/useGameNetwork'\r\nimport { withGenericBoardGameReducer } from './withGenericBoardGameReducer'\r\nimport { useEffect, useRef, useState } from 'react'\r\n\r\nexport interface BoardGameContextInterface<State extends GenericBoardGameState, Action extends NetworkAction> extends GameContextInterface<State, Action> {\r\n  hideDeck: boolean\r\n  setHideDeck: (flag: boolean) => void\r\n  renderedDeckId: number\r\n  error: string\r\n  setError: (message: string) => void\r\n}\r\n\r\ntype AiAction<State extends GenericBoardGameState, Action extends NetworkAction> = (state: State, turn: number) => Action\r\n\r\nexport interface BoardGameNetworkProps<State extends GenericBoardGameState, Action extends GenericBoardGameAction> extends GameNetworkProps<State, Action> {\r\n  aiAction: AiAction<State, Action>\r\n}\r\n\r\nexport const useBoardGameNetwork = <State extends GenericBoardGameState, Action extends NetworkAction> (reducer: NetworkReducer<State, Action>, initialState: State, aiAction: AiAction<State, Action>): BoardGameContextInterface<State, Action> => {\r\n  const network = useGameNetwork(withGenericBoardGameReducer(reducer), initialState)\r\n  const { myLocals, myPlayerId, myAis, dispatchAs } = network\r\n  const state = network.state as State\r\n  const [error, setError] = useState('')\r\n  let [hideDeck, setHideDeck] = useState(myLocals.length > 0)\r\n  const [renderedDeckId, setRenderedDeckId] = useState(myPlayerId)\r\n  const prevTurn = useRef(-1)\r\n  if (state.turn !== prevTurn.current) {\r\n    if (myLocals.length > 0) {\r\n      hideDeck = true\r\n      setHideDeck(true)\r\n      setRenderedDeckId(state.turn)\r\n    }\r\n    prevTurn.current = state.turn\r\n  }\r\n  const handleError = (e: Error): void => {\r\n    setError(e.message)\r\n  }\r\n  useEffect(() => {\r\n    if (myAis.includes(state.players[state.turn]) && state.started && state.winner === undefined) {\r\n      const cb = (): void => {\r\n        const action = aiAction(state, state.turn)\r\n        // action.peerId = Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[state.turn])[0]\r\n        dispatchAs(state.turn, action).catch(handleError)\r\n      }\r\n      const n = window.setTimeout(cb, 500)\r\n      return () => {\r\n        window.clearTimeout(n)\r\n      }\r\n    }\r\n  }, [state])\r\n  return {\r\n    ...network,\r\n    state,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  }\r\n}\r\n","import { NetworkAction, NetworkReducer } from 'smnet'\nimport { GenericBoardGameState } from './GenericBoardGameState'\n\nexport const generalBoardGameReducer: NetworkReducer<GenericBoardGameState, NetworkAction> = (prevState) => {\n  return prevState\n}\n\nexport const withGenericBoardGameReducer = <State extends GenericBoardGameState, Action extends NetworkAction> (reducer: NetworkReducer<State, Action>): NetworkReducer<GenericBoardGameState, NetworkAction> => {\n  return (prevState, action) => {\n    return reducer(generalBoardGameReducer(prevState, action) as State, action as Action)\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport { GameApp } from './demo-gamenet/GameApp'\n\nReactDOM.render(\n  <GameApp/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}